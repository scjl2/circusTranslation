\begin{zsection}
  \SECTION BuildPhase \parents scj\_prelude, SCJBNFEncoding, CircusBNFEncoding, Framework
\end{zsection}

\begin{schema}{AppEnv}
Name : N \\
Parameters : \seq Expression
\end{schema}

\begin{schema}{ClusterAppEnv}
Mission : AppEnv \\
Schedulables : \finset AppEnv
\end{schema}

\begin{schema}{TierAppEnv}
Clusters : \seq ClusterAppEnv
\end{schema}


\begin{schema}{AppProcEnv}
Safelet : AppEnv \\
TopLevelMS : AppEnv \\
Tiers:  \seq TierAppEnv\\
\end{schema}

\begin{axdef}
GetSafeletAppEnv : AppProcEnv \fun AppEnv
\where
\forall a : AppProcEnv @ \\
\t1 GetSafeletAppEnv(a) = a.Safelet
\end{axdef}

\begin{axdef}
GetTLMSAppEnv :  AppProcEnv \fun AppEnv
\where
\forall a : AppProcEnv @ \\
\t1 GetTLMSAppEnv(a) = a.TopLevelMS
\end{axdef}

\begin{axdef}
GetTiersAppEnv :  AppProcEnv \fun \seq TierAppEnv
\where
\forall a : AppProcEnv @ \\
\t1 GetTiersAppEnv(a) = a.Tiers
\end{axdef}

\begin{axdef}
IDof : Identifier \pfun N 
\end{axdef}

\begin{axdef}
ParamsOf : \seq ClassBodyDeclaration \pfun \seq Expression 
\end{axdef}

\begin{axdef}
BuildSOAppEnv : \finset SchedulableObject \pfun \finset AppEnv
\where
\forall scheds : \finset SchedulableObject \\
\t1 | scheds \neq \emptyset \\
\t1 @ \exists manT : ManagedThread ; nestMS : NestedMissionSequencer ; eh : EventHandler \\
\t2 perEH : PeriodicEventHandler ; oneEH : OneShotEventHandler ; \\
\t2 apehShort : Identifier \cross EventHandlerClassBody ; \\
\t2 apehLong :  Identifier \cross LongEventHandlerClassBody\\
\t2 @ BuildSOAppEnv(scheds) = \{ a : AppEnv \\
\t3 | \forall so : scheds @ \exists name : N ; params : \seq Expression \\
\t4 | so = mt(manT) \implies \\ 
\t5 name = IDof(manT.1) \land params = ParamsOf(manT.2.2) \\
\t4 \land so = nms(nestMS) \implies \\ 
\t5 name = IDof(nestMS.1) \land params = ParamsOf(nestMS.2.2) \\
\t4 \land so = handler(pehDecl(perEH)) \implies \\
\t5 name = IDof(perEH.1) \land params = ParamsOf(perEH.2.2) \\
\t4 \land so = handler(osehDecl(oneEH)) \implies \\
\t5 name = IDof(oneEH.1) \land params = ParamsOf(oneEH.2.2) \\
\t4 \land so = handler(apehDecl(apehType(apehShort))) \implies \\
\t5 name = IDof(apehShort.1) \land params = ParamsOf(apehShort.2.2) \\
\t4 \land so = handler(apehDecl(aplehType(apehLong)))\implies \\
\t5 name = IDof(apehLong.1) \land params = ParamsOf(apehLong.2.2) \\
\t1 @ a = \lblot Name == name , Parameters == params \rblot 
\}


\end{axdef}

\begin{axdef}
BuildClusterAppEnv : Cluster \pfun ClusterAppEnv
\where
\forall c: Cluster \\
\t1 | c.2 \neq \emptyset \\
\t1 @ \exists m : Mission ; seqSO : \finset SchedulableObject \\
\t2 | c = (m, seqSO)  \\
\t2 @ BuildClusterAppEnv(c) = \\
\t3 \lblot Mission == \lblot Name == IDof(m.1), Parameters == ParamsOf(m.2.3)\rblot , Schedulables == BuildSOAppEnv(seqSO) \rblot
\end{axdef}

\begin{axdef}
BuildClusterAppEnvs : \seq Cluster \pfun \seq ClusterAppEnv

\end{axdef}

\begin{axdef}
BuildTierAppEnv : Tier \pfun  TierAppEnv
\where
\forall tier : \seq Cluster \\
\t1 | tier \neq \langle \rangle \\
\t1 @ BuildTierAppEnv(tier) = \lblot Clusters ==  BuildClusterAppEnvs(tier) \rblot 
\end{axdef}

\begin{axdef}
BuildTiersAppEnv : \seq Tier \pfun  \seq TierAppEnv
\where
\forall tiers : \seq Tier \\
\t1 | tiers \neq \langle \rangle \\
\t1 @ \# tiers = 1 \implies BuildTiersAppEnv(tiers) = \langle BuildTierAppEnv(head~tiers) \rangle \\
\t1 \land \# tiers \geq 1 \implies BuildTiersAppEnv(tiers) = \\
\t2 \langle BuildTierAppEnv(head~tiers) \rangle \cat BuildTiersAppEnv(tail~tiers)
\end{axdef}

\begin{axdef}
BuildAppProcEnv : SCJProgram \pfun AppProcEnv
\where
\forall scjProg : SCJProgram @ \\
\t1 \exists safelet : Safelet ; tiers : \seq Tier ; ms : MissionSequencer \\
\t2 | scjProg = (safelet, tlms(ms), tiers) @\\
\t3 \exists sfEnv : AppEnv ; tlmsEnv : AppEnv ; \\
\t4 tiersEnv : \seq TierAppEnv  @ \\
\t5 sfEnv = \lblot Name == IDof(safelet.1), Parameters == ParamsOf(safelet.2.4) \rblot \land \\
\t5 tlmsEnv = \lblot Name == IDof(ms.1), Parameters == ParamsOf(ms.2.2) \rblot \land \\
\t5 tiersEnv = BuildTiersAppEnv(tiers) \land \\
\t5 BuildAppProcEnv(scjProg) = \lblot Safelet == sfEnv , TopLevelMS == tlmsEnv , Tiers == tiersEnv \rblot
\end{axdef}

\begin{axdef}
LockingEnv == \seq (ThreadIds \cross Priority) \cross \seq ObjectIds
\end{axdef}

\begin{axdef}
BuildLockEnv : SCJProgram \pfun LockingEnv
\end{axdef}





\begin{schema}{ClusterEnv}
Mission : Identifier \\
NestedMissionSequencers : \finset Identifier \\
ManagedThreads: \finset Identifier \\
PeriodicEventHandlers : \finset Identifier \\
AperiodicEventHandlers :  \finset Identifier \\
OneShotEventHandlers :  \finset Identifier\\
\where
disjoint \langle NestedMissionSequencers, ManagedThreads, PeriodicEventHandlers, \\
\t1 AperiodicEventHandlers, OneShotEventHandlers \rangle \\
\land \bigcup \{NestedMissionSequencers, ManagedThreads, PeriodicEventHandlers, \\
\t1 AperiodicEventHandlers, OneShotEventHandlers \} \neq \emptyset
\end{schema}

\begin{schema}{TierEnv}
Clusters : \seq ClusterEnv 
\where
Clusters \neq \langle \rangle
\end{schema}

\begin{schema}{FWEnv}
TopLevelMS : Identifier \\
Tiers : \seq TierEnv
\where
Tiers \neq \langle \rangle
\end{schema}

\begin{axdef}
GetTierFWEnvs : FWEnv \fun \seq TierEnv
\where
\forall env : FWEnv \\
\t1 @ GetTierFWEnvs(env) = env.Tiers 
\end{axdef}

\begin{axdef}
GetIdentifiers : \finset SchedulableObject \pfun \finset Identifier
\where
\forall scheds : \finset SchedulableObject \\
\t1 | scheds \neq \emptyset \\
\t1 @ \exists manT : ManagedThread ; nestMS : NestedMissionSequencer ;\\
\t2 perEH : PeriodicEventHandler ; oneEH : OneShotEventHandler ; \\
\t2  eh : EventHandler ; \\
\t2 apehShort : Identifier \cross EventHandlerClassBody ; \\
\t2 apehLong :  Identifier \cross LongEventHandlerClassBody \\
\t3 @ GetIdentifiers(scheds) = \{ i : Identifier \\
\t4 | \forall s : scheds \\
\t4 | scheds \neq \emptyset \\
\t5 @ s = mt(manT) \implies i = manT.1 \\
\t5 \land s  = nms(nestMS) \implies i = nestMS.1 \\
\t5 \land s = handler(pehDecl(perEH))  \implies i = perEH.1 \\
\t5 \land s = handler(apehDecl(apehType(apehShort)))  \implies i = apehShort.1 \\
\t5 \land s = handler(apehDecl(aplehType(apehLong)))  \implies i = apehLong.1 \\
\t5 \land s = handler(osehDecl(oneEH))   \implies i = oneEH.1 \\
 \}

\end{axdef}

\begin{axdef}
BuildSOEnvs : \finset SchedulableObject \pfun \\
\t1 \finset Identifier \cross \finset Identifier \cross \finset Identifier \cross \\
\t1 \finset Identifier \cross \finset Identifier
\where
\forall s : \finset SchedulableObject \\
\t1 | s \neq \emptyset \\
\t1 @ \exists sms : \finset Identifier ; pehs : \finset Identifier; \\
\t3 apehs : \finset Identifier; osehs : \finset Identifier; mts: \finset Identifier \\
\t2 | mts = GetIdentifiers(\{ mtSched : s \\
\t3 | \exists m : ManagedThread \\
\t3 @ mtSched = mt(m) \}) \\
\t2 \land sms = GetIdentifiers(\{ nmsSched : s \\
\t3 | \exists n : NestedMissionSequencer \\
\t3 @ nmsSched = nms(n) \}) \\
\t2 \land pehs = GetIdentifiers(\{ pehSched : s \\
\t3 | \exists p : PeriodicEventHandler \\
\t3 @ pehSched = handler(pehDecl(p)) \}) \\
\t2 \land apehs = GetIdentifiers(\{ apehSched : s \\
\t3 | \exists  a :  Identifier \cross EventHandlerClassBody \\ 
\t3  @ apehSched =handler(apehDecl(apehType(a))) \}) \\
\t2 \land apehs =  GetIdentifiers(\{apehLSched : s \\
\t3 | \exists a :  Identifier \cross LongEventHandlerClassBody \\ 
\t3 @ apehLSched = handler(apehDecl(aplehType(a))) \}) \\
\t2 \land osehs = GetIdentifiers(\{osehSched : s \\
\t3 | \exists o : OneShotEventHandler \\ 
\t3 @ osehSched = handler(osehDecl(o)) \}) \\
\t1 @ BuildSOEnvs(s) = (sms, pehs, apehs, osehs, mts)
\end{axdef}

\begin{axdef}
BuildClusterEnv : Cluster \pfun ClusterEnv \\
\where
\forall c : Cluster \\
\t1 | c.2 \neq \emptyset \\
\t1 @ \exists missionName : Identifier ; sms : \finset Identifier ; pehs : \finset Identifier; \\
\t2 apehs : \finset Identifier; oseh :\finset Identifier; mts: \finset Identifier; cluster : ClusterEnv \\
\t1 | missionName = c.1.1  \\
\t1 \land (sms, pehs, apehs, oseh, mts) = BuildSOEnvs(c.2) \\
\t1 @ BuildClusterEnv(c) =  \lblot Mission == missionName, NestedMissionSequencers == sms,  PeriodicEventHandlers == pehs, \\
\t2 AperiodicEventHandlers == apehs, OneShotEventHandlers == oseh, ManagedThreads == mts \rblot
\end{axdef}

\begin{axdef}
BuildClusterEnvs : \seq Cluster \pfun \seq ClusterEnv
\where
dom~BuildClusterEnvs = \{ s : \seq Cluster | s \neq \langle \rangle  \} \\
\forall c : \seq Cluster \\
\t1 | c \neq \langle \rangle \\
\t1 @ \# c = 1 \implies BuildClusterEnvs(c) = \langle BuildClusterEnv(head~c) \rangle \\
\t1 \land \# c \geq 1 \implies BuildClusterEnvs(c) = \langle BuildClusterEnv(head~c) \rangle \cat BuildClusterEnvs(tail~c)
\end{axdef}

\begin{axdef}
  BuildTierEnv : Tier \pfun TierEnv
\where
  \forall tier : \seq Cluster \\
  \t1 @ BuildTierEnv(tier) = \lblot Clusters ==  BuildClusterEnvs(tier) \rblot 
\end{axdef}


\begin{axdef}
BuildTierEnvs : \seq Tier \pfun \seq TierEnv
\where 
\forall tiers : \seq Tier @ \\
\t1 BuildTierEnvs(tiers) = \langle BuildTierEnv(head~tiers) \rangle \cat BuildTierEnvs(tail~tiers)
\end{axdef}

\begin{axdef}
BuildFWEnv : SCJProgram \pfun FWEnv
\where
\forall scjProg : SCJProgram @ \\
\t1 \exists tlms : MissionSequencer ; tlmsID : Identifier ;  tlmsBody : MissionSequencerClassBody ; \\
\t2 tiers : \seq Tier | \\
\t3 scjProg.2 \neq NoSequencer \implies tlms = (tlmsID, tlmsBody) \\
\t3 \land tiers = scjProg.3 @ \\
\t3 BuildFWEnv(scjProg) = \lblot TopLevelMS == tlms.1, Tiers == BuildTierEnvs(tiers) \rblot 

\end{axdef}

\begin{axdef}
%               MethodNme , Locs , Callers, ReturnType , Params , Synchrinised , LocParam , LocType , CallerType
BinderMethodEnv == N \cross \finset N \cross \finset N \cross Type \cross \seq Type \cross \bool \cross N \cross Type \cross Type
\end{axdef}

\begin{axdef}
MCBEnv == \seq BinderMethodEnv
\end{axdef}

\begin{axdef}
GetSFMethods : Safelet \fun \seq ClassBodyDeclaration
\where
\forall sf : Safelet \\
\t1 @ GetSFMethods(sf) = sf.2.4
\end{axdef}

\begin{axdef}
GetTLMSMethods : MissionSequencer \fun \seq ClassBodyDeclaration
\where
\forall tlms : MissionSequencer \\
\t1 @ GetTLMSMethods(tlms) = tlms.2.2
\end{axdef}

\begin{axdef}
BuildBME : N \cross N \cross MethodDeclaration \fun BinderMethodEnv
\end{axdef}

\begin{axdef}
BuildSFMCBEnv : \seq ClassBodyDeclaration \fun \seq BinderMethodEnv
\where
dom~BuildSFMCBEnv = \{ b: \seq ClassBodyDeclaration | b \neq \langle \rangle \} \\

\forall body : \seq ClassBodyDeclaration \\
\t1 | body \neq \langle \rangle \\
\t1 @ BuildSFMCBEnv(body) = \langle \rangle
\end{axdef}

\begin{axdef}
BuildTLMSMCBEnv : \seq ClassBodyDeclaration \fun \seq BinderMethodEnv
\end{axdef}

\begin{axdef}
BuildTierMCBEnvs : \seq Tier \fun \seq BinderMethodEnv
\end{axdef}

\begin{axdef}
BuildMCBEnv : SCJProgram \pfun \seq BinderMethodEnv
\where
\forall scjProg : SCJProgram \\
\t1 |  scjProg.2 \neq NoSequencer \\
\t1 @ \exists sf : Safelet ; tlms : MissionSequencer ; tiers : \seq Tier  \\
\t3 | sf = scjProg.1 \\
\t3 \land tiers = scjProg.3  \\
\t3 @ BuildMCBEnv(scjProg) = \\
\t4 BuildSFMCBEnv(GetSFMethods(sf)) \\
\t4 \cat BuildTLMSMCBEnv(GetTLMSMethods(tlms))  \\
\t4 \cat BuildTierMCBEnvs(tiers)
\end{axdef}