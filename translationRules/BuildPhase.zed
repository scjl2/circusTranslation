\begin{zsection}
  \SECTION BuildPhase \parents scj\_prelude, SCJBNFEncoding, CircusBNFEncoding, Framework
\end{zsection}

\begin{axdef}
AppEnv == N \cross \seq Expression
\end{axdef}

\begin{axdef}
ClusterAppEnv == AppEnv \cross \seq AppEnv
\end{axdef}

\begin{axdef}
TierAppEnv == \seq ClusterAppEnv
\end{axdef}

\begin{axdef}
TiersAppEnv == \seq TierAppEnv
\end{axdef}

\begin{axdef}
AppProcEnv == AppEnv \cross AppEnv \cross TiersAppEnv
\end{axdef}

\begin{axdef}
GetSafeletAppEnv : AppProcEnv \fun AppEnv
\where
\forall a : AppProcEnv @ \\
\t1 GetSafeletAppEnv(a) = a.1
\end{axdef}

\begin{axdef}
GetTLMSAppEnv :  AppProcEnv \fun AppEnv
\where
\forall a : AppProcEnv @ \\
\t1 GetTLMSAppEnv(a) = a.2
\end{axdef}

\begin{axdef}
GetTiersAppEnv :  AppProcEnv \fun TiersAppEnv
\where
\forall a : AppProcEnv @ \\
\t1 GetTiersAppEnv(a) = a.3
\end{axdef}

\begin{axdef}
IDof : Identifier \pfun N 
\end{axdef}

\begin{axdef}
ParamsOf : \seq ClassBodyDeclaration \pfun \seq Expression 
\end{axdef}

\begin{axdef}
BuildSOAppEnv : \seq SchedulableObject \pfun \seq AppEnv
\where
\forall scheds : \seq SchedulableObject \\
\t1 | scheds \neq \langle \rangle \\
\t1 @ \exists manT : ManagedThread ; nestMS : NestedMissionSequencer ; eh : EventHandler \\
\t2 perEH : PeriodicEventHandler ; oneEH : OneShotEventHandler ; \\
\t2 apehShort : Identifier \cross EventHandlerClassBody ; apehLong :  Identifier \cross LongEventHandlerClassBody\\
\t2 @ head~scheds = mt(manT) \implies \\
\t3 BuildSOAppEnv(scheds) = \langle (IDof(manT.1), ParamsOf(manT.2.2)) \rangle \cat BuildSOAppEnv(tail~scheds) \\
\t2 \land head~scheds = nms(nestMS) \implies \\
\t3 BuildSOAppEnv(scheds) = \langle (IDof(nestMS.1), ParamsOf(nestMS.2.2)) \rangle \cat BuildSOAppEnv(tail~scheds) \\
\t2 \land head~scheds = handler(pehDecl(perEH)) \implies \\
\t3 BuildSOAppEnv(scheds) = \langle (IDof(perEH.1), ParamsOf(perEH.2.2)) \rangle \cat BuildSOAppEnv(tail~scheds) \\
\t2 \land head~scheds = handler(osehDecl(oneEH)) \implies \\
\t3 BuildSOAppEnv(scheds) = \langle (IDof(oneEH.1), ParamsOf(oneEH.2.2)) \rangle \cat BuildSOAppEnv(tail~scheds) \\
\t2 \land head~scheds = handler(apehDecl(apehType(apehShort))) \implies \\
\t3 BuildSOAppEnv(scheds) = \langle (IDof(apehShort.1), ParamsOf(apehShort.2.2)) \rangle \cat BuildSOAppEnv(tail~scheds) \\
\t2 \land head~scheds = handler(apehDecl(aplehType(apehLong))) \implies \\
\t3 BuildSOAppEnv(scheds) = \langle (IDof(apehLong.1), ParamsOf(apehLong.2.2)) \rangle \cat BuildSOAppEnv(tail~scheds) \\
\end{axdef}

\begin{axdef}
BuildClusterAppEnv : Cluster \pfun AppEnv \cross \seq AppEnv 
\where
\forall c: Cluster \\
\t1 | c.2 \neq \langle \rangle \\
\t1 @ \exists m : Mission ; seqSO : \seq SchedulableObject \\
\t2 | c = (m, seqSO)  \\
\t2 @ BuildClusterAppEnv(c) = \\
\t3 ((IDof(m.1), ParamsOf(m.2.3)), BuildSOAppEnv(seqSO) )
\end{axdef}

\begin{axdef}
BuildTierAppEnv : Tier \pfun  TierAppEnv
\where
\forall t : Tier \\
\t1 | t \neq \langle \rangle \\
\t1 @ \# t = 1 \implies  BuildTierAppEnv(t) = \langle BuildClusterAppEnv(head~t) \rangle \\
\t1 \land \# t \geq 1 \implies BuildTierAppEnv(t) = \\
\t2 \langle BuildClusterAppEnv(head~t) \rangle \cat BuildTierAppEnv(tail~t)
\end{axdef}

\begin{axdef}
BuildTiersAppEnv : \seq Tier \pfun TiersAppEnv
\where
\forall tiers : \seq Tier \\
\t1 | tiers \neq \langle \rangle \\
\t1 @ \# tiers = 1 \implies BuildTiersAppEnv(tiers) = \langle BuildTierAppEnv(head~tiers) \rangle \\
\t1 \land \# tiers \geq 1 \implies BuildTiersAppEnv(tiers) = \\
\t2 \langle BuildTierAppEnv(head~tiers) \rangle \cat BuildTiersAppEnv(tail~tiers)
\end{axdef}

\begin{axdef}
BuildAppProcEnv : SCJProgram \pfun AppProcEnv
\where
\forall scjProg : SCJProgram @ \\
\t1 \exists safelet : Safelet ; tiers : \seq Tier ; ms : MissionSequencer \\
\t2 | scjProg = (safelet, tlms(ms), tiers) @\\
\t3 \exists sfEnv : AppEnv ; tlmsEnv : AppEnv ; \\
\t4 tiersEnv : TiersAppEnv  @ \\
\t5 sfEnv = (IDof(safelet.1), ParamsOf(safelet.2.4)) \land \\
\t5 tlmsEnv = (IDof(ms.1), ParamsOf(ms.2.2)) \land \\
\t5 tiersEnv = BuildTiersAppEnv(tiers) \land \\
\t5 BuildAppProcEnv(scjProg) = (sfEnv ,tlmsEnv ,tiersEnv)
\end{axdef}

\begin{axdef}
LockingEnv == \seq ThreadIds \cross \seq ObjectIds
\end{axdef}

\begin{axdef}
BuildLockEnv : SCJProgram \pfun LockingEnv
\end{axdef}

\begin{axdef}
GetIdentifiers : \seq SchedulableObject \pfun \seq Identifier
\where
\forall scheds : \seq SchedulableObject \\
\t1 | scheds \neq \langle \rangle \\
\t1 @ \exists ident : Identifier ; manT : ManagedThread ; nestMS : NestedMissionSequencer ; eh : EventHandler \\
\t2 perEH : PeriodicEventHandler ; oneEH : OneShotEventHandler ; \\
\t2 apehShort : Identifier \cross EventHandlerClassBody ; apehLong :  Identifier \cross LongEventHandlerClassBody
\t2 | head~scheds = mt(manT) \implies ident = manT.1 \\
\t2 \land head~scheds = nms(nestMS) \implies ident = nestMS.1 \\
\t2 \land head~scheds = handler(pehDecl(perEH))  \implies ident = perEH.1 \\
\t2 \land head~scheds = handler(apehDecl(apehType(apehShort))) \implies ident = apehShort.1 \\
\t2 \land head~scheds = handler(apehDecl(aplehType(apehLong))) \implies ident = apehLong.1 \\
\t2 \land head~scheds = handler(osehDecl(oneEH))  \implies ident = oneEH.1 \\
\t3 @ \# scheds = 1 \implies GetIdentifiers(scheds) = \langle ident \rangle \\
\t3 \land \# scheds \geq 1 \implies GetIdentifiers(scheds) = \langle ident \rangle \cat GetIdentifiers(tail~scheds)
\end{axdef}

\begin{axdef}
BuildSOEnvs : \seq SchedulableObject \pfun \\
\t1 \seq Identifier \cross \seq Identifier \cross \seq Identifier \cross \\
\t1 \seq Identifier \cross \seq Identifier
\where
\forall s : \seq SchedulableObject \\
\t1 | s \neq \langle \rangle \\
\t1 @ \exists sms : \seq Identifier ; pehs : \seq Identifier; \\
\t3 apehs : \seq Identifier; osehs : \seq Identifier; mts: \seq Identifier \\
\t2 | mts = GetIdentifiers(s \filter \{ m : ManagedThread @ mt(m) \}) \\
\t2 \land sms = GetIdentifiers(s \filter \{ n : NestedMissionSequencer @ nms(n) \}) \\
\t2 \land pehs = GetIdentifiers(s \filter \{ p : PeriodicEventHandler @ handler(pehDecl(p)) \}) \\
\t2 \land apehs = GetIdentifiers(s \filter \{ a :  Identifier \cross EventHandlerClassBody @ handler(apehDecl(apehType(a))) \}) \\
\t2 \land apehs = GetIdentifiers(s \filter \{ a :  Identifier \cross LongEventHandlerClassBody @ handler(apehDecl(aplehType(a))) \}) \\
\t2 \land osehs = GetIdentifiers(s \filter \{ o : OneShotEventHandler @ handler(osehDecl(o)) \}) \\
\t1 @BuildSOEnvs(s) = (sms, pehs, apehs, osehs, mts)

\end{axdef}

\begin{axdef}
ClusterEnv == \\
\t1 Identifier \cross \seq Identifier \cross \seq Identifier \cross \seq Identifier \cross \seq Identifier \cross \seq Identifier
\end{axdef}

\begin{axdef}
TierEnv == \seq ClusterEnv \\
\end{axdef}

\begin{axdef}
FWEnv == Identifier \cross \seq TierEnv
\end{axdef}

\begin{axdef}
BuildClusterEnv : Cluster \pfun ClusterEnv \\
\where
\forall c : Cluster \\
\t1 | c.2 \neq \langle \rangle \\
\t1 @ \exists missionName : Identifier ; sms : \seq Identifier ; pehs : \seq Identifier; \\
\t2 apehs : \seq Identifier; oseh : \seq Identifier; mts: \seq Identifier \\
\t1 | missionName = c.1.1  \\
\t1 \land (sms, pehs, apehs, oseh, mts) = BuildSOEnvs(c.2) \\
\t1 @ BuildClusterEnv(c) = (missionName, sms, pehs, apehs, oseh, mts)
\end{axdef}

\begin{axdef}
  BuildTierEnv : Tier \pfun TierEnv
\where
  \forall t : \seq Cluster @ \\
  \t1 BuildTierEnv(t) = \langle BuildClusterEnv(head~t) \rangle \cat BuildTierEnv(tail~t)
\end{axdef}


\begin{axdef}
BuildTierEnvs : \seq Tier \pfun \seq TierEnv
\where 
\forall tiers : \seq Tier @ \\
\t1 BuildTierEnvs(tiers) = \langle BuildTierEnv(head~tiers) \rangle \cat BuildTierEnvs(tail~tiers)
\end{axdef}

\begin{axdef}
BuildFWEnv : SCJProgram \pfun FWEnv
\where
\forall scjProg : SCJProgram @ \\
\t1 \exists tlms : MissionSequencer ; tlmsID : Identifier ;  tlmsBody : MissionSequencerClassBody ; \\
\t2 tiers : \seq Tier | \\
\t3 scjProg.2 \neq NoSequencer \implies tlms = (tlmsID, tlmsBody) \\
\t3 \land tiers = scjProg.3 @ \\
\t3 BuildFWEnv(scjProg) = (tlms.1  , BuildTierEnvs(tiers))

\end{axdef}

\begin{axdef}
%               MethodNme , Locs , Callers, ReturnType , Params , Synchrinised , LocParam , LocType , CallerType
BinderMethodEnv == N \cross \finset N \cross \finset N \cross Type \cross \seq Type \cross \bool \cross N \cross Type \cross Type
\end{axdef}

\begin{axdef}
MCBEnv == \seq BinderMethodEnv
\end{axdef}

\begin{axdef}
BuildMCBEnv : SCJProgram \pfun \seq BinderMethodEnv

\end{axdef}