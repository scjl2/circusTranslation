\begin{zsection}
  \SECTION TransSCJProg \parents scj\_prelude, SCJBNFEncoding, CircusBNFEncoding, BuildPhase, GeneratePhase, Framework
\end{zsection}

\begin{axdef}
ProcessID : N \pfun ID
\end{axdef}

\begin{axdef}
	TransClasses : SCJProgram \pfun CircusProgram
\end{axdef}

\begin{axdef}
FWName : N \\
AppName : N \\
MCBName : N \\
LockName : N \\
ProgName : Identifier \pfun N 
\end{axdef}

\begin{axdef}
appComms : CSExpression \\
mcbComms : CSExpression \\
lockComms: CSExpression 
\end{axdef}

\begin{axdef}
TransSCJProg : Identifier \cross SCJProgram \pfun CircusProgram
\where
\forall scjProg : SCJProgram; name : Identifier @\\
\t1 \exists app : CircusProgram ;  \\
\t2 program : CircusProgram ; \\
\t2 fwProcs : \seq Process ; appProc : Process ; lockModel : \seq CircusParagraph; \\
\t2 mcbModel : \seq CircusParagraph | \\
\t3 app = TransClasses(scjProg) \land \\
\t3 fwProcs = GenerateFWProcs(BuildFWEnv(scjProg)) \land \\
\t3 appProc = GenerateAppProc(BuildAppProcEnv(scjProg)) \land \\
\t3 mcbModel = GenerateMCBModel(BuildMCBEnv(scjProg)) \land \\
\t3 lockModel = GenerateLockModel(BuildLockEnv(scjProg)) \land \\
\t3 program =  \langle procDef(pd(ProgName(name), \\
\t3 procHide( procPar( \\
\t4 procHide( \\
\t5 procPar(\\
\t6procName(FWName), \\
\t6 appComms, \\
\t6 procHide( \\
\t7 procPar(procName(AppName),\\
\t7 mcbComms,\\
\t7 procName(MCBName)) ,\\
\t6 mcbComms)), \\
\t5 appComms), \\
\t4 lockComms, \\
\t4 procName(LockName)), \\
\t3 lockComms) )) \rangle  @ \\
\t3 TransSCJProg(name, scjProg) =\\
\t4 framework \cat \langle procDef(pd(FWName,head~fwProcs)) \rangle \cat \\
\t5 app \cat \langle procDef(pd(AppName,appProc))\rangle \cat\\
\t5 mcbModel \cat\\
\t5 lockModel \cat\\
\t5 program
\end{axdef}
