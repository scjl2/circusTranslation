\begin{zsection}
  \SECTION TransSCJProg \parents standard\_toolkit, SCJBNFEncoding, CircusBNFEncoding 
\end{zsection}

\begin{axdef}
safeletFW : Process \\
topLevelMissionSequencerFW : Process \\
controlTierSync : CSExpression \\
Tier0 : N \\
\end{axdef} 

\begin{axdef}
GenerateTierProc : \seq Tier \pfun Process 

\end{axdef}

\begin{axdef}
GenerateFWProc : SCJProgram \pfun Process
\where
\forall scj : SCJProgram @ \\
\t1 \exists s : Safelet ; tlms : TopLevelMissionSequencer ; tiers : \seq Tier @ \\
\t1 scj = (s,tlms,tiers) \land\\
\t1 \exists fwProc : Process ; controlTierProc: Process ;  tierProc : Process | \\
\t2 fwProc = procPar(controlTierProc, controlTierSync, tierProc) \land \\
\t2 controlTierProc = \\
\t3 procPar(safeletFW, controlTierSync, topLevelMissionSequencerFW) \land \\
\t2 tierProc = GenerateTierProc(tiers) @ \\
\t2 GenerateFWProc(scj) = fwProc
\end{axdef}

\begin{axdef}
GenerateAppProc : SCJProgram \pfun Process
\end{axdef}

\begin{axdef}
GenerateMCBProc : SCJProgram \pfun Process
\end{axdef}

\begin{axdef}
GenerateLockProc : SCJProgram \pfun Process
\end{axdef}

\begin{axdef}
	TransClasses : SCJProgram \pfun \seq CircusParagraph
\end{axdef}

\begin{axdef}
TransSCJProg : Identifier \cross SCJProgram \pfun CircusProgram
\where
\forall scjProg : SCJProgram; name : Identifier @\\
\t1 \exists framework: CircusProgram ; app : CircusProgram ; mcb : CircusProgram ; \\
\t2 locking : CircusProgram ; program : CircusProgram ; n : N ; p : Process ;\\
\t2 appComms : CSExpression ; mcbComms : CSExpression ; lockComms: CSExpression \\
\t2 fwProc : Process ; appProc : Process ; lockProc : Process; mcbProc : Process | \\
\t1 app = TransClasses(scjProg) \land \\
\t1 fwProc = GenerateFWProc(scjProg) \land \\
\t1 appProc = GenerateAppProc(scjProg) \land \\
\t1 mcbProc = GenerateMCBProc(scjProg) \land \\
\t1 lockProc = GenerateLockProc(scjProg) \land \\
\t1 program = \langle procDef(pd(n,procHide(procPar(procHide(procPar( procHide(\\
\t2 procPar(fwProc, appComms, appProc), appComms), mcbComms, mcbProc)\\
\t2 , mcbComms), lockComms, lockProc), lockComms)  )) \rangle @ \\
\t1 TransSCJProg(name, scjProg) =\\
\t2 framework \cat \langle procDef(pd(n,fwProc)) \rangle \cat \\
\t3 app \cat \langle procDef(pd(n,appProc))\rangle \cat\\
\t3 mcb \cat \langle procDef(pd(n,mcbProc)) \rangle \cat\\
\t3 locking  \cat \langle procDef(pd(n,lockProc)) \rangle \cat \\
\t3 program 
\end{axdef}
