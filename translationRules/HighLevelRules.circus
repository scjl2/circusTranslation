\begin{axdef}
[Expr, Param, Identifier, Field]
\end{axdef}

\begin{zed}
SCJBlock == \seq Expr \\
Params == \seq Param \\
SCJMethSig == Name \cross Params \\
SCJMethod == SCJMethSig \cross SCJBlock \\
Methods == \seq SCJMethod \\
Fields == \seq Field \\
SCJClass == Identifier \cross Fields \cross Methods \\
SCJProg == \seq SCJClass \\
\end{zed}

\begin{axdef}
[Action, CircVar, CircParam, CircName, CircType,\\
\t1 CircExpression, Paragraph,Framework, ChannelDefinition, ChanSetDefinition, ProcDefinition]
\end{axdef}

\begin{zed}
CircActions == \seq Action \\
CircState == \seq CircVar \\
CircParams == \seq CircParam \\
CircProcess == CircName \cross CircParams \cross CircState \cross CircActions \\
CircParagraph ::= Paragraph | ChannelDefinition | ChanSetDefinition | ProcDefinition \\
CircusProg == \seq CircParagraph \\
\end{zed}

\begin{axdef}
TransSCJProg : SCJProg \pfun (CircusProg, Framework)
\where
\forall scjProg : SCJProg | \\
\t1 TransSCJProg(scjProg) = ( TransClasses(seqC) , Framework)
\end{axdef}

\begin{zed}
ProcChannels == (\seq ChannelDefinition, \seq ChanSetDefinition) \\
Channels == ProcChannels   \\
MCBChans == ProcChannels \\
MCBActions == \seq Action \\
\end{zed}

\begin{axdef}
TransClass : SCJClass \pfun (ProcDefinition, ClassDefinition, Channels, MCBChans, MCBActions)
\where
\forall class: SCJClass | \\
\t1 \exists class : SCJClass |\\
\t1 class = @ \\
\t2 \exists proc:ProcDefinition; class:classDefinition; chans:Channels; mcbChans:MCBChans, mcbActions: MCBActions   |\\
\t3  c = (TransName(n) , TransParams(p) , TransVars(v) , TransMeths(m) )@ \\
\t4 TransClass(class) = c
\end{axdef}

\begin{axdef}
TransClasses : SCJClass \pfun CircusProg
\where
\forall classes : \seq SCJClass | \\
\t1 \exists c : SCJClass; seqC : \seq SCJClass |\\
\t2 classes = c \cat seqC @ \\
\t2 \exists p : CircusProg @\\
\t3 p = TransClass(c) \cat TransClasses(seqC)
\end{axdef}

\begin{axdef}
TransMeth : SCJMethod \pfun Action
\where
\forall m : SCJMethod | \\
\t1 \exists ms : SCJMethSig; b : SCJBlock @\\
\t2  m = ms \cross b  @ \\
\t2 TransMeth(m) =  TransMethSig(ms) \cross TransBlock(b)
\end{axdef}

\begin{axdef}
TransMethSig : MethSig \pfun ActionSig
\where
\forall ms : MethSig |\\
\t1 \exists n : Name; p : \seq Param |\\
\t2 ms = n \cross p @\\
\t2 TransMethSig(ms) = TransName(n) \cross TransParams(p)
\end{axdef}

\begin{axdef}
TransParams : SCJParam \pfun \seq CircParam
\where
\forall p : \seq SCJParam |\\
\t1 \exists param : SCJParam; seqParam : \seq SCJParam | \\
\t2 p = param \cat seqParam @ \\
\t2 TransParams(p) = TransParam(param) \cat TransParams(seqParams)
\end{axdef}

\begin{axdef}
TransBlock : SCJBlock \pfun CircBlock
\where
\forall b : SCJBlock |\\
\t1 \exists e : Expr; seqE : \seq Expr | \\
\t1 b = e \cat seqE @\\
\t1 TransBlock(b) = TransExpr(e) \cat TransExprs(seqE)
\end{axdef}
