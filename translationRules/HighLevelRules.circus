\begin{axdef}
[Expr, Param, Identifier, Field]
\end{axdef}

\begin{zed}
SCJBlock == \seq Expr \\
Params == \seq Param \\
SCJMethSig == Name \cross Params \\
SCJMethod == SCJMethSig \cross SCJBlock \\
Methods == \seq SCJMethod \\
Fields == \seq Field \\
SCJClass == Identifier \cross Fields \cross Methods \\
SCJProg == \seq SCJClass \\
\end{zed}

\begin{axdef}
[Action, CircVar, CircParam, CircName, CircType,\\
\t1 CircExpression, Paragraph,Framework, ChannelDefinition,\\
\t1 ChanSetDefinition, ProcDefinition]
\end{axdef}

\begin{zed}
CircActions == \seq Action \\

CircActions == \seq CircAction \\

CircState == \seq CircVar \\
CircParams == \seq CircParam \\
CircProcess == CircName \cross CircParams \cross CircState \cross CircActions \\
CircParagraph ::= Paragraph | ChannelDefinition | ChanSetDefinition | ProcDefinition \\
CircusProg == \seq CircParagraph \\
\end{zed}

\begin{zed}
CircProcess == ProcDefinition \\
OhCircusClass == ClassDefinition \\
ChanTuple == (\seq ChannelDefinition, \seq ChanSetDefinition) \\
Channels == ChanTuple \\
MCBChans == ChanTuple \\
MCBActions == \seq Action\\
ClassTuple == (CircProcess, OhCircusClass, Channels, MCBChans, MCBActions)
\end{zed}

\begin{axdef}

TransSCJProg : SCJProg \pfun (CircusProg, Framework)

\where

\forall scjProg : SCJProg | \\

\t1 TransSCJProg(scjProg) = ( TransClasses(seqC) , Framework)

\end{axdef}

\begin{zed}
ProcChannels == (\seq ChannelDefinition, \seq ChanSetDefinition) \\
Channels == ProcChannels   \\
MCBChans == ProcChannels \\
MCBActions == \seq Action \\
\end{zed}

\begin{axdef}
	TransClasses : \seq SCJClass \pfun \seq ClassTuple
\where
\forall classes : \seq SCJClass @ \\
\t1 \forall class SCJClass @ \\
\t2 TransClasses(\langle class \rangle) = TransClass(class) \land \\
\t2 TransClasses(\langle class \rangle \cat classes) = \langle TransClass(c) \rangle \cat TransClasses(classes)
\end{axdef}

\begin{axdef}
TransClass : SCJClass \pfun ClassTuple
\where
\forall class: SCJClass| \exists meths : \seq Methods @ meths = MethodsOf(class) @ \\
\t1 TransClass(class) = \\
\t2 (TransProc(class), TransOhClass(class) ,TransChans(meths), TransMCBChan(meths), TransMCBAction(meths) )
\end{axdef}

\begin{axdef}
	TransMeths : \seq SCJMethod \pfun \seq Action
\where
\forall meths : \seq SCJMethod @ \\
\t1 \forall meth : SCJMethod @ \\
\t1 TransMeths(\langle meth \rangle) = TransMeth(meth) \land \\
\t2 TransMeths\langle meth \rangle \cat meths) = \langle TransMeth(meth) \cat TransMeths(meths) \rangle
\end{axdef}


\begin{axdef}
TransMeth : SCJMethod \pfun Action
\where
\forall m : SCJMethod @ \\
\t1 \exists ms : SCJMethSig; b : SCJBlock; p : Params |\\
\t2 TransMeth(m) =  (TransMethSig(ms) , TransBlock(b) , TransParams(p))
\end{axdef}

\begin{axdef}
TransParams : Params \pfun CircParams
\where
\forall params : Params @ \\
\t1 \forall param : Param @ \\
\t1 TransParams(\langle param \rangle) = TransParam(param) \\
\t2 TransParams(\langle param \rangle \cat params) = \langle TransParam(param) \cat TransParams(params) \rangle
\end{axdef}

\begin{axdef}
  TransParam : Param \pfun CircParam
\where

\end{axdef}

\begin{axdef}
TransBlock : SCJBlock \pfun CircBlock
\where
\forall block : SCJBlock @ \\
\t1 \forall e : Expr @ \\
\t1 TransBlock(\langle e \rangle) = TransExpr(e) \land \\
\t2 TransBlock(\langle e \rangle \cat block) = \langle TransExpr(e) \cat TransBlock(block) \rangle
\end{axdef}
