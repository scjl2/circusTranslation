\begin{zed}
Var == \num \\
Expr == \num \\
SCJBlock == \seq Expr \\
Name == \num \\
Param == \num \\
Params == \seq Param \\
SCJMethSig == Name \cross Params \\
SCJMethod == SCJMethSig \cross SCJBlock \\
Methods == \seq SCJMethod \\
Vars == \seq Var \\
SCJClass == Name \cross Params \cross Vars \cross Methods \\
SCJProg == \seq SCJClass \\
\end{zed}


\begin{zed}
CircAction == \num \\
CircActions == \seq CircAction \\
CircVar == \num \\
CircState == \seq CircVar \\
CircParam == \num \\
CircParams == \seq CircParam \\
CircName == \num \\
CircProcess == CircName \cross CircParams \cross CircState \cross CircActions \\
CircusProg == \seq CircProcess \\
\end{zed}

\begin{axdef}
TransSCJProg : SCJProg \pfun CircusProg
\where
\forall scjProg : SCJProg | \\
\t1 \exists c : SCJClass; seqC : \seq SCJClass @ scjProg = c \cat seqC @ \\
\t1 \exists p : CircusProg | p = TransClass(c) \cat TransClass(seqC) @ TransSCJProg(scjProg) = p
\end{axdef}

\begin{axdef}
TransClass : SCJClass \pfun CircProcess
\where
\forall class: SCJClass | \\
\t1 \exists n : Name; p: \seq Param; v : \seq Var; m : \seq Meth @ class = n \cross p \cross v \cross m @ \\
\t1 \exists c : CircProcess | c = TransName(n) \cross TransParams(p) \cross TransVars(v) \cross TransMeths(m) @ \\
\t1 TransClass(class) = c
\end{axdef}

\begin{axdef}
TransClasses : SCJClass \pfun CircusProg
\where
\forall classes : \seq SCJClass | \\
\t1 \exists c : SCJClass; seqC : \seq SCJClass @ classes = c \cat seqC @ \\
\t1 \exists p : CircusProg @ p = TransClass(c) \cat TransClasses(seqC)
\end{axdef}

\begin{axdef}
TransMeth : SCJMethod \pfun Action
\where
\forall m : SCJMethod | \\
\t1 \exists ms : SCJMethSig; b : SCJBlock @ m = ms \cross b  @  TransMeth(m) =  TransMethSig(ms) \cross TransBlock(b)
\end{axdef}

\begin{axdef}
TransMethSig : MethSig \pfun ActionSig
\where
\forall ms : MethSig | \exists n : Name; p : \seq Param @ ms = n \cross p @ TransMethSig(ms) = TransName(n) \cross TransParams(p)
\end{axdef}

\begin{axdef}
TransParams : SCJParam \pfun \seq CircParam
\where
\forall p : \seq SCJParam | \exists param : SCJParam; seqParam : \seq SCJParam @ p = param \cat seqParam @ TransParams(p) = TransParam(param) \cat TransParams(seqParams)
\end{axdef}

\begin{axdef}
TransBlock : SCJBlock \pfun CircBlock
\where
\forall b : SCJBlock | \exists e : Expr; seqE : \seq Expr @ b = e \cat seqE @ TransBlock(b) = TransExpr(e) \cat TransExprs(seqE)
\end{axdef}
