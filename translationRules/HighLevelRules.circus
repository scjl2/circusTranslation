\begin{axdef}
[Expr, Param, Identifier, Field]
\end{axdef}

\begin{zed}
SCJBlock == \seq Expr \\
Params == \seq Param \\
SCJMethSig == Name \cross Params \\
SCJMethod == SCJMethSig \cross SCJBlock \\
Methods == \seq SCJMethod \\
Fields == \seq Field \\
SCJClass == Identifier \cross Fields \cross Methods \\
SCJProg == \seq SCJClass \\
\end{zed}

\begin{axdef}
[Action, CircVar, CircParam, CircName, CircType,\\
\t1 CircExpression, Paragraph,Framework, ChannelDefinition, ChanSetDefinition, ProcDefinition]
\end{axdef}

\begin{zed}
CircActions == \seq Action \\

CircActions == \seq CircAction \\

CircState == \seq CircVar \\
CircParams == \seq CircParam \\
CircProcess == CircName \cross CircParams \cross CircState \cross CircActions \\
CircParagraph ::= Paragraph | ChannelDefinition | ChanSetDefinition | ProcDefinition \\
CircusProg == \seq CircParagraph \\
\end{zed}

\begin{axdef}

TransSCJProg : SCJProg \pfun (CircusProg, Framework)

\where

\forall scjProg : SCJProg | \\

\t1 TransSCJProg(scjProg) = ( TransClasses(seqC) , Framework)

\end{axdef}

\begin{zed}
ProcChannels == (\seq ChannelDefinition, \seq ChanSetDefinition) \\
Channels == ProcChannels   \\
MCBChans == ProcChannels \\
MCBActions == \seq Action \\
\end{zed}

\begin{axdef}
TransClass : SCJClass \pfun (ProcDefinition, ClassDefinition, Channels, MCBChans, MCBActions)

\where

\forall class: SCJClass | \\
\t1 \exists class : SCJClass |\\
\t1 class = @ \\
\t2 \exists proc:ProcDefinition; class:classDefinition; chans:Channels; mcbChans:MCBChans, mcbActions: MCBActions   |\\
\t3  c = (TransName(n) , TransParams(p) , TransVars(v) , TransMeths(m) )@ \\
\t4 TransClass(class) = c

\end{axdef}

\begin{axdef}
	TransMethSig : SCJMethSig \pfun ActionSig
\where

\forall classes : \seq SCJClass | \\
\t1 \exists c : SCJClass; seqC : \seq SCJClass |\\
\t2 classes = c \cat seqC @ \\
\t2 \exists p : CircusProg @\\
\t3 p = TransClass(c) \cat TransClasses(seqC)

\end{axdef}

\begin{axdef}
	TransMeths : \seq SCJMethod \pfun Action
\where
\forall seqM : \seq SCJMethod @ \\
\t1 \exists ms : SCJMethSig; b : SCJBlock |\\
\t2 seqM = \seq (ms \cross b)  @ \\
\t2 TransMeths(seqM) =  \seq TransMethSig(ms) \cross TransBlock(b)
\end{axdef}


\begin{axdef}
TransMeth : SCJMethod \pfun Action
\where

\forall m : SCJMethod @ \\
\t1 \exists ms : SCJMethSig; b : SCJBlock |\\
\t2 m = ms \cross b  @ \\

\t2 TransMeth(m) =  TransMethSig(ms) \cross TransBlock(b)
\end{axdef}


\begin{axdef}
	TransClasses : \seq SCJClass \pfun \seq CircClass
\where

\forall classes : \seq SCJClass @ \\
\t1 \exists c : SCJClass; seqC : \seq SCJClass | classes = \langle c \rangle \cat seqC @ \\
\t1 \exists p : CircusProg @ p = TransClass(c) \cat TransClasses(seqC)

\end{axdef}

\begin{axdef}
TransClass : SCJClass \pfun CircProcess
\where

\forall class: SCJClass @ \\
\t1 \exists n : Name; p: \seq Param; v : \seq Var; m : \seq SCJMethod |\\
\t2 class = n \cross p \cross v \cross m @ \\
\t2 \exists c : CircProcess | \\
\t3 c = TransName(n) \cross TransParams(p) \cross TransVars(v) \cross TransMeths(m) @ \\
\t3 TransClass(class) = c

\end{axdef}

\begin{axdef}
TransSCJProg : SCJProg \pfun CircusProg
\where

\forall scjProg : SCJProg @ \\
\t1 \exists c : SCJClass; seqC : \seq SCJClass |\\
\t2 scjProg = \langle c \rangle \cat seqC @ \\
\t2 \exists p : CircusProg |\\
\t3 p = \langle TransClass(c) \rangle  \cat TransClasses(seqC) @\\
\t3 TransSCJProg(scjProg) = p

\end{axdef}
