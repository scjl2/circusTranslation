\begin{zsection}
  \SECTION ~ StateMachine ~ \parents ~ Preliminaries, GlobalConstants, Channels
\end{zsection}

\nid We first define a data type for the states of the state machine.
%
\begin{zed}
  CRUISE\_STATE ::=\\
  \t1 ENGINE\_OFF |\\
  \t1 RUNNING\_IN\_LOW\_GEAR |\\
  \t1 RUNNING\_IN\_TOP\_GEAR |\\
  \t1 BRAKING\_IN\_LOW\_GEAR |\\
  \t1 BRAKING\_IN\_TOP\_GEAR |\\
  \t1 CRUISING |\\
  \t1 ACCELERATING
\end{zed}

%%Zword \dontcare DontCare
%%Zword \activate Activate
%%Zword \deactivate Deactivate
%%Zword \accelerate Accelerate
%%Zword \startaccelerate StartAccelerate
%%Zword \stopaccelerate StopAccelerate

\nid Below we specify the process that models the state machine.

\begin{circusbox}
\begin{circus}
  \circprocess StateMachine ~ \circdef
  \also

  \circbegin
\end{circus}
\vspaceafterzpara

The state has been elaborated in comparison to~\cite{Wel04} in order to reflect that we do not allow the driver to resume cruise mode when no cruise speed has already been recorded. This requires an additional flag.
%
\begin{schema}{\circstateignore ~ State}
   state : CRUISE\_STATE\\
   cruise\_speed\_set : \bool
\end{schema}
\vspaceafterzpara

Initially (and when the engine is turned on) we are always running in low gear (Andy Wellings).
%
\begin{schema}{Reset}
   State~'
\where
  state' = RUNNING\_IN\_LOW\_GEAR\\
  cruise\_speed\_set' = \bfalse
\end{schema}

\begin{comment}
\begin{circusaction}
  \circstate ~ State                                                                  
\end{circusaction}
\end{comment}
\vspaceafterzpara

% We use the $\dontcare$ action in places where the physical environment or hardware device ensures that an event cannot occur, however it is not the obligation of the program to restrict it. For instance, the sensor of the brake pedal ensures that the brake can only be engaged once after each release, and there is no obligations on part of the program to disable the brake interrupt, unless we consider fault-tolerance.

%\begin{circusaction}
%  \dontcare ~ \circdef ~ Chaos
%\end{circusaction}
%\vspaceafterzpara

% Ana wasn't very keen on this approach. That is, our system must be divergence free, even in a misbehaved environment. Hence, I changed the specification that in those cases we block rather than diverge. There is hence indeed an obligation on the program to disable the respective interrupt.

The following three actions correspond to internal actions associated with some of the transitions of our revised diagrams in Appendix~\ref{apx:asms}. They model asynchronous commands to the throttle control executive (i.e.~do not block), and since they are concealed in the top-level model they become urgent.
%
\begin{circusaction}
  \activate ~ \circdef ~ activate \then \Skip
\end{circusaction}

\begin{circusaction}
  \deactivate ~ \circdef ~ deactivate \then \Skip
\end{circusaction}

% I eliminated teh accelerate event in favour of two events, start_accelerate and stop_accelerate.

%\begin{circusaction}
%  \accelerate ~ \circdef ~ accelerate \then Skip
%\end{circusaction}

\begin{circusaction}
  \startaccelerate ~ \circdef ~ start\_accelerate \then \Skip
\end{circusaction}

\begin{circusaction}
  \stopaccelerate ~ \circdef ~ stop\_accelerate \then \Skip
\end{circusaction}
\end{circusbox}
%
\begin{alert}
In principle we can use $activate$ for $stop\_accelerate$. However, in terms of the timing requirements it may be useful to have two events here. This is something I might need to think a little bit more about.
\end{alert}

\newpage

\paragraph{Below we model the state transition diagram in Appendix~\ref{apx:asm1}.}~

\begin{circusbox}
\begin{circusaction}
  StateTrans1 ~ \circdef\\

  % Event: engine.false
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard engine~.~\bfalse \then state := ENGINE\_OFF) ~~~ \extchoice\\

  % Event: engine.true
  \t1 (\lcircguard state = ENGINE\_OFF \rcircguard \circguard engine~.~\btrue \then \lschexpract Reset \rschexpract) ~~~ \extchoice\\

  % Event: brake_engaged
  \t1 (\lcircguard state \in \{RUNNING\_IN\_LOW\_GEAR, RUNNING\_IN\_TOP\_GEAR, CRUISING,\\
  \t3 ACCELERATING\} \rcircguard ~ \circguard\\
  \t2 brake\_engaged ~ \then\\
  \t2 \circif state = RUNNING\_IN\_LOW\_GEAR \circthen state := BRAKING\_IN\_LOW\_GEAR\\
  \t2 \circelse ~~ state = RUNNING\_IN\_TOP\_GEAR \circthen state := BRAKING\_IN\_TOP\_GEAR\\
  \t2 \circelse ~~ state \in \{CRUISING, ACCELERATING\} \circthen\\
  \t3 state := BRAKING\_IN\_TOP\_GEAR \circseq \deactivate\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: brake_disengaged
  \t1 (\lcircguard state \in \{BRAKING\_IN\_LOW\_GEAR, BRAKING\_IN\_TOP\_GEAR\} \rcircguard ~ \circguard\\
  \t2 brake\_disengaged ~ \then\\
  \t2 \circif state = BRAKING\_IN\_LOW\_GEAR \circthen state := RUNNING\_IN\_LOW\_GEAR\\
  \t2 \circelse ~~ state = BRAKING\_IN\_TOP\_GEAR \circthen state := RUNNING\_IN\_TOP\_GEAR\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: top_gear_engaged
  \t1 (\lcircguard state \in \{RUNNING\_IN\_LOW\_GEAR, BRAKING\_IN\_LOW\_GEAR\} \rcircguard ~ \circguard\\
  \t2 top\_gear\_engaged ~ \then\\
  \t2 \circif state = RUNNING\_IN\_LOW\_GEAR \circthen state := RUNNING\_IN\_TOP\_GEAR\\
  \t2 \circelse ~~ state = BRAKING\_IN\_LOW\_GEAR \circthen state := BRAKING\_IN\_TOP\_GEAR\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: top_gear_disengaged
  \t1 (\lcircguard state \in \{RUNNING\_IN\_TOP\_GEAR, BRAKING\_IN\_TOP\_GEAR, CRUISING,\\
  \t3 ACCELERATING\} \rcircguard ~ \circguard\\
  \t2 top\_gear\_disengaged ~ \then\\
  \t2 \circif state = RUNNING\_IN\_TOP\_GEAR \circthen state := RUNNING\_IN\_LOW\_GEAR\\
  \t2 \circelse ~~ state = BRAKING\_IN\_TOP\_GEAR \circthen state := BRAKING\_IN\_LOW\_GEAR\\
  \t2 \circelse ~~ state \in \{CRUISING, ACCELERATING\} ~ \circthen\\
  \t3 state := RUNNING\_IN\_LOW\_GEAR \circseq \deactivate\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: lever.ACTIVATE
  \t1 (\lcircguard state = RUNNING\_IN\_TOP\_GEAR \rcircguard \circguard lever~.~ACTIVATE ~ \then\\
  \t2 state := CRUISING \circseq cruise\_speed\_set := \btrue \circseq \activate) ~~~ \extchoice\\

  % Event: lever.DEACTIVATE
  \t1 (\lcircguard state \in \{CRUISING, ACCELERATING\} \rcircguard \circguard lever~.~DEACTIVATE ~ \then\\
  \t2 state := RUNNING\_IN\_TOP\_GEAR \circseq \deactivate) ~~~ \extchoice\\                  

  % Event: lever.START_ACCELERATION
  \t1 (\lcircguard state = CRUISING \rcircguard \circguard lever~.~START\_ACCELERATION ~ \then\\
  \t2 state := ACCELERATING \circseq \startaccelerate) ~~~ \extchoice\\

  % Event: lever.STOP_ACCELERATION
  \t1 (\lcircguard state = ACCELERATING \rcircguard \circguard lever~.~STOP\_ACCELERATION ~ \then\\
  \t2 state := CRUISING \circseq cruise\_speed\_set := \btrue \circseq \stopaccelerate) ~~~ \extchoice\\

  % Event: lever.RESUME
  \t1 (\lcircguard state = RUNNING\_IN\_TOP\_GEAR \land cruise\_speed\_set = \btrue \rcircguard \circguard lever~.~RESUME ~ \then\\
  \t2 state := CRUISING \circseq \activate)
\end{circusaction}

\begin{circusaction}
  StateMachine1 ~ \circdef ~  \lschexpract Reset \rschexpract \circseq \circmu X \circspot StateTrans1 \circseq X
\end{circusaction}
\end{circusbox}

\nid Above we have the blocking version of the state machine. A correct implementation of this model would have to disable the interrupts of prohibited sensor events as necessary.

\paragraph{Observation}

The specification requires that even if cruise mode is immediately deactivated after activation, namely before there was any chance to generate any $set\_voltage$ events, we nonetheless assume that the cruise speed has now been set. Importantly, a correct implementation must ensure this, no matter how shortly $level~.~deactivate$ is followed by $level~.~activate$ upon the first activation.

\newpage

\paragraph{Below we model the state transition diagram in Appendix~\ref{apx:asm2}.}~
%
\begin{circusbox}
\begin{circusaction}
  StateTrans2 ~ \circdef\\

  % Event: engine.false
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard engine~.~\bfalse \then state := ENGINE\_OFF) ~~~ \extchoice\\

  % Event: engine.true
  \t1 (\lcircguard state = ENGINE\_OFF \rcircguard \circguard engine~.~\btrue \then \lschexpract Reset \rschexpract) ~~~ \extchoice\\

  % Event: brake_engaged
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard brake\_engaged ~ \then\\
  \t2 \circif state = RUNNING\_IN\_LOW\_GEAR \circthen state := BRAKING\_IN\_LOW\_GEAR\\
  \t2 \circelse ~~ state = RUNNING\_IN\_TOP\_GEAR \circthen state := BRAKING\_IN\_TOP\_GEAR\\
  \t2 \circelse ~~ state \in \{BRAKING\_IN\_LOW\_GEAR, BRAKING\_IN\_TOP\_GEAR\} \circthen \Skip\\
  \t2 \circelse ~~ state \in \{CRUISING, ACCELERATING\} ~ \circthen\\
  \t3 state := BRAKING\_IN\_TOP\_GEAR \circseq \deactivate\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: brake_disengaged
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard brake\_disengaged ~ \then\\
  \t2 \circif state = BRAKING\_IN\_LOW\_GEAR \circthen state := RUNNING\_IN\_LOW\_GEAR\\
  \t2 \circelse ~~ state = BRAKING\_IN\_TOP\_GEAR \circthen state := RUNNING\_IN\_TOP\_GEAR\\
  \t2 \circelse ~~ state \in \{RUNNING\_IN\_LOW\_GEAR, RUNNING\_IN\_TOP\_GEAR\} \circthen \Skip\\
  \t2 \circelse ~~ state \in \{CRUISING, ACCELERATING\} \circthen \Skip\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: top_gear_engaged
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard top\_gear\_engaged ~ \then\\
  \t2 \circif state = RUNNING\_IN\_LOW\_GEAR \circthen state := RUNNING\_IN\_TOP\_GEAR\\
  \t2 \circelse ~~ state = BRAKING\_IN\_LOW\_GEAR \circthen state := BRAKING\_IN\_TOP\_GEAR\\
  \t2 \circelse ~~ state \in \{RUNNING\_IN\_TOP\_GEAR, BRAKING\_IN\_TOP\_GEAR\} \circthen \Skip\\
  \t2 \circelse ~~ state \in \{CRUISING, ACCELERATING\} \circthen \Skip\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: top_gear_disengaged
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard top\_gear\_disengaged ~ \then\\
  \t2 \circif state = RUNNING\_IN\_TOP\_GEAR \circthen state := RUNNING\_IN\_LOW\_GEAR\\
  \t2 \circelse ~~ state = BRAKING\_IN\_TOP\_GEAR \circthen state := BRAKING\_IN\_LOW\_GEAR\\
  \t2 \circelse ~~ state \in \{RUNNING\_IN\_LOW\_GEAR, BRAKING\_IN\_LOW\_GEAR\} \circthen \Skip\\
  \t2 \circelse ~~ state \in \{CRUISING, ACCELERATING\} ~ \circthen\\
  \t3 state := RUNNING\_IN\_LOW\_GEAR \circseq \deactivate\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: lever.ACTIVATE
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard lever~.~ACTIVATE ~ \then\\
  \t2 \circif state = RUNNING\_IN\_TOP\_GEAR \circthen state := CRUISING \circseq \activate\\
  \t2 \circelse ~~ \lnot state = RUNNING\_IN\_TOP\_GEAR \circthen \Skip\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: lever.DEACTIVATE
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard lever~.~DEACTIVATE ~ \then\\
  \t2 \circif state \in \{CRUISING, ACCELERATING\} ~ \circthen\\
  \t3 state := RUNNING\_IN\_TOP\_GEAR \circseq cruise\_speed\_set := \btrue \circseq \deactivate\\
  \t2 \circelse ~~ \lnot state \in \{CRUISING, ACCELERATING\} \circthen \Skip\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: lever.START_ACCELERATION
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard lever~.~START\_ACCELERATION ~ \then\\
  \t2 \circif state = CRUISING \circthen state := ACCELERATING \circseq \startaccelerate\\
  \t2 \circelse ~~ \lnot state = CRUISING \circthen \Skip\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: lever.STOP_ACCELERATION
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard lever~.~STOP\_ACCELERATION ~ \then\\
  \t2 \circif state = ACCELERATING \circthen state := CRUISING \circseq \stopaccelerate\\
  \t2 \circelse ~~ \lnot state = ACCELERATING \circthen \Skip\\
  \t2 \circfi) ~~~ \extchoice\\

  % Event: lever.RESUME
  \t1 (\lcircguard state \neq ENGINE\_OFF \rcircguard \circguard lever~.~RESUME ~ \then\\
  \t2 \circif state = RUNNING\_IN\_TOP\_GEAR \land cruise\_speed\_set = \btrue ~ \circthen\\
  \t3 state := CRUISING \circseq \activate\\
  \t2 \circelse ~~ \lnot state = RUNNING\_IN\_TOP\_GEAR \land cruise\_speed\_set = \btrue \circthen \Skip\\
  \t2 \circfi)
\end{circusaction}
\end{circusbox}

\begin{circusbox}
\begin{circusaction}
  StateMachine2 ~ \circdef ~  \lschexpract Reset \rschexpract \circseq \circmu X \circspot StateTrans2 \circseq X
\end{circusaction}

\begin{circusaction}
  \circspot StateMachine2
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
\end{circusbox}
%
\begin{center}
\vspace{-1ex}
\redbox{The model we actually use is the second one where all lever events are always enabled.}
\end{center}
\vspace{1ex}
