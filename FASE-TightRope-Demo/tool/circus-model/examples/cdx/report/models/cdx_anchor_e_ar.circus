\begin{comment}
\begin{zsection}
  \SECTION ~ cdx\_anchor\_e\_ar ~ \parents ~ cdx\_anchor\_e\_sh
\end{zsection}
\end{comment}

\subsection{Phase \name{AR}}

In the \name{AR} phase we carry out algorithmic refinement. This also replaces (class) values by references to objects. We will not discussed this phase in as much detail as the previous phases for our example. There are, however, some refinements which are noteworthy and we shall briefly examine.

\subsubsection*{Refinement of $CalcCollisions$}

The $CalcCollisions$ data operation is used by $OutputCollisionsHandler$ to calculate the number of collisions from the other shared variables. We refine it by simple returning the value of $collisions$. For this, we have to prove the following operation refinement to discharge.
%
\begin{circusbox}
\nounparsedcolour
\begin{schema*}{CalcCollisions}
  \Xi CDxSHState\\
  colls! : \nat
\where
  \exists posns : Frame; motions : Frame | \dom posns = \dom motions @\\
  \circblockopen
  posns = F(currentFrame) \land motions = G(currentFrame, state) \land
  \also
  \exists collset : \finset ~ (Aircraft \cross Aircraft) | collset = CalcCollisionSet(posns, motions) @
  \\
  \t1 (\# collset = 0 \land colls! = 0) \lor (\# collset > 0 \land colls! \geq (\# collset) \div 2)
  \circblockclose
\end{schema*}
%
\begin{circusaction*}
  \t1 \refby
\end{circusaction*}
%
\begin{circusaction*}
  colls := collisions
\end{circusaction*}
\end{circusbox}
%
This refinement is used to simplify the $OutputCollisionsHandler$ action as follows.
%
\begin{circusbox}
\nounparsedcolour
\begin{circusaction*}
  OutputCollisionsHandler
 \end{circusaction*}
%
\begin{circusaction*}
  \dd \refby \; \mbox{``refinement of $CalcCollisions$ and copy rule''}
\end{circusaction*}
%
\begin{circusaction*}
  \circblockopen
    \circmu X \circspot \output \then getColls~?~collisions ~ \then
    \\
    \circvar colls : int \circspot \circwait 0 \upto CC_{TB} \circseq \highlight{colls := collisions} \circseq
    \\
    (output\_collisions~!~colls \then \Skip) \circdeadlinesync OUT\_DL \circseq sync \then X
  \circblockclose
\end{circusaction*}
%
\begin{circusaction*}
  \dd \refby \; \mbox{``elimination of local variable $colls$ using a symmetric version of the law~\thname{var-intro}''}
\end{circusaction*}
%
\begin{circusaction*}
  \circblockopen
    \circmu X \circspot \output \then getColls~?~collisions \then \circwait 0 \upto CC_{TB} \circseq
    \\
    (output\_collisions~!~\highlight{collisions} \then \Skip) \circdeadlinesync OUT\_DL \circseq sync \then X
  \circblockclose
\end{circusaction*}
\extracircusvspace
%
\begin{circusaction*}
  \dd \refby \; \mbox{``elimination of time budget using the law~\thname{narrow-time-budget-1}''}
\end{circusaction*}
%
\begin{circusaction*}
  \circblockopen
    \circmu X \circspot \output \then getColls~?~collisions ~ \then
    \\
    (output\_collisions~!~collisions \then \Skip) \circdeadlinesync OUT\_DL \circseq sync \then X
  \circblockclose
\end{circusaction*}
\end{circusbox}
%
We thus obtain the simplified operation below for the handler outputting the collisions.
%
\begin{circusbox}
\nounparsedcolour
\begin{circusaction*}
  OutputCollisionsHandler ~ \circdef\\
  \t1
  \circblockopen
    \circmu X \circspot \output \then getColls~?~collisions ~ \then
    \\
    (output\_collisions~!~collisions \then \Skip) \circdeadlinesync OUT\_DL \circseq sync \then X
  \circblockclose
\end{circusaction*}
\end{circusbox}
%
Its behaviour is now simply to read the value of the shared $collisions$ variable and output it on the channel $output\_collisions$.

\begin{note}
This refinement could have been carried out earlier, that is already as part of the \name{O} anchor. An argument for this may be that at this point our intention was already clear to use the shared $collisions$ variable to hold the result of the detection phase. On the other hand, we generally want to postpone algorithmic refinement to the end since it is typically the most difficult part to tackle by automation. Performing \emph{some} algorithmic earlier could be envisaged but also might destroy the homogeneity of the refinement strategy.
\end{note}

\subsubsection*{Refinement of $MArea$}

A second algorithmic refinement worth mentioning a (data) refinement of part of the $MArea$ action.
%
\begin{circusaction*}
  MArea ~ \circdef\\
  \t1
  \circblockopen
    \circblockopen
      \circvar currentFrame : RawFrame \circspot
      \\
      \circvar state : StateTable \circspot
      \\
      \circvar work : Partition \circspot
      \\
      \circvar collisions : int \circspot
      \\
      \t1 \circmu X \circspot
      \circblockopen
        (setFrameState~?~v1~?~v2 \then (currentFrame := v1 \circseq state := v2)) ~ ~ \extchoice
        \\
        (getFrameState~!~currentFrame~!~state \then \Skip) ~ ~ \extchoice
        \\
        (setWork~?~v \then work := v) ~ ~ \extchoice
        \\
        (getWork~!~work \then \Skip) ~ ~ \extchoice
        \\
        (initColls \then collisions := 0) ~ ~ \extchoice
        \\
        (recColls~?~x \then (\circwait 0 \upto RC_{TB} \circseq collisions := collisions + x)) ~ ~ \extchoice
        \\
        (getColls~!~collisions \then \Skip)
      \circblockclose
      \circseq X
    \circblockclose
    \interleave
    \also
    \color{Red}
    \circblockopen
      \circvar active : \power ~ (1 \upto 4) \circspot
      \\
      \t1 \circmu X \circspot
      \circblockopen
        (start \then active := \{1, 2, 3, 4\})
        \\
        \t1 \extchoice
        \\
        (notify~?~x \then
        \circblockopen
          active := active \setminus \{x\} \circseq
          \\
          \circif active = \emptyset \circthen \output \then \Skip\\
          \circelse ~ \lnot active = \emptyset \circthen \Skip\\
          \circfi
        \circblockclose)
      \circblockclose
      \circseq X
    \circblockclose
  \circblockclose
\end{circusaction*}
%
The highlighted action above uses and abstract variable $active$ to retain information about handlers that are still active in caclulating their collisions result. In Appendix~\ref{app:DetectorControl}, we include a model for the \verb"DetectorControl" class used to record this data in the program. With it, we refine $MArea$ as follows.
%
\begin{circusaction*}
  MArea ~ \circdef\\
  \t1
  \circblockopen
    \circblockopen
      \circvar currentFrame : RawFrame \circspot
      \\
      \circvar state : StateTable \circspot
      \\
      \circvar work : Partition \circspot
      \\
      \circvar collisions : int \circspot
      \\
      \t1 \circmu X \circspot
      \circblockopen
        (setFrameState~?~v1~?~v2 \then (currentFrame := v1 \circseq state := v2)) ~ ~ \extchoice
        \\
        (getFrameState~!~currentFrame~!~state \then \Skip) ~ ~ \extchoice
        \\
        (setWork~?~v \then work := v) ~ ~ \extchoice
        \\
        (getWork~!~work \then \Skip) ~ ~ \extchoice
        \\
        (initColls \then collisions := 0) ~ ~ \extchoice
        \\
        (recColls~?~x \then (\circwait 0 \upto RC_{TB} \circseq collisions := collisions + x)) ~ ~ \extchoice
        \\
        (getColls~!~collisions \then \Skip)
      \circblockclose
      \circseq X
    \circblockclose
    \interleave
    \also
    \circblockopen
      \circvar control : DetectorControl \circspot control := \circnewM DetectorControl \circseq
      \\
      \t1 \circmu X \circspot
      \circblockopen
        (start \then control~.~start())
        \\
        \t1 \extchoice
        \\
        \circblockopen
          notify~?~i ~ \then\\
          \t1
          \circblockopen
            control~.~notify(i) \circseq
            \\
            \circif control~.~done() = jtrue \circthen \output \then \Skip\\
            \circelse ~ \lnot control~.~done() = jtrue \circthen \Skip\\
            \circfi
          \circblockclose
        \circblockclose
      \circblockclose
      \circseq X
    \circblockclose
  \circblockclose
\end{circusaction*}
%
The $control$ object of type $DetectorControl$ retains the number of active handlers by way of a boolean array. Synchronisations on $start$ and $notify$ result in calling the corresponding methods on the data object. The right-hand branch of the parallelism in fact models an \emph{active} object now:~that is a data object that interacts through synchronisations with other processes. The actual model for the class is thus a mixture of the {\OhCircus} class specification of the data object as well as the active part in the $MArea$ action.
