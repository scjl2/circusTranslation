\begin{comment}
\begin{zsection}
  \SECTION ~ cdx\_anchor\_o4 ~ \parents ~ cdx\_anchor\_a, cdx\_mock\_objects
\end{zsection}
\end{comment}

%%Zword \argfour {}

\subsection{Phase \name{EL}}

In the \name{EL} phase we remove the model variables $\cposns$ and $\cmotions$ which so far have been kept as auxiliary variables to facilitate the formulation of retrieve relations and operation refinements. This is achieved by turning them into local constants within the state schema and data operations.

Not to clutter up the models, we introduce the following global functions $F$ and $G$.
%
\begin{axdef}
  F : RawFrame \fun Frame
\where
  \forall currentFrame : RawFrame @\\
  \t1
  F(currentFrame) =\\
  \t2
  \circblockopen
    \lambda a : Aircraft | currentFrame~.~find(a) \neq \negate 1 @\\
      \t1
      \circblockopen
        \LET i == currentFrame~.~find(a) @\\
        \t1 MkVector
        \circblockopen
          currentFrame~.~positions~.~getA(3 * i),\\
          currentFrame~.~positions~.~getA(3 * i + 1),\\
          currentFrame~.~positions~.~getA(3 * i + 2)
        \circblockclose
     \circblockclose
  \circblockclose
\end{axdef}
%
\begin{axdef}
  G : RawFrame \cross StateTable \fun Frame
\where
  \forall currentFrame : RawFrame; state : StateTable @\\
  \t1
  G(currentFrame, state) =\\
  \t2
  \circblockopen
    \lambda a : Aircraft | currentFrame~.~find(a) \neq \negate 1 @\\
    \t1
    \circblockopen
      \LET prev == state~.~position\_map~.~get(MkCallSign(a)) @\\
      \t1 \IF prev \neq \circnull\\
      \t1 \THEN ~ F(currentFrame)(a) \vminus MkVector(prev~.~x, prev~.~y, prev~.~z)\\
      \t1 \ELSE ~ ZeroV
    \circblockclose
  \circblockclose
\end{axdef}
%
They calculate the abstract state components $posns$ and $motions$ from the concrete state components $currentFrame$ and $state$. The functions are introduced solely to simplify the presentation of the models.

\subsubsection*{Refining Process}

The process for the result of the \name{EL} stage is presented below.
%
\begin{circusflow}
\begin{circus}
  \circprocess ~ OBReqsCDx ~ \circdef ~ \circbegin
\end{circus}
%
% The paper uses LET expressions for posns and motions below but this is not valid in Z as the body of the LET is a predicate. Mention this to Ana at some point.
%
\begin{schema}{\circstateignore ~ OStateCDx}
  currentFrame : RawFrame\\
  state : StateTable\\
  work : Partition\\
  collisions : int
\where
  currentFrame \neq \circnull \land state \neq \circnull \land work \neq \circnull
  \\
  \exists voxel\_map : HashMap[Vector2d,List[Motion]] | voxel\_map \neq \circnull @
  \\
  \exists posns : Frame; motions : Frame | \dom posns = \dom motions @
  \\
  \circblockopen
    posns = F(currentFrame) \land motions = G(currentFrame, state) \land
    \also
    \circblockopen
      \forall a_1, a_2 : Aircraft | \{a_1, a_2\} \subseteq \dom posns @
      \\
      \t1 (a_1, a_2) \in CalcCollisionSet(posns, motions) \implies
      \\
      \t2
      \circblockopen
        \exists l : List[Motion] |
        l \in \hidemath{(}voxel\_map~.~values~\emptytuple\hidemath{)}~.~elems~\emptytuple @\\
        \t1 MkMotion(a_1, posns~a_1 \vminus motions~a_1, posns~a_1) \in l~.~elems~\emptytuple \land\\
        \t1 MkMotion(a_2, posns~a_2 \vminus motions~a_2, posns~a_2) \in l~.~elems~\emptytuple
      \circblockclose
    \circblockclose
    \land
    \also
    \hidemath{(}voxel\_map~.~values~\emptytuple\hidemath{)}~.~elems~\emptytuple = \bigcup ~ \{i : 1 \upto 4 @ \hidemath{(}work~.~getDetectorWork(i)\hidemath{)}~.~elems~\emptytuple\} \land
    \also
    \exists collset : \finset ~ (Aircraft \cross Aircraft) | collset = CalcCollisionSet(posns, motions) @\\
    \t1 (\# collset = 0 \land collisions = 0) \lor (\# collset > 0 \land collisions \geq (\# collset) \div 2)
  \circblockclose
\end{schema}
%
\begin{comment}
\begin{circusaction}
  \circstate ~ OStateCDx
\end{circusaction}
\end{comment}
%
\begin{schema}{Init}
  OStateCDx~'
\where
  currentFrame' = \circnew RawFrame
  \\
  state' = \circnew StateTable
  \\
  work' = \circnew Partition \argfour
  \\
  collisions' = 0
\end{schema}
%
\begin{schema}{RecordFrame}
  \Delta OStateCDx\\
  frame? : Frame
\where
  \exists posns, motions : Frame; posns', motions' : Frame |\\
  \t1 \dom posns = \dom motions \land \dom posns' = \dom motions' @\\
  \\
  \exists voxel\_map : HashMap[Vector2d,List[Motion]] | voxel\_map \neq \circnull @
  \\
  \circblockopen
    posns = F(currentFrame) \land motions = G(currentFrame, state) \land
    \\
    posns' = F(currentFrame') \land motions' = G(currentFrame', state') \land
    \\
    posns' = frame? \land
    \\
    motions' =\\
    \t1 \{a : \dom posns' @ a \mapsto \IF a \in \dom posns \THEN (posns' ~ a) \vminus (posns ~ a) \ELSE ZeroV\} \land
    \also
    \circblockopen
      \forall a_1, a_2 : Aircraft | \{a_1, a_2\} \subseteq \dom posns' @
      \\
      \t1 (a_1, a_2) \in CalcCollisionSet(posns', motions') \implies
      \\
      \t2
      \circblockopen
        \exists l : List[Motion] |
        l \in \hidemath{(}voxel\_map~.~values~\emptytuple\hidemath{)}~.~elems~\emptytuple @\\
        \t1 MkMotion(a_1, posns'~a_1 \vminus motions'~a_1, posns'~a_1) \in l~.~elems~\emptytuple \land\\
        \t1 MkMotion(a_2, posns'~a_2 \vminus motions'~a_2, posns'~a_2) \in l~.~elems~\emptytuple
      \circblockclose
    \circblockclose
    \land
    \also
    \hidemath{(}voxel\_map~.~values~\emptytuple\hidemath{)}~.~elems~\emptytuple = \bigcup ~ \{i : 1 \upto 4 @ \hidemath{(}work'~.~getDetectorWork(i)\hidemath{)}~.~elems~\emptytuple\} \land
    \also
    \exists collset : \finset ~ (Aircraft \cross Aircraft) | collset = CalcCollisionSet(posns', motions') @\\
    \t1 (\# collset = 0 \land collisions' = 0) \lor (\# collset > 0 \land collisions' \geq (\# collset) \div 2)
  \circblockclose
\end{schema}
%
\begin{schema}{CalcCollisions}
  \Xi OStateCDx\\
  colls! : \nat
\where
  colls! = collisions
\end{schema}
%
\begin{circusaction}
  BReq1 ~ \circdef ~ next\_frame~?~frame ~ \then
  \\
  \t1
  \circblockopen
    RecordFrame \circseq
    \\
    \circvar colls : \nat \circspot CalcCollisions \circseq output\_collisions~!~colls \then BReq1
  \circblockclose
\end{circusaction}
\extracircusvspace
%
\begin{circusaction}
  \circspot \lschexpract Init \rschexpract \circseq BReq1
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
\end{circusflow}
%
With this process, we can now specify the top-level \name{O} anchor process.
%
\begin{circus}
  \circsystem ~ OCDx ~ \circdef ~ OBReqsCDx \lpar \lchanset next\_frame, output\_collisions \rchanset  \rpar ATReqsCDx
\end{circus}
%
Because the data refinements only affect the process for the behavioural requirements, the process for the timing requirements is the same as in the a abstract model. The simplification, decomposition and algorithmic refinement of the data operations $RecordFrame$ is still due. This is an issue for the subsequent \name{E} anchor, which we discussed in detail in the next section.
