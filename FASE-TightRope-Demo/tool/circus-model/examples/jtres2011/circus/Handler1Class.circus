\begin{zsection}
  \SECTION ~ Handler1Class ~ \parents ~ scj\_toolkit, scj\_library, List
\end{zsection}

\begin{circus}
  \circclass ~ Handler1 ~ \circdef ~ \circbegin
\end{circus}

\begin{schema}{\circstateignore Handler1\_State}
  list : List
\end{schema}

\begin{schema}{\circinitial Handler1\_Init}
  Handler1\_State~'\\
  list? : List
\where
  list' = list?
\end{schema}
\vspaceafterzpara

%\begin{alert}
%A notable feature of the {\OhCircus} method below is the entering of a memory area via the $\circenter area \circspot A$ construct. My believe is that this is fine, namely we do not have to specify the method as an action because of this. A second issue is how we obtain the $mission\_memory$ memory area object.
%\end{alert}
%
%\begin{circusaction*}
%  \circpublic handleAsyncLongEvent ~ \circdef ~ \circval x : \num \circspot\\
%  \t1 \circenter \green{mission\_memory} \circspot list.insert(x)
%\end{circusaction*}

%\begin{note}
Although the program contains code to execute this method in mission memory, by virtue of an inner class that implements \code{Runnable}, we do not make this explicit in the statement below but use $newM()$ in the $List$ class. This slightly reduces the tracability between the {\Circus} model and Java code.
%\end{note}
%
\begin{circusaction*}
  \circpublic handleAsyncLongEvent ~ \circdef ~ \circval x : \num \circspot list.insert(x)
\end{circusaction*}

\begin{comment}
\begin{circusaction}
  \circspot \Skip
\end{circusaction}
\end{comment}

\begin{circus}
  \circend
\end{circus}

\begin{comment}
\begin{zed}
  [Handler1Class]
\end{zed}
\end{comment}
