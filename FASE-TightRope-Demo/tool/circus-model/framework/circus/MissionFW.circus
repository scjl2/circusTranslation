\begin{zsection}
  \SECTION ~ MissionFW ~ \parents ~ MissionId, MissionChan, HandlerChan, scj\_library
\end{zsection}

\begin{circus}
  \circprocess ~ MissionFW ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{\circstateignore State}
  mission : MissionId\\
  handlers : \finset HandlerId\\
  terminating : boolean
\end{schema}
%
\begin{comment}
\begin{circusaction}
  \circstate State
\end{circusaction}
\end{comment}
%
\begin{schema}{Init}
  State~'
\where
  mission' = nullMId\\
  handlers' = \emptyset\\
  terminating' = jfalse
\end{schema}
%
\begin{circusaction}
  Start ~ \circdef ~ \lschexpract Init \rschexpract \circseq start\_mission~?~m \then mission := m
\end{circusaction}
%
\begin{circusaction}
  AddHandler ~ \circdef ~ \circval ~ handler : HandlerId \circspot handlers := handlers \cup \{handler\}
\end{circusaction}
%
% FDR revealed that the following is flawed as may result in a deadlock.
%
%\begin{circusaction}
%  AddHandlers ~ \circdef ~ \circmu X \circspot register~?~h \then AddHandler(h) \circseq X
%\end{circusaction}
%
%\begin{circusaction}
%  Initialize ~ \circdef ~ (initializeCall~.~mission \then AddHandlers) ~ \circinterrupt ~ initializeRet~.~mission \then \Skip
%\end{circusaction}
%
\begin{circusaction}
  Initialize ~ \circdef ~ initializeCall~.~mission ~ \then\\
  \t1 \circmu X \circspot
  \circblockopen
    (register~?~h \then AddHandler(h) \circseq X)
    \\
    \t1 \extchoice
    \\
    (initializeRet~.~mission \then \Skip)
  \circblockclose
\end{circusaction}
%
\begin{circusaction}
  StartHandlers ~ \circdef ~ \Interleave \; h : handlers \circspot start\_handler~.~h \then \Skip
\end{circusaction}
%
\begin{circusaction}
  StopHandlers ~ \circdef ~ \Interleave \; h : handlers \circspot stop\_handler~.~h \then done\_handler~.~h \then \Skip
\end{circusaction}
%
\begin{circusaction}
  Execute ~ \circdef ~ StartHandlers \circseq activate\_handlers ~ \then\\
  \t1
  \circblockopen
    (stop\_handlers \then StopHandlers \circseq done\_handlers \then \Skip)
    \also
    \t1 \lpar \emptyset | \lchanset stop\_handlers, done\_handlers \rchanset | \{terminating\} \rpar
    \also
    (Methods \circinterrupt done\_handlers \then \Skip)
  \circblockclose
\end{circusaction}
%
\begin{circusaction}
  Cleanup ~ \circdef ~ cleanupCall~.~mission \then cleanupRet~.~mission \then \Skip
\end{circusaction}
%
\begin{circusaction}
  Finish ~ \circdef ~ end\_mission\_app~.~mission \then done\_mission~.~mission \then \Skip
\end{circusaction}
%
\begin{circusaction}
  requestTerminationMeth ~ \circdef ~\\
  \t1
  \circblockopen
    requestTerminationCall ~ \then
    \\
    \circif terminating = jfalse ~ \circthen
    \\
    \t1 (terminating := jtrue \circseq stop\_handlers \then \Skip)
    \\
    \circelse ~ terminating = jtrue \circthen \Skip
    \\
    \circfi \circseq
    \\
    requestTerminationRet \then \Skip
  \circblockclose
\end{circusaction}
%
\begin{circusaction}
  terminationPendingMeth ~ \circdef\\
  \t1 terminationPendingCall \then terminationPendingRet~!~terminating \then \Skip
\end{circusaction}
%
\begin{circusaction}
  Methods ~ \circdef ~ \circmu X \circspot (requestTerminationMeth ~ \extchoice ~ terminationPendingMeth) \circseq X
\end{circusaction}
%
\begin{circusaction}
  \circspot (\circmu X \circspot Start \circseq Initialize \circseq Execute \circseq Cleanup \circseq Finish \circseq X) ~ \circinterrupt ~ end\_mission\_fw \then \Skip
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
