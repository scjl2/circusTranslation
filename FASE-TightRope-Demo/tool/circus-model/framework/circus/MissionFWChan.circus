\begin{zsection}
  \SECTION ~ MissionFWChan ~ \parents ~ MissionId, HandlerId
\end{zsection}
%
The events $start\_mission~.~m$ and $done\_mission~.~m$ are used to start a mission $m$ and wait for its termination.
%
\begin{circus}
  \circchannel ~ start\_mission : MissionId
  \also
  \circchannel ~ done\_mission : MissionId
\end{circus}
%
The channel $register$ is used to register a handler to be executed as part of the current mission. This takes place during execution of the \code{initialize()} method of the mission application process. Synchronisation on this channel corresponds to calling the \code{register()} method on a handler object.
%
\begin{circus}
  \circchannel ~ register : HandlerId
\end{circus}
%
The following two channels control handler execution. They are broadcast events, meaning that all handlers synchronise on them. First, $activate\_handlers$ is used to synchronously activate all handlers that have been started as part of the current mission. Secondly, $stop\_handlers$ is used to synchronously stop all executing handlers once a termination request for the mission has been issued.
%
\begin{circus}
  \circchannel ~ activate\_handlers
  \also
  \circchannel ~ stop\_handlers
\end{circus}
%
The channel below is used internally by the mission framework process. The $done\_handlers$ event is raised when all handlers have acknowledged termination and thus the mission can proceed with its cleanup phase.
%
\begin{circus}
  \circchannel ~ done\_handlers
\end{circus}
%
The last two channels are used to terminate the mission framework and application processes, respectively.
%
\begin{circus}
  \circchannel ~ end\_mission\_fw
  \also
  \circchannel ~ end\_mission\_app : MissionId
\end{circus}
%
We note that the channel $end\_mission\_app$ is parametrised since there may be more than one mission application process, for instance, in a multi-mission program.
