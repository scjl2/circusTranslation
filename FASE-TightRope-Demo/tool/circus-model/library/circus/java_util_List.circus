\begin{zsection}
  \SECTION ~ java\_util\_List ~ \parents ~ PrimitiveTypes, scj\_prelude
\end{zsection}

\begin{ohcircus}
  \circclass ~ [X]java\_util\_List ~ \circdef ~ \circbegin
\end{ohcircus}

\begin{schema}{\circstateignore ~ java\_util\_List\_State}[X]
  \circlogical ~ elements : \seq ~ X
\end{schema}

\begin{schema}{\circpublic java\_util\_List\_add}[X]
  \Delta java\_util\_List\_State[X]\\
  element? : X\\
  result! : boolean 
\where
  elements' = elements \cat \langle element? \rangle\\
  result! = jtrue
\end{schema}

\begin{schema}{\circpublic java\_util\_List\_clear}[X]
  \Delta java\_util\_List\_State[X]
\where
  elements' = \langle \rangle
\end{schema}

\begin{schema}{\circpublic java\_util\_List\_contains}[X]
  \Xi java\_util\_List\_State[X]\\
  element? : X\\
  result! : boolean 
\where
  result! = \IF element? \in \ran elements \THEN jtrue \ELSE jfalse
\end{schema}

\begin{schema}{\circpublic java\_util\_List\_get}[X]
  \Xi java\_util\_List\_State[X]\\
  index? : int\\
  result! : X
\where
  index? \geq 0 \land index? \leq \# elements\\
  result! = elements ~ index?
\end{schema}

\begin{schema}{\circpublic java\_util\_List\_set}[X]
  \Delta java\_util\_List\_State[X]\\
  index? : int\\
  element? : X\\
  result! : X
\where
  index? \geq 0 \land index? \leq \# elements\\
  elements' = elements \oplus \{index? \mapsto element?\}\\
  result! = elements(index?)
\end{schema}

\begin{schema}{\circpublic java\_util\_List\_size}[X]
  \Xi java\_util\_List\_State[X]\\
  result! : int
\where
  result! = \# ~ elements
\end{schema}

\begin{ohcircus}
  \circend
\end{ohcircus}

\begin{zed}
  java\_util\_List\_Class[X] ~ == ~ java\_util\_List\_State[X]
\end{zed}
