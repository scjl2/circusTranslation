
\begin{circus}
  \circprocess ~ GearApp ~ \circdef ~ \circbegin
\end{circus}
%
\begin{circusaction}
  \circstate State ~ == ~ [this : \circreftype GearClass]
\end{circusaction}
%
\begin{circusaction}
  Init ~ == ~ GearInit~?~obj \then this := obj
\end{circusaction}
%
\begin{circusaction}
  Methods ~ \circdef ~ \Stop
\end{circusaction}
%
\begin{circusaction}
  handleAsyncEvent ~ \circdef ~ 
  \\
  \t1
\circblockopen \circvar event : int \circspot event := \invalid ~ \circseq \\ \circif ~ event = TOP\_GEAR\_ENGAGED ~ \then \\ \t1 \circblockopen cruise.topGearEngaged() \circseq \\ \Skip \circblockclose \\ \circelse ~ ~ event = TOP\_GEAR\_DISENGAGED ~ \then \\ \t1 \circblockopen cruise.topGearDisengaged() \circseq \\ \Skip \circblockclose \\ \circelse ~ ~ \lnot \circblockopen event = TOP\_GEAR\_ENGAGED \lor \\ event = TOP\_GEAR\_DISENGAGED \lor \\ false \circblockclose ~ \then \\ \t1 \circblockopen \Div \circblockclose \\ \circfi \circblockclose\end{circusaction}
%
\begin{circusaction}
  Execute ~ \circdef ~ enter\_dispatch~.~GearHId \then Dispatch
\end{circusaction}
%
\begin{circusaction}
  Dispatch ~ \circdef ~ \\
  \t1
  \circblockopen
    \circmu X \circspot
    \circblockopen
      \circblockopen
        \circblockopen
          Methods ~ ~ \extchoice ~
          \\
          (top\_gear\_engaged \then handleAsyncEvent) ~ ~ \extchoice ~ \\
          \\
          (top\_gear\_disengaged \then handleAsyncEvent)
        \circblockclose
        \circseq X
      \circblockclose
      \\
      \extchoice
      \\
      leave\_dispatch~.~GearHId \then \Skip
    \circblockclose
  \circblockclose
\end{circusaction}
%
\begin{circusaction}
  \circspot (\circmu X \circspot Init \circseq Execute \circseq X) \circinterrupt end\_mission\_fw \then \Skip
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
