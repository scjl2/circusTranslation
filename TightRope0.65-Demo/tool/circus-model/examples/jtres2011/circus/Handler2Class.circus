\begin{zsection}
  \SECTION ~ Handler2Class ~ \parents ~ scj\_toolkit, scj\_library, List
\end{zsection}

\begin{circus}
  \circclass ~ Handler2 ~ \circdef ~ \circbegin
\end{circus}

\begin{schema}{\circstateignore Handler2\_State}
  list : List
\end{schema}

\begin{schema}{\circinitial Handler2\_Init}
  Handler2\_State~'\\
  list? : List
\where
  list' = list?
\end{schema}
\vspaceafterzpara

%\begin{note}
The definition of the $handleAsyncEvent$ method as a data operation is trivial here since we do not change the state of the object. As the behaviour of the method involves output communications, $handleAsyncEvent$ has to be specified as an action in any case.
%\end{note}
%
\begin{circusaction}
  \circpublic handleAsyncEvent ~ \circdef ~ \Skip
\end{circusaction}

\begin{comment}
\begin{circusaction}
  \circspot \Skip
\end{circusaction}
\end{comment}

\begin{circus}
  \circend
\end{circus}

\begin{comment}
\begin{zed}
  [Handler2Class]
\end{zed}
\end{comment}
