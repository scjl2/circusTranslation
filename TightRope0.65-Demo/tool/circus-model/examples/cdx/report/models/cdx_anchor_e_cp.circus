\begin{comment}
\begin{zsection}
  \SECTION ~ cdx\_anchor\_e\_cp ~ \parents ~ cdx\_anchor\_o
\end{zsection}
\end{comment}

%%Zword \tone tone
%%Zword \ttwo ttwo

\newcommand{\tone}{t_1}
\newcommand{\ttwo}{t_2}

\subsection{Phase \name{CP}}

The process after performing the collapsing of parallelism is given below.
%
\begin{circusflow}
\begin{circus}
  \circsystem ~ ECPCDx ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{\circstateignore ~ ECPStateCDx}
  currentFrame : RawFrame\\
  state : StateTable\\
  work : Partition\\
  collisions : int
\where
  currentFrame \neq \circnull \land state \neq \circnull \land work \neq \circnull
  \\
  \exists voxel\_map : HashMap[Vector2d,List[Motion]] | voxel\_map \neq \circnull @
  \\
  \exists posns : Frame; motions : Frame | \dom posns = \dom motions @
  \\
  \circblockopen
    posns = F(currentFrame) \land motions = G(currentFrame, state) \land
    \also
    \circblockopen
      \forall a_1, a_2 : Aircraft | \{a_1, a_2\} \subseteq \dom posns @
      \\
      \t1 (a_1, a_2) \in CalcCollisionSet(posns, motions) \implies
      \\
      \t2
      \circblockopen
        \exists l : List[Motion] |
        l \in \hidemath{(}voxel\_map~.~values~\emptytuple\hidemath{)}~.~elems~\emptytuple @\\
        \t1 MkMotion(a_1, posns~a_1 \vminus motions~a_1, posns~a_1) \in l~.~elems~\emptytuple \land\\
        \t1 MkMotion(a_2, posns~a_2 \vminus motions~a_2, posns~a_2) \in l~.~elems~\emptytuple
      \circblockclose
    \circblockclose
    \land
    \also
    \hidemath{(}voxel\_map~.~values~\emptytuple\hidemath{)}~.~elems~\emptytuple = \bigcup ~ \{i : 1 \upto 4 @ \hidemath{(}work~.~getDetectorWork(i)\hidemath{)}~.~elems~\emptytuple\} \land
    \also
    \exists collset : \finset ~ (Aircraft \cross Aircraft) | collset = CalcCollisionSet(posns, motions) @\\
    \t1 (\# collset = 0 \land collisions = 0) \lor (\# collset > 0 \land collisions \geq (\# collset) \div 2)
  \circblockclose
\end{schema}
%
\begin{comment}
\begin{circusaction}
  \circstate ~ ECPStateCDx
\end{circusaction}
\end{comment}
%
\begin{schema}{Init}
  ECPStateCDx~'
\where
  currentFrame' = \circnew RawFrame
  \\
  state' = \circnew StateTable
  \\
  work' = \circnew Partition \argfour
  \\
  collisions' = 0
\end{schema}
%
\begin{schema}{RecordFrame}
  \Delta ECPStateCDx\\
  frame? : Frame
\where
  \exists posns, motions : Frame; posns', motions' : Frame |\\
  \t1 \dom posns = \dom motions \land \dom posns' = \dom motions' @\\
  \\
  \exists voxel\_map : HashMap[Vector2d,List[Motion]] | voxel\_map \neq \circnull @
  \\
  \circblockopen
    posns = F(currentFrame) \land motions = G(currentFrame, state) \land
    \\
    posns' = F(currentFrame') \land motions' = G(currentFrame', state') \land
    \\
    posns' = frame? \land
    \\
    motions' =\\
    \t1 \{a : \dom posns' @ a \mapsto \IF a \in \dom posns \THEN (posns' ~ a) \vminus (posns ~ a) \ELSE ZeroV\} \land
    \also
    \circblockopen
      \forall a_1, a_2 : Aircraft | \{a_1, a_2\} \subseteq \dom posns' @
      \\
      \t1 (a_1, a_2) \in CalcCollisionSet(posns', motions') \implies
      \\
      \t2
      \circblockopen
        \exists l : List[Motion] |
        l \in \hidemath{(}voxel\_map~.~values~\emptytuple\hidemath{)}~.~elems~\emptytuple @\\
        \t1 MkMotion(a_1, posns'~a_1 \vminus motions'~a_1, posns'~a_1) \in l~.~elems~\emptytuple \land\\
        \t1 MkMotion(a_2, posns'~a_2 \vminus motions'~a_2, posns'~a_2) \in l~.~elems~\emptytuple
      \circblockclose
    \circblockclose
    \land
    \also
    \hidemath{(}voxel\_map~.~values~\emptytuple\hidemath{)}~.~elems~\emptytuple = \bigcup ~ \{i : 1 \upto 4 @ \hidemath{(}work'~.~getDetectorWork(i)\hidemath{)}~.~elems~\emptytuple\} \land
    \also
    \exists collset : \finset ~ (Aircraft \cross Aircraft) | collset = CalcCollisionSet(posns', motions') @\\
    \t1 (\# collset = 0 \land collisions' = 0) \lor (\# collset > 0 \land collisions' \geq (\# collset) \div 2)
  \circblockclose
\end{schema}
%
\begin{schema}{CalcCollisions}
  \Xi ECPStateCDx\\
  colls! : \nat
\where
  colls! = collisions
\end{schema}
%
\begin{circusaction}
  StartCycle ~ \circdef ~ (next\_frame~?~frame~\circat~\tone \then (\lschexpract RecordFrame \rschexpract \circseq CalcStep(\tone))) \circdeadlinesync INP\_DL
\end{circusaction}
%
\begin{circusaction}
  CalcStep ~ \circdef ~ \circval t : TIME \circspot \circwaitblock w : 0 \upto (FRAME\_PERIOD - OUT\_DL - t) \circspot
  \\
  \t1 \circvar colls : int \circspot \lschexpract CalcCollisions \rschexpract \circseq OutputStep(t, w, colls)
\end{circusaction}
%
\begin{circusaction}
  OutputStep ~ \circdef ~ \circval \tone : TIME; \circval w : TIME; \circval colls : int \circspot\\
  \t1
  \circblockopen
    output\_collisions~!~colls~\circat~\ttwo ~ \then
    \\
    \t1 \circwait FRAME\_PERIOD - (\tone + w + \ttwo)
  \circblockclose
  \circdeadlinesync OUT\_DL \circseq StartCycle
\end{circusaction}
\extracircusvspace
%
\begin{circusaction}
  \circspot \lschexpract Init \rschexpract \circseq StartCycle
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
\end{circusflow}
%
The definitions of the process state as well as the $Init$, $RecordFrame$ and $CalcCollisions$ data operations are exactly as in $OBReqsCDx$. The parallelisms with $ATReqsCDx$, however, has been collapsed, giving rise to the new actions $StartCycle$, $CalcStep$ and $OutputStep$. The necessary refinement steps and laws are not further discussed here, however the overall refinement procedure ought to be automatable.
