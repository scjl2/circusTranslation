\begin{zsection}
  \SECTION ~ GroundDistanceMonitorApp ~ \parents ~ PeriodicEventHandlerChan, SchedulableId, SchedulableIds \\
 \t1  , \\
MainMissionMethChan



\end{zsection}

\begin{circus}
\circprocess GroundDistanceMonitorApp \circdef \\ \qquad
  mainMission : MissionID
 
\circspot
  \circbegin
\end{circus}


\begin{circusaction}
handlerAsyncEvent \circdef \\
\circblockopen
	handleAsyncEventCall~.~GroundDistanceMonitor \then \\
	
      \circblockopen

\Skip


               \circseq \\

            binder\_getAltitudeCall~.~mainMission~.~GroundDistanceMonitor\then \ \ binder\_getAltitudeRet~.~mainMission~.~GroundDistanceMonitor~?~getAltitude\then \ \\ \ \circvar distance : \mathbb{R} \circspot distance :=~getAltitude\ \


              \circif ~ (distance = readingOnGround) ~ \circthen ~
  \\
  \t1

      \circblockopen

\Skip


               \circseq \\

            requestTerminationCall~.~mainMission~.~GroundDistanceMonitor\then \ \ requestTerminationRet~.~mainMission~.~GroundDistanceMonitor~?~requestTermination\then \ \

\Skip
        \circblockclose


  \\
  \circelse ~ (distance = readingOnGround) \circthen \Skip
  \\
  \circfi \circseq \\

\Skip
        \circblockclose

 \circseq \\
    handleAsyncEventRet~.~GroundDistanceMonitor \then \\
    \Skip
\circblockclose
\end{circusaction}

%
%

\begin{circusaction}
Methods \circdef \\
\circblockopen
	handlerAsyncEvent \\
%
%
%
\circblockclose
	 \circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( Methods) 
  \circinterrupt (end\_periodic\_app~.~GroundDistanceMonitor \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
