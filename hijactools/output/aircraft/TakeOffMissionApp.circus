\begin{zsection}
  \SECTION ~ TakeOffMissionApp ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan , TakeOffMissionClass

  \t1 , TakeOffMissionMethChan
\end{zsection}
%\begin{circus}
%\circchannelset TakeOffMissionAppSync == \\
%	\lchanset initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet  \rchanset
%\end{circus}

%\begin{circus}
%\circchannelset TakeOffMissionAppChanSet == \\
% \lchanset initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,

%    register~.~LandingGearHandlerTakeOff~.~TakeOffMission 
%    register~.~TakeOffMonitor~.~TakeOffMission 
%    register~.~TakeOffFailureHandler~.~TakeOffMission 
%\rchanset
%\end{circus}

\begin{circus}
\circprocess TakeOffMissionApp \circdef   storageParametersSchedulable : MissionID
,
  landingGearHandler : MissionID
,
  takeOffMonitor : MissionID
,
  takeOffFailureHandler : MissionID
\circspot 
 \circbegin
\end{circus}

\begin{schema}{State}
  this : \circreftype TakeOffMissionClass\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
\where
  this' = \circnew TakeOffMissionClass()\\ 
\end{schema}

\begin{circusaction}
InitializePhase \circdef \\
\circblockopen
  initializeCall~.~TakeOffMission \then \\
  
	register~!~LandingGearHandlerTakeOff~!~TakeOffMission \then   \\
	register~!~TakeOffMonitor~!~TakeOffMission \then   \\
	register~!~TakeOffFailureHandler~!~TakeOffMission \then   \\


  initializeRet~.~TakeOffMission \then \\
  \Skip
\circblockclose 
\end{circusaction}
 
\begin{circusaction}
CleanupPhase \circdef  \\
\circblockopen
 cleanupMissionCall~.~TakeOffMission \then \\

 cleanupMissionRet~.~TakeOffMission~!~\true \then \\
 \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
abortMeth \circdef 
\\
\circblockopen
abortCall~.~TakeOffMission 
\then \\
this~.~abort()  \circseq  \\

abortRet~.~TakeOffMission \then \\
\Skip
\circblockclose
\end{circusaction}	
\begin{circusaction}
getControllingMissionMeth \circdef 
\circvar ret : MissionID \circspot
\\
\circblockopen
getControllingMissionCall~.~TakeOffMission 
\then \\
ret := this~.~getControllingMission()  \circseq  \\

getControllingMissionRet~.~TakeOffMission~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}	
\begin{circusaction}
setControllingMissionMeth \circdef 
\\
\circblockopen
setControllingMissionCall~.~TakeOffMission 
~?~controllingMission
\then \\
this~.~setControllingMission(controllingMission)  \circseq  \\

setControllingMissionRet~.~TakeOffMission \then \\
\Skip
\circblockclose
\end{circusaction}	
\begin{circusaction}
cleanUpMeth \circdef 
\circvar ret : \boolean \circspot
\\
\circblockopen
cleanUpCall~.~TakeOffMission 
\then \\
ret := this~.~cleanUp()  \circseq  \\

cleanUpRet~.~TakeOffMission~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}	
\begin{circusaction}
stowLandingGearMeth \circdef 
\\
\circblockopen
stowLandingGearCall~.~TakeOffMission 
\then \\
this~.~stowLandingGear()  \circseq  \\

stowLandingGearRet~.~TakeOffMission \then \\
\Skip
\circblockclose
\end{circusaction}	
\begin{circusaction}
isLandingGearDeployedMeth \circdef 
\circvar ret : \boolean \circspot
\\
\circblockopen
isLandingGearDeployedCall~.~TakeOffMission 
\then \\
ret := this~.~isLandingGearDeployed()  \circseq  \\

isLandingGearDeployedRet~.~TakeOffMission~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}	
%
\begin{circusaction}
deployLandingGearSyncMeth \circdef 
\\
\circblockopen
deployLandingGearCall~.~TakeOffMission~?~thread 
 \then \\
\circblockopen
startSyncMeth~.~TakeOffMissionObject~.~thread \then \\
lockAcquired~.~TakeOffMissionObject~.~thread \then \\

      \circblockopen

this~.~landingGearDeployed :=true
 

        \circblockclose  

 \circseq  \\
endSyncMeth~.~TakeOffMissionObject~.~thread \then  \\

deployLandingGearRet~.~TakeOffMission~.~thread \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}	
%

\begin{circusaction}
Methods \circdef 
\circblockopen
	InitializePhase \\
	\extchoice \\
	CleanupPhase \\
%
\extchoice \\
	abortMeth \\ 
\extchoice \\
	getControllingMissionMeth \\ 
\extchoice \\
	setControllingMissionMeth \\ 
\extchoice \\
	cleanUpMeth \\ 
\extchoice \\
	stowLandingGearMeth \\ 
\extchoice \\
	isLandingGearDeployedMeth \\ 
%
	\extchoice \\
	deployLandingGearSyncMeth \\	
%
\circblockclose 
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
 \circinterrupt (end\_mission\_app~.~TakeOffMission \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
