\begin{zsection}
  \SECTION ~ CruiseMissionApp ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan , CruiseMissionClass

  \t1 , CruiseMissionMethChan
\end{zsection}
%\begin{circus}
%\circchannelset CruiseMissionAppSync == \\
%	\lchanset initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet  \rchanset
%\end{circus}

%\begin{circus}
%\circchannelset CruiseMissionAppChanSet == \\
% \lchanset initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,

%    register~.~BeginLandingHandler~.~CruiseMission 
%    register~.~NavigationMonitor~.~CruiseMission 
%\rchanset
%\end{circus}

\begin{circus}
\circprocess CruiseMissionApp \circdef   storageParametersSchedulable : MissionID
,
  beginLandingHandler : MissionID
,
  navigationMonitor : MissionID
,
  landSim : MissionID
\circspot 
 \circbegin
\end{circus}

\begin{schema}{State}
  this : \circreftype CruiseMissionClass\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
\where
  this' = \circnew CruiseMissionClass()\\ 
\end{schema}

\begin{circusaction}
InitializePhase \circdef \\
\circblockopen
  initializeCall~.~CruiseMission \then \\
  
	register~!~BeginLandingHandler~!~CruiseMission \then   \\
	register~!~NavigationMonitor~!~CruiseMission \then   \\


  initializeRet~.~CruiseMission \then \\
  \Skip
\circblockclose 
\end{circusaction}
 
\begin{circusaction}
CleanupPhase \circdef  \\
\circblockopen
 cleanupMissionCall~.~CruiseMission \then \\

 cleanupMissionRet~.~CruiseMission~!~\true \then \\
 \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
getControllingMissionMeth \circdef 
\circvar ret : MissionID \circspot
\\
\circblockopen
getControllingMissionCall~.~CruiseMission 
\then \\
ret := this~.~getControllingMission()  \circseq  \\

getControllingMissionRet~.~CruiseMission~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}	
%
%

\begin{circusaction}
Methods \circdef 
\circblockopen
	InitializePhase \\
	\extchoice \\
	CleanupPhase \\
%
\extchoice \\
	getControllingMissionMeth \\ 
%
%
\circblockclose 
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
 \circinterrupt (end\_mission\_app~.~CruiseMission \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
