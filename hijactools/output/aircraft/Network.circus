%+++ Channel Sets +++

% MAKE THIS PARSE

\begin{zsection}
	\SECTION ~ NetworkChannels ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
		\t1 SchedulableId, SchedulableIds, MissionChan, SchedulableChan, TopLevelMissionSequencerFWChan,\\
		\t1 FrameworkChan, SafeletChan
\end{zsection}
%
\begin{circus}
\circchannelset ~ TerminateSync == \\ \t1 \lchanset schedulables\_terminated, schedulables\_stopped, get\_activeSchedulables \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ ControlTierSync ==\\ \t1 \lchanset start\_toplevel\_sequencer, done\_toplevel\_sequencer, done\_safeletFW \rchanset
\end{circus}
% IDs wont type check again   Start Mission and Done Mission wont parse?
\begin{circus}
\circchannelset ~ TierSync == \\ \t1 \lchanset start\_mission~.~MainMission, done\_mission~.~MainMission,\\
	\t1 done\_safeletFW, done\_toplevel\_sequencer\rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ MissionSync == \\ \t1 \lchanset done\_safeletFW, done\_toplevel\_sequencer, register, \\
                 signalTerminationCall, signalTerminationRet, activate\_schedulables, done\_schedulable, \\
                 cleanupSchedulableCall, cleanupSchedulableRet  \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ SchedulablesSync == \\ \t1 \lchanset activate\_schedulables, done\_safeletFW, done\_toplevel\_sequencer \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ ClusterSync == \\ \t1 \lchanset done\_toplevel\_sequencer, done\_safeletFW \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ AppSync == \\ \t1  \bigcup \{SafeltAppSync, MissionSequencerAppSync, MissionAppSync, \\ \t1 MTAppSync, OSEHSync , APEHSync,  \\ \t1
	\lchanset getSequencer, end\_mission\_app, end\_managedThread\_app, \\ \t1 setCeilingPriority, requestTerminationCall,requestTerminationRet, terminationPendingCall, \\ \t1 terminationPendingRet, handleAsyncEventCall, handleAsyncEventRet\rchanset  \}
\end{circus}
%
%\begin{circus}
%\circchannelset ~ ObjectSync   == \\ \t1    \lchanset	 \rchanset
%\end{circus}

\begin{circus}
\circchannelset ~ ThreadSync == \\ \t1  \lchanset raise\_thread\_priority, lower\_thread\_priority, isInterruptedCall, isInterruptedRet, get\_priorityLevel 	\rchanset
\end{circus}

\begin{circus}
\circchannelset ~ LockingSync == \\ \t1  \lchanset lockAcquired, startSyncMeth, endSyncMeth, waitCall, waitRet, notify, isInterruptedCall, isInterruptedRet, \\
\t1 interruptedCall, interruptedRet, done\_toplevel\_sequencer, get\_priorityLevel  \rchanset
\end{circus}

%IDs wont type check
\begin{circus}
\circchannelset ~ Tier0Sync == \\
\t1 \lchanset
done\_toplevel\_sequencer, done\_safeletFW, \\
\t1 start\_mission~.~TakeOffMission, done\_mission~.~TakeOffMission,\\
\t1 initializeRet~.~TakeOffMission,
requestTermination~.~TakeOffMission~.~MainMissionSequencer

, \\
\t1 start\_mission~.~CruiseMission, done\_mission~.~CruiseMission,\\
\t1 initializeRet~.~CruiseMission,
requestTermination~.~CruiseMission~.~MainMissionSequencer

, \\
\t1 start\_mission~.~LandMission, done\_mission~.~LandMission,\\
\t1 initializeRet~.~LandMission,
requestTermination~.~LandMission~.~MainMissionSequencer


\rchanset
\end{circus}
%
%
%
%
\newpage

%
%+++ Program +++
%
\begin{zsection}
  \SECTION ~ Program ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan, MissionFW,\\
  \t1 SafeletFW, TopLevelMissionSequencerFW, NetworkChannels, ManagedThreadFW, \\
  \t1 SchedulableMissionSequencerFW, PeriodicEventHandlerFW, OneShotEventHandlerFW,\\
  \t1 AperiodicEventHandlerFW, ObjectFW, ThreadFW, \\
  \t1 ACSafeletApp, MainMissionSequencerApp,

MainMissionApp,

ACModeChangerApp
	,
ControlHandlerApp
	,
\\ \t1
CommunicationsHandlerApp
	,
EnvironmentMonitorApp
	,
FlightSensorsMonitorApp
	,
\\ \t1
AperiodicSimulatorApp
	
	
	,
TakeOffMissionApp,

LandingGearHandlerTakeOffApp
	,
TakeOffFailureHandlerApp
	,
\\ \t1
TakeOffMonitorApp
	
	,
CruiseMissionApp,

BeginLandingHandlerApp
	,
NavigationMonitorApp
	
\\ \t1
	,
LandMissionApp,

LandingGearHandlerLandApp
	,
SafeLandingHandlerApp
	,
GroundDistanceMonitorApp
	,
\\ \t1
InstrumentLandingSystemMonitorApp
	
	
	
\end{zsection}
%
\begin{circus}
\circprocess ControlTier \circdef \\
\circblockopen
SafeletFW \\
\t1 \lpar ControlTierSync \rpar \\
TopLevelMissionSequencerFW(MainMissionSequencer)
\circblockclose
\end{circus}
%


\begin{circus}
\circprocess Tier0 \circdef \\

\circblockopen
	MissionFW(MainMissionID)\\
		\t1 	\lpar MissionSync \rpar \\
		\circblockopen









			SchedulableMissionSequencerFW(ACModeChangerID)\\
\t1 \lpar SchedulablesSync \rpar\\


\circblockopen
			AperiodicEventHandlerFW(ControlHandlerID ,(time(10,0),null)   )\\
			\t1 \lpar SchedulablesSync \rpar\\
			AperiodicEventHandlerFW(CommunicationsHandlerID ,(NULL,nullSchedulableId)   )\\
\circblockclose \\


\t1 \lpar SchedulablesSync \rpar\\



\circblockopen
			PeriodicEventHandlerFW(EnvironmentMonitorID ,(time(10,0),NULL,NULL,nullSchedulableId)   )\\
			\t1 \lpar SchedulablesSync \rpar\\
			PeriodicEventHandlerFW(FlightSensorsMonitorID ,(time(10,0),NULL,NULL,nullSchedulableId)   )\\
			\t1 \lpar SchedulablesSync \rpar\\
			PeriodicEventHandlerFW(AperiodicSimulatorID ,(time(10,0),NULL,NULL,nullSchedulableId)   )\\
\circblockclose \\

		\circblockclose
\circblockclose
\end{circus}
%
\begin{circus}
\circprocess Tier1 \circdef \\

\circblockopen
	MissionFW(TakeOffMissionID)\\
		\t1 	\lpar MissionSync \rpar \\
		\circblockopen










\circblockopen
			AperiodicEventHandlerFW(LandingGearHandlerTakeOffID ,(NULL,nullSchedulableId)   )\\
			\t1 \lpar SchedulablesSync \rpar\\
			AperiodicEventHandlerFW(TakeOffFailureHandlerID ,(NULL,nullSchedulableId)   )\\
\circblockclose \\


\t1 \lpar SchedulablesSync \rpar\\



			PeriodicEventHandlerFW(TakeOffMonitorID ,(time(0,0),time(500,0),NULL,nullSchedulableId)   )\\
		\circblockclose
\circblockclose
	\\ \t1 \lpar ClusterSync \rpar \\

\circblockopen
	MissionFW(CruiseMissionID)\\
		\t1 	\lpar MissionSync \rpar \\
		\circblockopen










			AperiodicEventHandlerFW(BeginLandingHandlerID ,(NULL,nullSchedulableId)   )\\

\t1 \lpar SchedulablesSync \rpar\\



			PeriodicEventHandlerFW(NavigationMonitorID ,(time(0,0),time(10,0),NULL,nullSchedulableId)   )\\
		\circblockclose
\circblockclose
	\\ \t1 \lpar ClusterSync \rpar \\

\circblockopen
	MissionFW(LandMissionID)\\
		\t1 	\lpar MissionSync \rpar \\
		\circblockopen










\circblockopen
			AperiodicEventHandlerFW(LandingGearHandlerLandID ,(NULL,nullSchedulableId)   )\\
			\t1 \lpar SchedulablesSync \rpar\\
			AperiodicEventHandlerFW(SafeLandingHandlerID ,(NULL,nullSchedulableId)   )\\
\circblockclose \\


\t1 \lpar SchedulablesSync \rpar\\



\circblockopen
			PeriodicEventHandlerFW(GroundDistanceMonitorID ,(time(0,0),time(10,0),NULL,nullSchedulableId)   )\\
			\t1 \lpar SchedulablesSync \rpar\\
			PeriodicEventHandlerFW(InstrumentLandingSystemMonitorID ,(time(0,0),time(10,0),NULL,nullSchedulableId)   )\\
\circblockclose \\

		\circblockclose
\circblockclose
\end{circus}
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Framework +++
%
\begin{circus}
\circprocess Framework \circdef \\
\circblockopen
ControlTier \\
\t1 \lpar TierSync \rpar \\
 \circblockopen
Tier0
\\ \t1 \lpar Tier0Sync \rpar \\
Tier1
\circblockclose
\circblockclose
\end{circus}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% APPLICATION
%
\begin{circus}
\circprocess  Application \circdef \\
\circblockopen
ACSafeletApp\\
\interleave\\
MainMissionSequencerApp\\
\interleave \\
		MainMissionApp\\
		\interleave \\
			ACModeChangerApp ( MainMissionID  ) \\
			\interleave \\
			ControlHandlerApp\\
			\interleave \\
			CommunicationsHandlerApp\\
			\interleave \\
			EnvironmentMonitorApp ( MainMissionID  ) \\
			\interleave \\
			FlightSensorsMonitorApp ( MainMissionID  ) \\
			\interleave \\
			AperiodicSimulatorApp ( controlHandlerID  ) \\
			
		
		\interleave \\
		TakeOffMissionApp\\
		\interleave \\
			LandingGearHandlerTakeOffApp ( TakeOffMissionID  ) \\
			\interleave \\
			TakeOffFailureHandlerApp ( MainMission ,  TakeOffMissionID ,    ) \\
			\interleave \\
			TakeOffMonitorApp ( MainMission ,  TakeOffMissionID ,   ,  landingGearHandlerID  ) \\
			
		\interleave \\
		CruiseMissionApp\\
		\interleave \\
			BeginLandingHandlerApp ( MainMission  ) \\
			\interleave \\
			NavigationMonitorApp ( MainMission  ) \\
			
		\interleave \\
		LandMissionApp\\
		\interleave \\
			LandingGearHandlerLandApp ( LandMissionID  ) \\
			\interleave \\
			SafeLandingHandlerApp ( MainMission ,    ) \\
			\interleave \\
			GroundDistanceMonitorApp ( MainMission  ) \\
			\interleave \\
			InstrumentLandingSystemMonitorApp ( LandMissionID  ) \\
			
		
\circblockclose
\end{circus}

\newpage
%
%%%%%%%%%%%%%%%%%%%%MethodCallBinder
%
\begin{circus}
MethodCallBinder \circdef \\
\t1 \circblockopen
	setCabinPressure\_MethodBinder
	\\ \interleave \\
	setEmergencyOxygen\_MethodBinder
	\\ \interleave \\
	setFuelRemaining\_MethodBinder
	\\ \interleave \\
	setAirSpeed\_MethodBinder
	\\ \interleave \\
	setAltitude\_MethodBinder
	\\ \interleave \\
	setHeading\_MethodBinder
	\\ \interleave \\
	release\_MethodBinder
	\\ \interleave \\
	isLandingGearDeployed\_MethodBinder
	\\ \interleave \\
	stowLandingGear\_MethodBinder
	\\ \interleave \\
	deployLandingGear\_MethodBinder
	\\ \interleave \\
	getAltitude\_MethodBinder
	\\ \interleave \\
	release\_MethodBinder
	\\ \interleave \\
	requestTermination\_MethodBinder
	\\ \interleave \\
	getAirSpeed\_MethodBinder
	\\ \interleave \\
	abort\_MethodBinder
	\\ \interleave \\
	requestTermination\_MethodBinder
	\\ \interleave \\
	requestTermination\_MethodBinder
	\\ \interleave \\
	getHeading\_MethodBinder
	\\ \interleave \\
	getAirSpeed\_MethodBinder
	\\ \interleave \\
	getAltitude\_MethodBinder
	\\ \interleave \\
	getAltitude\_MethodBinder
	\\ \interleave \\
	requestTermination\_MethodBinder
	\\ \interleave \\
	isLandingGearDeployed\_MethodBinder
	\\ \interleave \\
	stowLandingGear\_MethodBinder
	\\ \interleave \\
	deployLandingGear\_MethodBinder
	\\ \interleave \\
	getAltitude\_MethodBinder
	\\ \interleave \\
	test\_MethodBinder
	\\ \interleave \\
	test\_MethodBinder
	
\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_setCabinPressureCall : MissionID \cross SchedulableID \\
\circchannel binder\_setCabinPressureRet : MissionID \cross SchedulableID  \cross     \\ \\

setCabinPressureLocs == \{ controllingMission \}  \\
setCabinPressureCallers == \{ EnvironmentMonitorID \}  \\
\end{circus}
%
\begin{circus}
setCabinPressure\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_setCabinPressureCall~?~loc\prefixcolon(loc \in setCabinPressureLocs)~?~caller\prefixcolon(caller \in setCabinPressureCallers) \then \\
	setCabinPressureCall~.~loc~.~caller \then \\
	setCabinPressureRet~.~loc~.~caller~?~ret \then \\
	binder\_setCabinPressureRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_setEmergencyOxygenCall : MissionID \cross SchedulableID \\
\circchannel binder\_setEmergencyOxygenRet : MissionID \cross SchedulableID  \cross     \\ \\

setEmergencyOxygenLocs == \{ controllingMission \}  \\
setEmergencyOxygenCallers == \{ EnvironmentMonitorID \}  \\
\end{circus}
%
\begin{circus}
setEmergencyOxygen\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_setEmergencyOxygenCall~?~loc\prefixcolon(loc \in setEmergencyOxygenLocs)~?~caller\prefixcolon(caller \in setEmergencyOxygenCallers) \then \\
	setEmergencyOxygenCall~.~loc~.~caller \then \\
	setEmergencyOxygenRet~.~loc~.~caller~?~ret \then \\
	binder\_setEmergencyOxygenRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_setFuelRemainingCall : MissionID \cross SchedulableID \\
\circchannel binder\_setFuelRemainingRet : MissionID \cross SchedulableID  \cross     \\ \\

setFuelRemainingLocs == \{ controllingMission \}  \\
setFuelRemainingCallers == \{ EnvironmentMonitorID \}  \\
\end{circus}
%
\begin{circus}
setFuelRemaining\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_setFuelRemainingCall~?~loc\prefixcolon(loc \in setFuelRemainingLocs)~?~caller\prefixcolon(caller \in setFuelRemainingCallers) \then \\
	setFuelRemainingCall~.~loc~.~caller \then \\
	setFuelRemainingRet~.~loc~.~caller~?~ret \then \\
	binder\_setFuelRemainingRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_setAirSpeedCall : MissionID \cross SchedulableID \\
\circchannel binder\_setAirSpeedRet : MissionID \cross SchedulableID  \cross     \\ \\

setAirSpeedLocs == \{ controllingMission \}  \\
setAirSpeedCallers == \{ FlightSensorsMonitorID \}  \\
\end{circus}
%
\begin{circus}
setAirSpeed\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_setAirSpeedCall~?~loc\prefixcolon(loc \in setAirSpeedLocs)~?~caller\prefixcolon(caller \in setAirSpeedCallers) \then \\
	setAirSpeedCall~.~loc~.~caller \then \\
	setAirSpeedRet~.~loc~.~caller~?~ret \then \\
	binder\_setAirSpeedRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_setAltitudeCall : MissionID \cross SchedulableID \\
\circchannel binder\_setAltitudeRet : MissionID \cross SchedulableID  \cross     \\ \\

setAltitudeLocs == \{ controllingMission \}  \\
setAltitudeCallers == \{ FlightSensorsMonitorID \}  \\
\end{circus}
%
\begin{circus}
setAltitude\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_setAltitudeCall~?~loc\prefixcolon(loc \in setAltitudeLocs)~?~caller\prefixcolon(caller \in setAltitudeCallers) \then \\
	setAltitudeCall~.~loc~.~caller \then \\
	setAltitudeRet~.~loc~.~caller~?~ret \then \\
	binder\_setAltitudeRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_setHeadingCall : MissionID \cross SchedulableID \\
\circchannel binder\_setHeadingRet : MissionID \cross SchedulableID  \cross     \\ \\

setHeadingLocs == \{ controllingMission \}  \\
setHeadingCallers == \{ FlightSensorsMonitorID \}  \\
\end{circus}
%
\begin{circus}
setHeading\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_setHeadingCall~?~loc\prefixcolon(loc \in setHeadingLocs)~?~caller\prefixcolon(caller \in setHeadingCallers) \then \\
	setHeadingCall~.~loc~.~caller \then \\
	setHeadingRet~.~loc~.~caller~?~ret \then \\
	binder\_setHeadingRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_releaseCall : MissionID \cross SchedulableID \\
\circchannel binder\_releaseRet : MissionID \cross SchedulableID  \cross     \\ \\

releaseLocs == \{ event,landingGearHandler \}  \\
releaseCallers == \{ AperiodicSimulatorID,TakeOffMonitorID \}  \\
\end{circus}
%
\begin{circus}
release\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_releaseCall~?~loc\prefixcolon(loc \in releaseLocs)~?~caller\prefixcolon(caller \in releaseCallers) \then \\
	releaseCall~.~loc~.~caller \then \\
	releaseRet~.~loc~.~caller~?~ret \then \\
	binder\_releaseRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_isLandingGearDeployedCall : MissionID \cross SchedulableID \\
\circchannel binder\_isLandingGearDeployedRet : MissionID \cross SchedulableID  \cross     \\ \\

isLandingGearDeployedLocs == \{ mission,mission \}  \\
isLandingGearDeployedCallers == \{ LandingGearHandlerTakeOffID,LandingGearHandlerLandID \}  \\
\end{circus}
%
\begin{circus}
isLandingGearDeployed\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_isLandingGearDeployedCall~?~loc\prefixcolon(loc \in isLandingGearDeployedLocs)~?~caller\prefixcolon(caller \in isLandingGearDeployedCallers) \then \\
	isLandingGearDeployedCall~.~loc~.~caller \then \\
	isLandingGearDeployedRet~.~loc~.~caller~?~ret \then \\
	binder\_isLandingGearDeployedRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_stowLandingGearCall : MissionID \cross SchedulableID \\
\circchannel binder\_stowLandingGearRet : MissionID \cross SchedulableID  \cross     \\ \\

stowLandingGearLocs == \{ mission,mission \}  \\
stowLandingGearCallers == \{ LandingGearHandlerTakeOffID,LandingGearHandlerLandID \}  \\
\end{circus}
%
\begin{circus}
stowLandingGear\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_stowLandingGearCall~?~loc\prefixcolon(loc \in stowLandingGearLocs)~?~caller\prefixcolon(caller \in stowLandingGearCallers) \then \\
	stowLandingGearCall~.~loc~.~caller \then \\
	stowLandingGearRet~.~loc~.~caller~?~ret \then \\
	binder\_stowLandingGearRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_deployLandingGearCall : MissionID \cross SchedulableID \\
\circchannel binder\_deployLandingGearRet : MissionID \cross SchedulableID  \cross     \\ \\

deployLandingGearLocs == \{ mission,mission \}  \\
deployLandingGearCallers == \{ LandingGearHandlerTakeOffID,LandingGearHandlerLandID \}  \\
\end{circus}
%
\begin{circus}
deployLandingGear\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_deployLandingGearCall~?~loc\prefixcolon(loc \in deployLandingGearLocs)~?~caller\prefixcolon(caller \in deployLandingGearCallers) \then \\
	deployLandingGearCall~.~loc~.~caller \then \\
	deployLandingGearRet~.~loc~.~caller~?~ret \then \\
	binder\_deployLandingGearRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_getAltitudeCall : MissionID \cross SchedulableID \\
\circchannel binder\_getAltitudeRet : MissionID \cross SchedulableID  \cross     \\ \\

getAltitudeLocs == \{ mainMission,mainMission,mainMission,mainMission \}  \\
getAltitudeCallers == \{ TakeOffMonitorID,NavigationMonitorID,GroundDistanceMonitorID,SafeLandingHandlerID \}  \\
\end{circus}
%
\begin{circus}
getAltitude\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_getAltitudeCall~?~loc\prefixcolon(loc \in getAltitudeLocs)~?~caller\prefixcolon(caller \in getAltitudeCallers) \then \\
	getAltitudeCall~.~loc~.~caller \then \\
	getAltitudeRet~.~loc~.~caller~?~ret \then \\
	binder\_getAltitudeRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_releaseCall : MissionID \cross SchedulableID \\
\circchannel binder\_releaseRet : MissionID \cross SchedulableID  \cross     \\ \\

releaseLocs == \{ landingGearHandler \}  \\
releaseCallers == \{ TakeOffMonitorID \}  \\
\end{circus}
%
\begin{circus}
release\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_releaseCall~?~loc\prefixcolon(loc \in releaseLocs)~?~caller\prefixcolon(caller \in releaseCallers) \then \\
	releaseCall~.~loc~.~caller \then \\
	releaseRet~.~loc~.~caller~?~ret \then \\
	binder\_releaseRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_requestTerminationCall : MissionID \cross SchedulableID \\
\circchannel binder\_requestTerminationRet : MissionID \cross SchedulableID  \cross     \\ \\

requestTerminationLocs == \{ takeoffMission,takeoffMission,controllingMission,mainMission \}  \\
requestTerminationCallers == \{ TakeOffMonitorID,TakeOffFailureHandlerID,BeginLandingHandlerID,GroundDistanceMonitorID \}  \\
\end{circus}
%
\begin{circus}
requestTermination\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_requestTerminationCall~?~loc\prefixcolon(loc \in requestTerminationLocs)~?~caller\prefixcolon(caller \in requestTerminationCallers) \then \\
	requestTerminationCall~.~loc~.~caller \then \\
	requestTerminationRet~.~loc~.~caller~?~ret \then \\
	binder\_requestTerminationRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_getAirSpeedCall : MissionID \cross SchedulableID \\
\circchannel binder\_getAirSpeedRet : MissionID \cross SchedulableID  \cross     \\ \\

getAirSpeedLocs == \{ mainMission,mainMission \}  \\
getAirSpeedCallers == \{ TakeOffFailureHandlerID,NavigationMonitorID \}  \\
\end{circus}
%
\begin{circus}
getAirSpeed\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_getAirSpeedCall~?~loc\prefixcolon(loc \in getAirSpeedLocs)~?~caller\prefixcolon(caller \in getAirSpeedCallers) \then \\
	getAirSpeedCall~.~loc~.~caller \then \\
	getAirSpeedRet~.~loc~.~caller~?~ret \then \\
	binder\_getAirSpeedRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_abortCall : MissionID \cross SchedulableID \\
\circchannel binder\_abortRet : MissionID \cross SchedulableID  \cross     \\ \\

abortLocs == \{ takeoffMission \}  \\
abortCallers == \{ TakeOffFailureHandlerID \}  \\
\end{circus}
%
\begin{circus}
abort\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_abortCall~?~loc\prefixcolon(loc \in abortLocs)~?~caller\prefixcolon(caller \in abortCallers) \then \\
	abortCall~.~loc~.~caller \then \\
	abortRet~.~loc~.~caller~?~ret \then \\
	binder\_abortRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_requestTerminationCall : MissionID \cross SchedulableID \\
\circchannel binder\_requestTerminationRet : MissionID \cross SchedulableID  \cross     \\ \\

requestTerminationLocs == \{ takeoffMission,controllingMission,mainMission \}  \\
requestTerminationCallers == \{ TakeOffFailureHandlerID,BeginLandingHandlerID,GroundDistanceMonitorID \}  \\
\end{circus}
%
\begin{circus}
requestTermination\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_requestTerminationCall~?~loc\prefixcolon(loc \in requestTerminationLocs)~?~caller\prefixcolon(caller \in requestTerminationCallers) \then \\
	requestTerminationCall~.~loc~.~caller \then \\
	requestTerminationRet~.~loc~.~caller~?~ret \then \\
	binder\_requestTerminationRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_requestTerminationCall : MissionID \cross SchedulableID \\
\circchannel binder\_requestTerminationRet : MissionID \cross SchedulableID  \cross     \\ \\

requestTerminationLocs == \{ controllingMission,mainMission \}  \\
requestTerminationCallers == \{ BeginLandingHandlerID,GroundDistanceMonitorID \}  \\
\end{circus}
%
\begin{circus}
requestTermination\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_requestTerminationCall~?~loc\prefixcolon(loc \in requestTerminationLocs)~?~caller\prefixcolon(caller \in requestTerminationCallers) \then \\
	requestTerminationCall~.~loc~.~caller \then \\
	requestTerminationRet~.~loc~.~caller~?~ret \then \\
	binder\_requestTerminationRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_getHeadingCall : MissionID \cross SchedulableID \\
\circchannel binder\_getHeadingRet : MissionID \cross SchedulableID  \cross     \\ \\

getHeadingLocs == \{ mainMission \}  \\
getHeadingCallers == \{ NavigationMonitorID \}  \\
\end{circus}
%
\begin{circus}
getHeading\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_getHeadingCall~?~loc\prefixcolon(loc \in getHeadingLocs)~?~caller\prefixcolon(caller \in getHeadingCallers) \then \\
	getHeadingCall~.~loc~.~caller \then \\
	getHeadingRet~.~loc~.~caller~?~ret \then \\
	binder\_getHeadingRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_getAirSpeedCall : MissionID \cross SchedulableID \\
\circchannel binder\_getAirSpeedRet : MissionID \cross SchedulableID  \cross     \\ \\

getAirSpeedLocs == \{ mainMission \}  \\
getAirSpeedCallers == \{ NavigationMonitorID \}  \\
\end{circus}
%
\begin{circus}
getAirSpeed\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_getAirSpeedCall~?~loc\prefixcolon(loc \in getAirSpeedLocs)~?~caller\prefixcolon(caller \in getAirSpeedCallers) \then \\
	getAirSpeedCall~.~loc~.~caller \then \\
	getAirSpeedRet~.~loc~.~caller~?~ret \then \\
	binder\_getAirSpeedRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_getAltitudeCall : MissionID \cross SchedulableID \\
\circchannel binder\_getAltitudeRet : MissionID \cross SchedulableID  \cross     \\ \\

getAltitudeLocs == \{ mainMission,mainMission,mainMission \}  \\
getAltitudeCallers == \{ NavigationMonitorID,GroundDistanceMonitorID,SafeLandingHandlerID \}  \\
\end{circus}
%
\begin{circus}
getAltitude\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_getAltitudeCall~?~loc\prefixcolon(loc \in getAltitudeLocs)~?~caller\prefixcolon(caller \in getAltitudeCallers) \then \\
	getAltitudeCall~.~loc~.~caller \then \\
	getAltitudeRet~.~loc~.~caller~?~ret \then \\
	binder\_getAltitudeRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_getAltitudeCall : MissionID \cross SchedulableID \\
\circchannel binder\_getAltitudeRet : MissionID \cross SchedulableID  \cross     \\ \\

getAltitudeLocs == \{ mainMission,mainMission \}  \\
getAltitudeCallers == \{ GroundDistanceMonitorID,SafeLandingHandlerID \}  \\
\end{circus}
%
\begin{circus}
getAltitude\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_getAltitudeCall~?~loc\prefixcolon(loc \in getAltitudeLocs)~?~caller\prefixcolon(caller \in getAltitudeCallers) \then \\
	getAltitudeCall~.~loc~.~caller \then \\
	getAltitudeRet~.~loc~.~caller~?~ret \then \\
	binder\_getAltitudeRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_requestTerminationCall : MissionID \cross SchedulableID \\
\circchannel binder\_requestTerminationRet : MissionID \cross SchedulableID  \cross     \\ \\

requestTerminationLocs == \{ mainMission \}  \\
requestTerminationCallers == \{ GroundDistanceMonitorID \}  \\
\end{circus}
%
\begin{circus}
requestTermination\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_requestTerminationCall~?~loc\prefixcolon(loc \in requestTerminationLocs)~?~caller\prefixcolon(caller \in requestTerminationCallers) \then \\
	requestTerminationCall~.~loc~.~caller \then \\
	requestTerminationRet~.~loc~.~caller~?~ret \then \\
	binder\_requestTerminationRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_isLandingGearDeployedCall : MissionID \cross SchedulableID \\
\circchannel binder\_isLandingGearDeployedRet : MissionID \cross SchedulableID  \cross     \\ \\

isLandingGearDeployedLocs == \{ mission \}  \\
isLandingGearDeployedCallers == \{ LandingGearHandlerLandID \}  \\
\end{circus}
%
\begin{circus}
isLandingGearDeployed\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_isLandingGearDeployedCall~?~loc\prefixcolon(loc \in isLandingGearDeployedLocs)~?~caller\prefixcolon(caller \in isLandingGearDeployedCallers) \then \\
	isLandingGearDeployedCall~.~loc~.~caller \then \\
	isLandingGearDeployedRet~.~loc~.~caller~?~ret \then \\
	binder\_isLandingGearDeployedRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_stowLandingGearCall : MissionID \cross SchedulableID \\
\circchannel binder\_stowLandingGearRet : MissionID \cross SchedulableID  \cross     \\ \\

stowLandingGearLocs == \{ mission \}  \\
stowLandingGearCallers == \{ LandingGearHandlerLandID \}  \\
\end{circus}
%
\begin{circus}
stowLandingGear\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_stowLandingGearCall~?~loc\prefixcolon(loc \in stowLandingGearLocs)~?~caller\prefixcolon(caller \in stowLandingGearCallers) \then \\
	stowLandingGearCall~.~loc~.~caller \then \\
	stowLandingGearRet~.~loc~.~caller~?~ret \then \\
	binder\_stowLandingGearRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_deployLandingGearCall : MissionID \cross SchedulableID \\
\circchannel binder\_deployLandingGearRet : MissionID \cross SchedulableID  \cross     \\ \\

deployLandingGearLocs == \{ mission \}  \\
deployLandingGearCallers == \{ LandingGearHandlerLandID \}  \\
\end{circus}
%
\begin{circus}
deployLandingGear\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_deployLandingGearCall~?~loc\prefixcolon(loc \in deployLandingGearLocs)~?~caller\prefixcolon(caller \in deployLandingGearCallers) \then \\
	deployLandingGearCall~.~loc~.~caller \then \\
	deployLandingGearRet~.~loc~.~caller~?~ret \then \\
	binder\_deployLandingGearRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_getAltitudeCall : MissionID \cross SchedulableID \\
\circchannel binder\_getAltitudeRet : MissionID \cross SchedulableID  \cross     \\ \\

getAltitudeLocs == \{ mainMission \}  \\
getAltitudeCallers == \{ SafeLandingHandlerID \}  \\
\end{circus}
%
\begin{circus}
getAltitude\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_getAltitudeCall~?~loc\prefixcolon(loc \in getAltitudeLocs)~?~caller\prefixcolon(caller \in getAltitudeCallers) \then \\
	getAltitudeCall~.~loc~.~caller \then \\
	getAltitudeRet~.~loc~.~caller~?~ret \then \\
	binder\_getAltitudeRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_testCall : MissionID \cross SchedulableID \\
\circchannel binder\_testRet : MissionID \cross SchedulableID  \cross     \\ \\

testLocs == \{ testLoc \}  \\
testCallers == \{ testCaller \}  \\
\end{circus}
%
\begin{circus}
test\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_testCall~?~loc\prefixcolon(loc \in testLocs)~?~caller\prefixcolon(caller \in testCallers) \then \\
	testCall~.~loc~.~caller \then \\
	testRet~.~loc~.~caller~?~ret \then \\
	binder\_testRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_testCall : MissionID \cross SchedulableID \\
\circchannel binder\_testRet : MissionID \cross SchedulableID  \cross     \\ \\

testLocs == \{ testLoc \}  \\
testCallers == \{ testCaller \}  \\
\end{circus}
%
\begin{circus}
test\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_testCall~?~loc\prefixcolon(loc \in testLocs)~?~caller\prefixcolon(caller \in testCallers) \then \\
	testCall~.~loc~.~caller \then \\
	testRet~.~loc~.~caller~?~ret \then \\
	binder\_testRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circus}
%

\begin{circus}
	ApplicationB \circdef Application \lpar MethodCallBinderSync \rpar MethodCallBinder
\end{circus}

\newpage
%
%%%%%%%%%%%%%%%%%%THREADS
%
\begin{circus}
Threads \circdef  \\
\circblockopen
ThreadFW(SafeLandingHandlerThreadID, 5) \\
\interleave \\
ThreadFW(ACModeChangerThreadID, 5) \\
\interleave \\
ThreadFW(TakeOffFailureHandlerThreadID, 5) \\
\interleave \\
ThreadFW(InstrumentLandingSystemMonitorThreadID, 5) \\
\interleave \\
ThreadFW(FlightSensorsMonitorThreadID, 5) \\
\interleave \\
ThreadFW(TakeOffMonitorThreadID, 5) \\
\interleave \\
ThreadFW(AperiodicSimulatorThreadID, 5) \\
\interleave \\
ThreadFW(LandingGearHandlerLandThreadID, 5) \\
\interleave \\
ThreadFW(LandingGearHandlerTakeOffThreadID, 5) \\
\interleave \\
ThreadFW(GroundDistanceMonitorThreadID, 5) \\
\interleave \\
ThreadFW(ControlHandlerThreadID, 5) \\
\interleave \\
ThreadFW(CommunicationsHandlerThreadID, 5) \\
\interleave \\
ThreadFW(BeginLandingHandlerThreadID, 5) \\
\interleave \\
ThreadFW(NavigationMonitorThreadID, 5) \\
\interleave \\
ThreadFW(EnvironmentMonitorThreadID, 5) \\

\circblockclose
\end{circus}
%
%%%%%%%%%%%%%%OBJECTS
%
\begin{circus}
Objects \circdef \\
\circblockopen
ObjectFW(ACSafeletObjectID) \\
\interleave \\
ObjectFW(MainMissionObjectID) \\
\interleave \\
ObjectFW(ACModeChangerObjectID) \\
\interleave \\
ObjectFW(EnvironmentMonitorObjectID) \\
\interleave \\
ObjectFW(ControlHandlerObjectID) \\
\interleave \\
ObjectFW(FlightSensorsMonitorObjectID) \\
\interleave \\
ObjectFW(CommunicationsHandlerObjectID) \\
\interleave \\
ObjectFW(AperiodicSimulatorObjectID) \\
\interleave \\
ObjectFW(TakeOffMissionObjectID) \\
\interleave \\
ObjectFW(LandingGearHandlerTakeOffObjectID) \\
\interleave \\
ObjectFW(TakeOffMonitorObjectID) \\
\interleave \\
ObjectFW(TakeOffFailureHandlerObjectID) \\
\interleave \\
ObjectFW(CruiseMissionObjectID) \\
\interleave \\
ObjectFW(BeginLandingHandlerObjectID) \\
\interleave \\
ObjectFW(NavigationMonitorObjectID) \\
\interleave \\
ObjectFW(LandMissionObjectID) \\
\interleave \\
ObjectFW(GroundDistanceMonitorObjectID) \\
\interleave \\
ObjectFW(LandingGearHandlerLandObjectID) \\
\interleave \\
ObjectFW(InstrumentLandingSystemMonitorObjectID) \\
\interleave \\
ObjectFW(SafeLandingHandlerObjectID) \\

\circblockclose
\end{circus}
%
%%%%%%%%%%%%%LOCKING
%
\begin{circus}
Locking \circdef Threads \lpar ThreadSync \rpar Objects
\end{circus}
%
\begin{circus}
\circprocess Program \circdef \circblockopen Framework \lpar AppSync \rpar ApplicationB \circblockclose \lpar LockingSync \rpar Locking
\end{circus}
