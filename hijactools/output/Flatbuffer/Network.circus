%+++ Channel Sets +++

% MAKE THIS PARSE

\begin{zsection}
	\SECTION ~ NetworkChannels ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
		\t1 SchedulableId, SchedulableIds, MissionChan, SchedulableChan, TopLevelMissionSequencerFWChan,\\
		\t1 FrameworkChan, SafeletChan
\end{zsection}
%
\begin{circus}
\circchannelset ~ TerminateSync == \\ \t1 \lchanset schedulables\_terminated, schedulables\_stopped, get\_activeSchedulables \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ ControlTierSync ==\\ \t1 \lchanset start\_toplevel\_sequencer, done\_toplevel\_sequencer, done\_safeletFW \rchanset
\end{circus}
% IDs wont type check again   Start Mission and Done Mission wont parse?
\begin{circus}
\circchannelset ~ TierSync == \\ \t1 \lchanset start\_mission~.~FlatBufferMission, done\_mission~.~FlatBufferMission,\\
	\t1 done\_safeletFW, done\_toplevel\_sequencer \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ MissionSync == \\ \t1 \lchanset done\_safeletFW, done\_toplevel\_sequencer, register, \\
                 signalTerminationCall, signalTerminationRet, activate\_schedulables, done\_schedulable, \\
                 cleanupSchedulableCall, cleanupSchedulableRet  \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ SchedulablesSync == \\ \t1 \lchanset activate\_schedulables, done\_safeletFW, done\_toplevel\_sequencer \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ ClusterSync == \\ \t1 \lchanset done\_toplevel\_sequencer, done\_safeletFW \rchanset
\end{circus}
%
\begin{circus}
\circchannelset ~ AppSync == \\ \t1  \bigcup \{SafeltAppSync, MissionSequencerAppSync, MissionAppSync, \\ \t1 MTAppSync, OSEHSync , APEHSync,  \\ \t1
	\lchanset getSequencer, end\_mission\_app, end\_managedThread\_app, \\ \t1 setCeilingPriority, requestTerminationCall,requestTerminationRet, terminationPendingCall, \\ \t1 terminationPendingRet, handleAsyncEventCall, handleAsyncEventRet \rchanset  \}
\end{circus}
%
%\begin{circus}
%\circchannelset ~ ObjectSync   == \\ \t1    \lchanset	 \rchanset
%\end{circus}

\begin{circus}
\circchannelset ~ ThreadSync == \\ \t1  \lchanset raise\_thread\_priority, lower\_thread\_priority, isInterruptedCall, isInterruptedRet, get\_priorityLevel \rchanset
\end{circus}

\begin{circus}
\circchannelset ~ LockingSync == \\ \t1  \lchanset lockAcquired, startSyncMeth, endSyncMeth, waitCall, waitRet, notify, isInterruptedCall, isInterruptedRet, \\
\t1 interruptedCall, interruptedRet, done\_toplevel\_sequencer, get\_priorityLevel  \rchanset
\end{circus}

%IDs wont type check
%
%
%
\newpage

%
%+++ Program +++
%
\begin{zsection}
  \SECTION ~ Program ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan, MissionFW,\\
  \t1 SafeletFW, TopLevelMissionSequencerFW, NetworkChannels, ManagedThreadFW, \\
  \t1 SchedulableMissionSequencerFW, PeriodicEventHandlerFW, OneShotEventHandlerFW,\\
  \t1 AperiodicEventHandlerFW, ObjectFW, ThreadFW, \\
  \t1 FlatBufferApp, FlatBufferMissionSequencerApp,

FlatBufferMissionApp,

ReaderApp
	,
WriterApp
	
\\ \t1
	
	
\end{zsection}
%
\begin{circus}
\circprocess ControlTier \circdef \\
\circblockopen
SafeletFW \\
\t1 \lpar ControlTierSync \rpar \\
TopLevelMissionSequencerFW(FlatBufferMissionSequencer)
\circblockclose
\end{circus}
%


\begin{circus}
\circprocess Tier0 \circdef \\

\circblockopen
	MissionFW(FlatBufferMissionID)\\
		\t1 	\lpar MissionSync \rpar \\
		\circblockopen



			ManagedThreadFW(ReaderID)\\
			\t1 \lpar SchedulablesSync \rpar\\
			ManagedThreadFW(WriterID)\\








		\circblockclose
\circblockclose
\end{circus}
%
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Framework +++
%
\begin{circus}
\circprocess Framework \circdef \\
\circblockopen
ControlTier \\
\t1 \lpar TierSync \rpar \\
 \circblockopen
Tier0
\circblockclose
\circblockclose
\end{circus}
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% APPLICATION
%
\begin{circus}
\circprocess  Application \circdef \\
\circblockopen
FlatBufferApp\\
\interleave\\
FlatBufferMissionSequencerApp\\
\interleave \\
		FlatBufferMissionApp\\
		\interleave \\
			ReaderApp\\
			\interleave \\
			WriterApp\\
			
		
\circblockclose
\end{circus}

\newpage
%
%%%%%%%%%%%%%%%%%%%%MethodCallBinder
%
\begin{circus}
\circprocess  MethodCallBinder \circdef \\
\t1 \circblockopen
	terminationPending\_MethodBinder
	\\ \interleave \\
	read\_MethodBinder
	\\ \interleave \\
	terminationPending\_MethodBinder
	\\ \interleave \\
	write\_MethodBinder
	
\circblockclose
\end{circus}
%
\begin{circus}
\circchannel binder\_terminationPendingCall : MissionID \cross SchedulableID \\
\circchannel binder\_terminationPendingRet : MissionID \cross SchedulableID \cross boolean   \\ \\
\end{circus}
%
\begin{zed}
terminationPendingLocs == \{ FlatBufferMissionID \}  \\
terminationPendingCallers == \{ ReaderID,WriterID \}  \\
\end{zed}
%
\begin{circusaction}
terminationPending\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_terminationPendingCall\\ \t1 ~?~loc\prefixcolon(loc \in terminationPendingLocs)\\ \t1 ~?~caller\prefixcolon(caller \in terminationPendingCallers) \then \\
	terminationPendingCall~.~loc~.~caller \then \\
	terminationPendingRet~.~loc~.~caller~?~ret \then \\
	binder\_terminationPendingRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circusaction}
%
\begin{circus}
\circchannel binder\_readCall : MissionID \cross SchedulableID \\
\circchannel binder\_readRet : MissionID \cross SchedulableID \cross \num   \\ \\
\end{circus}
%
\begin{zed}
readLocs == \{ FlatBufferMissionID \}  \\
readCallers == \{ ReaderID \}  \\
\end{zed}
%
\begin{circusaction}
read\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_readCall\\ \t1 ~?~loc\prefixcolon(loc \in readLocs)\\ \t1 ~?~caller\prefixcolon(caller \in readCallers) \then \\
	readCall~.~loc~.~caller \then \\
	readRet~.~loc~.~caller~?~ret \then \\
	binder\_readRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circusaction}
%
\begin{circus}
\circchannel binder\_terminationPendingCall : MissionID \cross SchedulableID \\
\circchannel binder\_terminationPendingRet : MissionID \cross SchedulableID \cross boolean   \\ \\
\end{circus}
%
\begin{zed}
terminationPendingLocs == \{ FlatBufferMissionID \}  \\
terminationPendingCallers == \{ WriterID \}  \\
\end{zed}
%
\begin{circusaction}
terminationPending\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_terminationPendingCall\\ \t1 ~?~loc\prefixcolon(loc \in terminationPendingLocs)\\ \t1 ~?~caller\prefixcolon(caller \in terminationPendingCallers) \then \\
	terminationPendingCall~.~loc~.~caller \then \\
	terminationPendingRet~.~loc~.~caller~?~ret \then \\
	binder\_terminationPendingRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circusaction}
%
\begin{circus}
\circchannel binder\_writeCall : MissionID \cross SchedulableID \\
\circchannel binder\_writeRet : MissionID \cross SchedulableID    \\ \\
\end{circus}
%
\begin{zed}
writeLocs == \{ FlatBufferMissionID \}  \\
writeCallers == \{ WriterID \}  \\
\end{zed}
%
\begin{circusaction}
write\_MethodBinder \circdef \\
	\t1 \circblockopen
	binder\_writeCall\\ \t1 ~?~loc\prefixcolon(loc \in writeLocs)\\ \t1 ~?~caller\prefixcolon(caller \in writeCallers) \then \\
	writeCall~.~loc~.~caller \then \\
	writeRet~.~loc~.~caller~?~ret \then \\
	binder\_writeRet~.~loc~.~caller~!~ret  \then \\
	\Skip
	\circblockclose
\end{circusaction}
%

\begin{circus}
\circprocess ApplicationB \circdef Application \lpar MethodCallBinderSync \rpar MethodCallBinder
\end{circus}

\newpage
%
%%%%%%%%%%%%%%%%%%THREADS
%
\begin{circus}
\circprocess Threads \circdef  \\
\circblockopen
ThreadFW(ReaderThreadID, ) \\
\interleave \\
ThreadFW(WriterThreadID, ) \\

\circblockclose
\end{circus}
%
%%%%%%%%%%%%%%OBJECTS
%
\begin{circus}
\circprocess Objects \circdef \\
\circblockopen
ObjectFW(FlatBufferObjectID) \\
\interleave \\
ObjectFW(FlatBufferMissionObjectID) \\
\interleave \\
ObjectFW(ReaderObjectID) \\
\interleave \\
ObjectFW(WriterObjectID) \\

\circblockclose
\end{circus}
%
%%%%%%%%%%%%%LOCKING
%
\begin{circus}
\circprocess Locking \circdef Threads \lpar ThreadSync \rpar Objects
\end{circus}
%
\begin{circus}
\circprocess Program \circdef \circblockopen Framework \lpar AppSync \rpar ApplicationB \circblockclose \lpar LockingSync \rpar Locking
\end{circus}
