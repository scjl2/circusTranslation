\begin{zsection}
  \SECTION ~ FlatBufferMissionApp ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan, FlatBufferMissionMethChan \\
 , FlatBufferMissionClass, MethodCallBindingChannels 
 , ObjectFWChan, ObjectIds

\end{zsection}


%\begin{circus}
%\circchannelset FlatBufferMissionAppChanSet == \\
% \lchanset initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,

%    register~.~ReaderSID~.~FlatBufferMissionMID
%    register~.~WriterSID~.~FlatBufferMissionMID
%\rchanset
%\end{circus}

\begin{circus}
\circprocess FlatBufferMissionApp \circdef  \circbegin
\end{circus}

\begin{schema}{State}
  this : \circreftype FlatBufferMissionClass\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
\where
  this' = \circnew FlatBufferMissionClass()\\ 
\end{schema}

\begin{circusaction}
InitializePhase \circdef \\
\circblockopen
  initializeCall~.~FlatBufferMissionMID \then \\

	register~!~ReaderSID~!~FlatBufferMissionMID \then   \\
	register~!~WriterSID~!~FlatBufferMissionMID \then   \\


  initializeRet~.~FlatBufferMissionMID \then \\
  \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
CleanupPhase \circdef  \\
\circblockopen
 cleanupMissionCall~.~FlatBufferMissionMID \then \\

 cleanupMissionRet~.~FlatBufferMissionMID~!~\true \then \\
 \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
bufferEmptyMeth \circdef
\circvar ret : \boolean \circspot
\\
\circblockopen
bufferEmptyCall~.~FlatBufferMissionMID
\then \\
ret := this~.~bufferEmpty()  \circseq  \\

bufferEmptyRet~.~FlatBufferMissionMID~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}
\begin{circusaction}
cleanUpMeth \circdef
\circvar ret : \boolean \circspot
\\
\circblockopen
cleanUpCall~.~FlatBufferMissionMID
\then \\
ret := this~.~cleanUp()  \circseq  \\

cleanUpRet~.~FlatBufferMissionMID~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}
%
\begin{circusaction}
writeSyncMeth \circdef
\\
\circblockopen
writeCall~.~FlatBufferMissionMID~?~caller~?~thread
~?~update
 \then \\
\circblockopen
startSyncMeth~.~FlatBufferMissionOID~.~thread \then \\
lockAcquired~.~FlatBufferMissionOID~.~thread \then \\

      \circblockopen
            \circmu X \circspot \\ \circblockopen \circvar loopVar : \boolean \circspot loopVar :=~(\lnot bufferEmpty() )\circseq \\ \circif ~ (loopVar = \true) ~ \circthen \\ \t1 \Skip \circseq X \\ \circelse ~ (loopVar = \false) \circthen \Skip \\ \circfi \circblockclose \\
            




        \circblockclose

 \circseq  \\
endSyncMeth~.~FlatBufferMissionOID~.~thread \then  \\

writeRet~.~FlatBufferMissionMID~.~caller~.~thread \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}
\begin{circusaction}
readSyncMeth \circdef
\circvar ret : \num \circspot
\\
\circblockopen
readCall~.~FlatBufferMissionMID~?~caller~?~thread
 \then \\
\circblockopen
startSyncMeth~.~FlatBufferMissionOID~.~thread \then \\
lockAcquired~.~FlatBufferMissionOID~.~thread \then \\

      \circblockopen
            \circmu X \circspot \\ \circblockopen \circvar loopVar : \boolean \circspot loopVar :=~bufferEmpty()\circseq \\ \circif ~ (loopVar = \true) ~ \circthen \\ \t1 \Skip \circseq X \\ \circelse ~ (loopVar = \false) \circthen \Skip \\ \circfi \circblockclose \\
             \circseq \\ 



            \circvar out : \num \circspot out := this~.~buffer
             \circseq \\ 



              ret := out

            




        \circblockclose

 \circseq  \\
endSyncMeth~.~FlatBufferMissionOID~.~thread \then  \\

readRet~.~FlatBufferMissionMID~.~caller~.~thread~!~ret \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}
%

\begin{circusaction}
Methods \circdef
\circblockopen
	InitializePhase \\
	\extchoice \\
	CleanupPhase \\
%
\extchoice \\
	bufferEmptyMeth \\ 
\extchoice \\
	cleanUpMeth \\ 
%
	\extchoice \\
	writeSyncMeth \\	
	\extchoice \\
	readSyncMeth \\	
%
\circblockclose
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
 \circinterrupt (end\_mission\_app~.~FlatBufferMissionMID \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
