\begin{zsection}
  \SECTION ~ FlatBufferMissionApp ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan , test-FlatBufferMissionMIDTESTClass \\

  \t1 , \\
ObjectChan
, 

ObjectIds
, 

ThreadIds


, test-FlatBufferMissionMIDTESTMethChan
\end{zsection}
%\begin{circus}
%\circchannelset FlatBufferMissionAppSync == \\
%	\lchanset initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet  \rchanset
%\end{circus}

%\begin{circus}
%\circchannelset FlatBufferMissionAppChanSet == \\
% \lchanset initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,

%    register~.~Reader~.~test-FlatBufferMissionMIDTEST
%    register~.~Writer~.~test-FlatBufferMissionMIDTEST
%\rchanset
%\end{circus}

\begin{circus}
\circprocess FlatBufferMissionApp \circdef  \circbegin
\end{circus}

\begin{schema}{State}
  this : \circreftype FlatBufferMissionClass\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
\where
  this' = \circnew FlatBufferMissionClass()\\ 
\end{schema}

\begin{circusaction}
InitializePhase \circdef \\
\circblockopen
  initializeCall~.~test-FlatBufferMissionMIDTEST \then \\

	register~!~Reader~!~test-FlatBufferMissionMIDTEST \then   \\
	register~!~Writer~!~test-FlatBufferMissionMIDTEST \then   \\


  initializeRet~.~test-FlatBufferMissionMIDTEST \then \\
  \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
CleanupPhase \circdef  \\
\circblockopen
 cleanupMissionCall~.~test-FlatBufferMissionMIDTEST \then \\

 cleanupMissionRet~.~test-FlatBufferMissionMIDTEST~!~\true \then \\
 \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
bufferEmptyMeth \circdef
\circvar ret : \boolean \circspot
\\
\circblockopen
bufferEmptyCall~.~test-FlatBufferMissionMIDTEST
\then \\
ret := this~.~bufferEmpty()  \circseq  \\

bufferEmptyRet~.~test-FlatBufferMissionMIDTEST~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}
\begin{circusaction}
cleanUpMeth \circdef
\circvar ret : \boolean \circspot
\\
\circblockopen
cleanUpCall~.~test-FlatBufferMissionMIDTEST
\then \\
ret := this~.~cleanUp()  \circseq  \\

cleanUpRet~.~test-FlatBufferMissionMIDTEST~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}
%
\begin{circusaction}
writeSyncMeth \circdef
\\
\circblockopen
writeCall~.~test-FlatBufferMissionMIDTEST~?~thread
~?~update
 \then \\
\circblockopen
startSyncMeth~.~test-FlatBufferMissionMIDTESTObject~.~thread \then \\
lockAcquired~.~test-FlatBufferMissionMIDTESTObject~.~thread \then \\

      \circblockopen

\circblockopen \circmu X \circspot \\ \circblockopen \circvar loopVar : \boolean \circspot loopVar :=~(\lnot bufferEmpty() )\circseq \\ \circif ~ (loopVar = \true) ~ \circthen ~ \\ \t1 \circblockopen waitCall~.~FlatBufferMissionObjectID~!~thread \then \\ waitRet~.~FlatBufferMissionObjectID~!~thread \then \\ \Skip \circblockclose \circseq X \\ \circelse ~ (loopVar = \false) \circthen \Skip \\ \circfi \circblockclose \circblockclose \\

               \circseq \\




this~.~buffer :=update


               \circseq \\

notify~.~FlatBufferMissionObjectID~!~thread \then  \\ \Skip


        \circblockclose

 \circseq  \\
endSyncMeth~.~test-FlatBufferMissionMIDTESTObject~.~thread \then  \\

writeRet~.~test-FlatBufferMissionMIDTEST~.~thread \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}
\begin{circusaction}
readSyncMeth \circdef
\circvar ret : \num \circspot
\\
\circblockopen
readCall~.~test-FlatBufferMissionMIDTEST~?~thread
 \then \\
\circblockopen
startSyncMeth~.~test-FlatBufferMissionMIDTESTObject~.~thread \then \\
lockAcquired~.~test-FlatBufferMissionMIDTESTObject~.~thread \then \\

      \circblockopen

\circblockopen \circmu X \circspot \\ \circblockopen \circvar loopVar : \boolean \circspot loopVar :=~bufferEmpty()\circseq \\ \circif ~ (loopVar = \true) ~ \circthen ~ \\ \t1 \circblockopen waitCall~.~FlatBufferMissionObjectID~!~thread \then \\ waitRet~.~FlatBufferMissionObjectID~!~thread \then \\ \Skip \circblockclose \circseq X \\ \circelse ~ (loopVar = \false) \circthen \Skip \\ \circfi \circblockclose \circblockclose \\

               \circseq \\

  \circvar out : \num \circspot out := buffer ~


               \circseq \\




this~.~buffer :=0


               \circseq \\

notify~.~FlatBufferMissionObjectID~!~thread \then  \\ \Skip


               \circseq \\

  ret := out


        \circblockclose

 \circseq  \\
endSyncMeth~.~test-FlatBufferMissionMIDTESTObject~.~thread \then  \\

readRet~.~test-FlatBufferMissionMIDTEST~!~thread~!~ret \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}
%

\begin{circusaction}
Methods \circdef
\circblockopen
	InitializePhase \\
	\extchoice \\
	CleanupPhase \\
%
\extchoice \\
	bufferEmptyMeth \\ 
\extchoice \\
	cleanUpMeth \\ 
%
	\extchoice \\
	writeSyncMeth \\	
	\extchoice \\
	readSyncMeth \\	
%
\circblockclose
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
 \circinterrupt (end\_mission\_app~.~test-FlatBufferMissionMIDTEST \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
