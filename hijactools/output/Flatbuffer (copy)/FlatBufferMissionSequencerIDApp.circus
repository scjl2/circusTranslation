\begin{zsection}
  \SECTION ~ FlatBufferMissionSequencerIDApp ~ \parents ~ TopLevelMissionSequencerChan,\\
  \t1 MissionId, MissionIds, SchedulableId  , FlatBufferMissionSequencerIDClass \\

  \t1 
\end{zsection}
%\begin{circus}
%\circchannelset FlatBufferMissionSequencerIDAppSync == \\ \lchanset getNextMissionCall, getNextMissionRet,end\_sequencer\_app \rchanset
%\end{circus}

%\begin{circus}
%\circchannelset FlatBufferMissionSequencerIDAppChanSet == FlatBufferMissionSequencerIDAppSync
%\end{circus}

\begin{circus}
\circprocess FlatBufferMissionSequencerIDApp \circdef  \circbegin\\ 
\end{circus}
   
\begin{schema}{State}
  this : \circreftype FlatBufferMissionSequencerClass\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
\where
  this' = \circnew FlatBufferMissionSequencerClass()\\ 
\end{schema}

\begin{circusaction}
GetNextMission \circdef \circvar ret : MissionID \circspot \\
\circblockopen
    getNextMissionCall~.~FlatBufferMissionSequencerID \then \\
	ret := this~.~getNextMission() \circseq \\
    getNextMissionRet~.~FlatBufferMissionSequencerID~!~ret  \then \\
\Skip
\circblockclose	
\end{circusaction}

%
%

\begin{circusaction}
Methods \circdef  \\
\circblockopen
	GetNextMission \\
%
%
%
\circblockclose 
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
  %\circhide MissionSequencerAppStateSync
\circinterrupt (end\_sequencer\_app~.~FlatBufferMissionSequencerID \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
