include "Framework.csp"


channel nested_start_mission : MissionID.SchedulableID
channel nested_done_mission : MissionID.Bool



TopLevelMissionSequencers(toplevelSequencerIDs) =
([|{| done_safeletFW, done_toplevel_sequencer |}|] ms : toplevelSequencerIDs @ TopLevelMissionSequencerFW(ms)) 

 

Missions(missions) = ([|{| done_safeletFW, done_toplevel_sequencer |}|] m : missions @ MissionFW(m))

CatchBroadcasts =
  (done_safeletFW -> SKIP)
  []
  (done_toplevel_sequencer->SKIP)
  []
  (activate_schedulables?m -> CatchBroadcasts)

SchedulableSequencerFWs(schedulableSequencers) =
if schedulableSequencers != {} then
(
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] sms : schedulableSequencers @ SchedulableMissionSequencerFW(sms) 
)
else
(
  CatchBroadcasts
)

AperiodicEventHandlerFWs(aperiodicEventHanders) =
if aperiodicEventHanders != {} then
(
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] (apeh, type, start, missHandler) : aperiodicEventHanders @ AperiodicEventHandlerFW(apeh, type, start, missHandler) 
)
else
(
  CatchBroadcasts
)

OneShotEventHandlerFWs(oneShotEventHandlers)=
if oneShotEventHandlers != {} then
  (
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] (oseh, start, deadline, missHandler) : oneShotEventHandlers @ OneShotEventHandlerFW(oseh, start, deadline, missHandler ) 
)
else
(
  CatchBroadcasts
)

PeriodicEventHandlerFWs(periodicEventHandlers) =
if periodicEventHandlers != {} then
  (
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] (peh, period, start, deadline, missHandler) : periodicEventHandlers @ PeriodicEventHandlerFW(peh, period, start, deadline, missHandler) 
)
else
(
  CatchBroadcasts
)

ManagedThreadFWs(managedThreads) =
if managedThreads != {} then
  (
   [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|] mt : managedThreads @ ManagedThreadFW(mt) 
)
else
(
  CatchBroadcasts 
)

Schedulables(schedulableSequencers, aperiodicEventHanders, oneShotEventHandlers,periodicEventHandlers,managedThreads)=
(
  (
    ( 
      (
        (
          SchedulableSequencerFWs(schedulableSequencers)
              [|{| activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|]
          AperiodicEventHandlerFWs(aperiodicEventHanders)
        )
            [|{|  activate_schedulables, done_safeletFW, done_toplevel_sequencer |}|]
        OneShotEventHandlerFWs(oneShotEventHandlers)
      )
          [|{| activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
      PeriodicEventHandlerFWs(periodicEventHandlers)
      )
          [|{| activate_schedulables,done_safeletFW, done_toplevel_sequencer |}|]
      ManagedThreadFWs(managedThreads)
    )
)



nametype SafeltSync = {| done_safeletFW, start_toplevel_sequencer, done_toplevel_sequencer, register, deregister, checkSchedulable|}

nametype TopLevelMissionSequencerSync = {|done_safeletFW, start_mission, done_mission, done_toplevel_sequencer|}

nametype MissionSync = {| done_safeletFW, done_toplevel_sequencer,  
                   signalTerminationCall, signalTerminationRet, activate_schedulables, done_schedulable, 
                   cleanupSchedulableCall, cleanupSchedulableRet, register |} 



--assert sbisim(diamond(SimpleFramework)) ; Loop :[ deadlock free [FD] ]
--assert sbisim(diamond(SimpleFramework)) :[ divergence free ]
--assert sbisim(diamond(SimpleFramework)) :[ deterministic  [FD] ]




nametype SafeletTierSync = {|start_toplevel_sequencer, done_toplevel_sequencer, done_safeletFW |}
nametype SafeletTierChan = union(SafeletFWChanSet, TopLevelMissionSequencerFWChanSet)


SafeletTier(topLevelMissionSequencerIDs) =
(
  SafeletFW
  [|SafeletTierSync|]
  TopLevelMissionSequencers(topLevelMissionSequencerIDs)
)  



Cluster(missionID, (schedulableSequencers, aperiodicEventHanders, oneShotEventHandlers,periodicEventHandlers,managedThreads) ) =
   MissionFW(missionID)
     [|MissionSync|]
    Schedulables(schedulableSequencers, aperiodicEventHanders, oneShotEventHandlers,periodicEventHandlers,managedThreads)


nametype TierChanSet = diff(Union({ MissionFWCHanSet, SchedulableMissionSequencerFWChanSet, MTFWChanSet, APEHFWChanSet, PEHFWChanSet, OSEHFWChanSet, {|register|} }), {|end_mission_app|})

Tier( Clusters ) =
 (
    [|{|done_toplevel_sequencer, done_safeletFW|}|] (missionID, schedulableIDSet  ) : Clusters @
          Cluster(missionID, schedulableIDSet)
 )
-- ({FirstMissionSequencerID},{(schedulableA, aperiodic, 2, nullSchedulableId)}, {},  {}, {schedulableB})
Tier0( Clusters )=
(
    Tier( Clusters )
    --[| RouterSync |]  
--Router(missionIDs)
)
--(apeh, type, start, missHandler) : aperiodicEventHanders



nametype TierCommonChan = {|done_toplevel_sequencer, done_safeletFW|}
nametype TierSpecificChan = {|start_mission, done_mission, initializeRet, requestTermination |}

--datatype TierInterface = TierSpecificChan.MissionID

nametype MissionAndSchedulableChans = Union({MissionFWCHanSet, SchedulableMissionSequencerFWChanSet, MTFWChanSet, APEHFWChanSet, PEHFWChanSet, OSEHFWChanSet})

nametype SchedulableEndApps =  {| end_managedThread_app, end_sequencer_app, end_periodicEventHandler_app, end_aperiodicEventHandler_app, 
                                  end_oneshotEventHandler_app  |} 
missionsInCluster(cluster) = {m | m <- MissionID,   member( m, set(head(seq(cluster))))  } 


--mInC = missionsInCluster( ( MissionAId,({}, {}, {},  {}, {ManagedThreadId}) )  )



--msSet <- ({SchedulableID}, {(SchedulableID, AperiodicType, num, SchedulableID)}, {(SchedulableID, num, num, SchedulableID)}, {(SchedulableID, num, num, num, SchedulableID)}, {SchedulableID}),



missionsInTier(tier) = {m | m<- MissionID,  cluster <- tier, member(m, missionsInCluster(cluster) ), member(cluster, tier) }




NestedTiers(nestedTierIDs) =
(
  || tier : nestedTierIDs @ 
      [ Union({ SchedulableEndApps,
        diff(MissionAndSchedulableChans, {|start_mission, done_mission, initializeRet, requestTermination|} ) --,
       -- {| setCeilingPriority.x, start_mission.x, done_mission.x, initializeCall.x, initializeRet.x, requestTermination.x, register.s.x | s <-SchedulableID, x <- MissionID , member(x, missionsInTier(tier)) 
       -- {|setCeilingPriority.x, start_mission.x, done_mission.x, initializeCall.x, initializeRet.x, requestTermination.x, register.s.x | s <-SchedulableID, x <- MissionID , member(x, missionsInTier(tier) ) |} 

        }) 
      ] 
      Tier(tier)
)


nametype TierSync = {|start_mission.Tier0MissionId, done_mission.Tier0MissionId, register, deregister, checkSchedulable, done_safeletFW, done_toplevel_sequencer|}

nametype NestedTeirSync = {|start_mission, done_mission, initializeRet, nested_start_mission, nested_done_mission |}



--nametype Tier0Chan = union(diff(TierChanSet, {|start_mission, done_mission|}), {|start_mission.missionA.TopLevelSequencerId, done_mission.missionA.True, done_mission.missionA.False |})


--nametype NestedTeirChan = union(diff(TierChanSet, {|start_mission, done_mission|}), {|start_mission.missionB.FirstMissionSequencerID, done_mission.missionA.True, done_mission.missionA.False |})
 

--makeTierInterface(MIds) = TierSpecificChan.MIds

--      {
--          {(NestedMissionId, ({NestedMissionSequencerAId}, {}, {},  {}, {})  )},
 --         {(MissionAId,({}, {}, {},  {}, {ManagedThreadId})  ) }
  --      }


--MissionsInTiers(nestedTierIDs) = {m | m<- MissionID , tier <- Set(cluster), (missionID, managedSchedulableIDs) <-cluster, member(cluster, tier), member(tier, nestedTierIDs) ,  member(m, missionsInCluster(cluster))  }




ClustereAndTieredFramework(topLevelSequencerIDs, tier0IDS, tier1IDs) =
(  
  SafeletTier(topLevelSequencerIDs)
    [|TierSync|]
  (
    Tier0(tier0IDS) 
      [| union(
                  TierCommonChan, 
                  --{| start_mission.NestedMissionId, done_mission.NestedMissionId, initializeRet.NestedMissionId, requestTermination.NestedMissionId   |}
                  {| start_mission.x, done_mission.x, initializeRet.x, requestTermination.x.y  | x <- MissionID , member(x, {Tier1MissionAId, Tier1MissionBId}), y<- SchedulableID, member(y, {Tier0SequencerId})  |}
               ) 
      |]
     Tier(tier1IDs)    
  )
)
