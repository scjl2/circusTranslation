\begin{comment}
\begin{zsection}
  \SECTION ~ cdx\_anchor\_o2 ~ \parents ~ cdx\_anchor\_a, cdx\_mock\_objects
\end{zsection}
\end{comment}

%%Zword \aposns posns1
%%Zword \amotions motions1
%%Zword \acurrentFrame currentFrame1
%%Zword \astate state1

%%Zword \cposns posns2
%%Zword \cmotions motions2
%%Zword \ccurrentFrame currentFrame2
%%Zword \cstate state2
%%Zword \ccollisions collisions2

\renewcommand{\aposns}{posns_1}
\renewcommand{\amotions}{motions_1}
\newcommand{\acurrentFrame}{currentFrame_1}
\newcommand{\astate}{state_1}

\renewcommand{\cposns}{posns_2}
\renewcommand{\cmotions}{motions_2}
\renewcommand{\ccurrentFrame}{currentFrame_2}
\renewcommand{\cstate}{state_2}
\newcommand{\ccollisions}{collisions_2}

\subsubsection*{Refinement 1}

In the first refinement of the \name{SD} phase, we introduce the shared $collisions$ variable. It holds the result of the collision detection at the end of each cycle.

\subsubsection*{Refining State}

The state of the refining process is given by the following state schema.
%
\begin{schema}{OSD1StateCDx}
  \cposns : Frame\\
  \cmotions : Frame\\
  \ccurrentFrame : RawFrame\\
  \cstate : StateTable\\
  \ccollisions : int
\end{schema}
%
Again, all state components of the previous model are retained. Subscripts are used for disambiguation.

\subsubsection*{Retrieve Relation}

\begin{comment}
\begin{schema}{OCSStateCDx}
  \aposns : Frame\\
  \amotions : Frame\\
  \acurrentFrame : RawFrame\\
  \astate : StateTable
\end{schema}
\end{comment}

The retrieve relation of the first refinement of \name{SD} is specified below.
%
\begin{schema}{OSD1RetrCDx}
  OCSStateCDx\\
  OSD1StateCDx
\where
  \cposns = \aposns \land \cmotions = \amotions
  \\
  \ccurrentFrame = \acurrentFrame \land \cstate = \astate
  \\
  \exists collset : \finset ~ (Aircraft \cross Aircraft) | collset = CalcCollisionSet(\cposns, \cmotions) @\\
  \t1 (\# collset = 0 \land \ccollisions = 0) \lor (\# collset > 0 \land \ccollisions \geq (\# collset) \div 2)
\end{schema}
%
We constrain the value of $\ccollisions$ similar to $colls!$ in the $CalcCollisions$ action. This reflects the intention of refining $CalcCollisions$ by an assignment $colls := \ccollisions$.

%\newpage

\subsubsection*{Refining Process}

The process for the first refinement of the \name{SD} phase is presented in the sequel.
%
\begin{circusflow}
\begin{circus}
  \circprocess ~ OSD1BReqsCDx ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{\circstateignore ~ OSD1StateCDx}
  \cposns : Frame\\
  \cmotions : Frame\\
  \ccurrentFrame : RawFrame\\
  \cstate : StateTable\\
  \ccollisions : int
\where
  \dom \cposns = \dom \cmotions
  \\
  \ccurrentFrame \neq \circnull \land \cstate \neq \circnull
  \\
  \cposns =
  \circblockopen
    \lambda a : Aircraft | \ccurrentFrame~.~find(a) \neq \negate 1 @\\
      \t1
      \circblockopen
        \LET i == \ccurrentFrame~.~find(a) @\\
        \t1 MkVector
        \circblockopen
          \ccurrentFrame~.~positions~.~getA(3 * i),\\
          \ccurrentFrame~.~positions~.~getA(3 * i + 1),\\
          \ccurrentFrame~.~positions~.~getA(3 * i + 2)
        \circblockclose
     \circblockclose
  \circblockclose
  \also
  \cmotions =
  \circblockopen
    \lambda a : Aircraft | \ccurrentFrame~.~find(a) \neq \negate 1 @\\
    \t1
    \circblockopen
      \LET prev == \cstate~.~position\_map~.~get(MkCallSign(a)) @\\
      \t1 \IF prev \neq \circnull\\
      \t1 \THEN ~ \cposns(a) \vminus MkVector(prev~.~x, prev~.~y, prev~.~z)\\
      \t1 \ELSE ~ ZeroV
    \circblockclose
  \circblockclose
  \also
  \exists collset : \finset ~ (Aircraft \cross Aircraft) | collset = CalcCollisionSet(\cposns, \cmotions) @\\
  \t1 (\# collset = 0 \land \ccollisions = 0) \lor (\# collset > 0 \land \ccollisions \geq (\# collset) \div 2)
\end{schema}
%
\begin{comment}
\begin{circusaction}
  \circstate ~ OSD1StateCDx
\end{circusaction}
\end{comment}
%
\begin{schema}{Init}
  OSD1StateCDx~'
\where
  \cposns' = \emptyset \land \cmotions' = \emptyset
  \\
  \ccurrentFrame' = \circnew RawFrame \land \cstate' = \circnew StateTable
  \\
  \ccollisions' = 0
\end{schema}
%
\begin{schema}{RecordFrame}
  \Delta OSD1StateCDx\\
  frame? : Frame
\where
  \cposns' = frame?
  \\
  \cmotions' = \{a : \dom \cposns' @ a \mapsto \IF a \in \dom \cposns \THEN (\cposns' ~ a) \vminus (\cposns ~ a) \ELSE ZeroV\}
  \\
  \cposns =
  \circblockopen
    \lambda a : Aircraft | \ccurrentFrame~.~find(a) \neq \negate 1 @\\
      \t1
      \circblockopen
        \LET i == \ccurrentFrame~.~find(a) @\\
        \t1 MkVector
        \circblockopen
          \ccurrentFrame~.~positions~.~getA(3 * i),\\
          \ccurrentFrame~.~positions~.~getA(3 * i + 1),\\
          \ccurrentFrame~.~positions~.~getA(3 * i + 2)
        \circblockclose
     \circblockclose
  \circblockclose
  \also
  \cposns' =
  \circblockopen
    \lambda a : Aircraft | \ccurrentFrame'~.~find(a) \neq \negate 1 @\\
      \t1
      \circblockopen
        \LET i == \ccurrentFrame'~.~find(a) @\\
        \t1 MkVector
        \circblockopen
          \ccurrentFrame'~.~positions~.~getA(3 * i),\\
          \ccurrentFrame'~.~positions~.~getA(3 * i + 1),\\
          \ccurrentFrame'~.~positions~.~getA(3 * i + 2)
        \circblockclose
     \circblockclose
  \circblockclose
  \also
  \cmotions' =
  \circblockopen
    \lambda a : Aircraft | \ccurrentFrame'~.~find(a) \neq \negate 1 @\\
    \t1
    \circblockopen
      \LET prev == \cstate'~.~position\_map~.~get(MkCallSign(a)) @\\
      \t1 \IF prev \neq \circnull\\
      \t1 \THEN ~ \cposns'(a) \vminus MkVector(prev~.~x, prev~.~y, prev~.~z)\\
      \t1 \ELSE ~ ZeroV
    \circblockclose
  \circblockclose
  \also
  \exists collset : \finset ~ (Aircraft \cross Aircraft) | collset = CalcCollisionSet(\cposns', \cmotions') @\\
  \t1 (\# collset = 0 \land \ccollisions' = 0) \lor (\# collset > 0 \land \ccollisions' \geq (\# collset) \div 2)
\end{schema}
%
\begin{schema}{CalcCollisions}
  \Xi OSD1StateCDx\\
  colls! : \nat
\where
  colls! = \ccollisions
\end{schema}
%
\begin{circusaction}
  BReq1 ~ \circdef ~ next\_frame~?~frame ~ \then
  \\
  \t1
  \circblockopen
    RecordFrame \circseq
    \\
    \circvar colls : \nat \circspot CalcCollisions \circseq output\_collisions~!~colls \then BReq1
  \circblockclose
\end{circusaction}
\extracircusvspace
%
\begin{circusaction}
  \circspot \lschexpract Init \rschexpract \circseq BReq1
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
\end{circusflow}
%
As a result of this first refinement stage of \name{SD}, $RecordFrame$ in the refined process not only records the radar frame and updates the previous aircraft positions but also calculates the collisions. Contrary, the $CalcCollisions$ operation now simply returns the value of the shared variable $\ccollisions$ rather than performing any calculation as it was the case before.

% I was a bit confused about the definition of $CalcCollsiions$ when I saw the final version of the paper. Ana earlier seemed very convinced not to do any genuine operation refinement in this phase. I am not too sure that the result is obtained by mere simplification. Either way I modified the operation here in line with the paper but I need to ask Ana about this.

\begin{note}
The new definition of $CalcCollisions$ results from a simplification of this operation after refinement. Hence, there is no explicit data refinement involved and this transformation is therefore not a compulsory issue for algorithmic refinement. Besides, it simplifies the current and subsequent models.
\end{note}
