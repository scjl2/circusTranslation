\begin{zsection}
  \SECTION ~ MainMissionApp ~ \parents ~ scj\_toolkit, scj\_library,\\
  \t1 MainHandler, MissionIds, HandlerIds
\end{zsection}

\begin{circus}
  \circprocess ~ MainMissionApp ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{MainMissionApp\_State}
  terminating : BOOL
\end{schema}
%
\begin{circusaction}
  \circstate ~ MainMissionApp\_State
\end{circusaction}
%
\begin{schema}{MainMissionApp\_Init}
  MainMissionApp\_State~'
\where
  terminating' = FALSE
\end{schema}

\begin{circusaction}
  initializeMeth ~ \circdef ~ initializeCall~.~MainMissionId \then\\
  \t1 (\circvar handler : \circreftype MainHandlerClass \circspot\\
  \t2 handler := \circref (\circnew MainHandlerClass) \circseq\\
  \t2 MainHandlerInitCall~!~handler \then Skip \circseq\\
  \t2 register~.~MainHandlerId \then Skip) \circseq\\
  \t1 initializeRet~.~MainMissionId \then Skip
\end{circusaction}

\begin{circusaction}
  cleanupMeth ~ \circdef\\
  \t1 cleanupCall~.~MainMissionId \then Skip \circseq\\
  \t1 cleanupRet~.~MainMissionId \then Skip
\end{circusaction}

\begin{circusaction}
  missionMemorySizeMeth ~ \circdef\\
  \t1 missionMemorySizeRet~.~MainMissionId~!~131072 \then Skip
\end{circusaction}

\begin{circusaction}
  requestTerminationMeth ~ \circdef\\
  \t1 requestTerminationCall~.~MainMissionId \then\\
  \t2 \circif terminating = FALSE \circthen\\
  \t3 terminating := TRUE \circseq stop\_handlers \then Skip\\
  \t2 \circelse \lnot (terminating = FALSE) \circthen Skip \circfi \circseq\\
  \t1 requestTerminationRet~.~MainMissionId \then Skip
\end{circusaction}
\vspaceafterzpara

\red{The following two methods models are inherited and as such should really be specified in a process that reflects the \code{Mission} application class. This means we also need a notion of process inheritance.}
%
\begin{circusaction}
  terminationPendingMeth ~ \circdef\\
  \t1 terminationPendingRet~.~MainMissionId~!~terminating \then Skip
\end{circusaction}

\begin{circusaction}
  Methods ~ \circdef ~ \circmu X \circspot initializeMeth ~ \extchoice\\
  \t1 (cleanupMeth ~ \extchoice\\
  \t1 missionMemorySizeMeth ~ \extchoice\\
  \t1 requestTerminationMeth ~ \extchoice\\
  \t1 terminationPendingMeth) \circseq X
\end{circusaction}

\begin{circusaction}
  \circspot \lschexpract MainMissionApp\_Init \rschexpract \circseq (Methods ~ \circinterrupt ~ end\_mission\_app~.~MainMissionId \then Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
