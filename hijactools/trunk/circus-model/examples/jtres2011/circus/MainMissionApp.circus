\begin{zsection}
  \SECTION ~ MainMissionApp ~ \parents ~ scj\_toolkit, scj\_library,\\
  \t1 Handler1, Handler2, List, MissionIds, HandlerIds
\end{zsection}

\begin{circus}
  \circprocess ~ MainMissionApp ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{\circstateignore MainMissionApp\_State}
  list : \circreftype List
\end{schema}
\vspaceafterzpara

\begin{comment}
\begin{circusaction}
  \circstate ~ MainMissionApp\_State
\end{circusaction}
\end{comment}

%\begin{alert}
Below we do not explicitly pass the parameter objects of type $PriorityParameters$, $AperiodicParameters$, $PeriodicParameters$, and $StorageParameters$. Also we do not pass the $Aperiodic[Long]Event$ object to which the handler is bound. We assume that all of this is determined by the implementation architecture.
%\end{alert}
%
\begin{circusaction*}
  initializeMeth ~ \circdef ~ initializeCall~.~MainMissionId \then\\
  \t1 list \circrefassign \circnew List \circseq\\
  \t1 (\circvar handler1 : \circreftype Handler1Class \circspot\\
  \t2 handler1 \circrefassign \circref \circnew Handler1Class(list) \circseq\\
  \t2 Handler1Init~.~handler1 \then \Skip \circseq\\
  \t2 register~.~Handler1Id \then \Skip) \circseq\\
  \t1 (\circvar handler2 : \circreftype Handler2Class \circspot\\
  \t2 handler2 \circrefassign \circref \circnew Handler2Class(list) \circseq\\
  \t2 Handler2Init~.~handler2 \then \Skip \circseq\\
  \t2 register~.~Handler2Id \then \Skip) \circseq\\
  \t1 initializeRet~.~MainMissionId \then \Skip
\end{circusaction*}

\begin{comment}
\begin{circusaction}
  initializeMeth ~ \circdef ~ \Skip
\end{circusaction}
\end{comment}

\begin{circusaction}
  cleanupMeth ~ \circdef\\
  \t1 cleanupCall~.~MainMissionId \then \Skip \circseq\\
  \t1 cleanupRet~.~MainMissionId \then \Skip
\end{circusaction}

\begin{circusaction}
  missionMemorySizeMeth ~ \circdef\\
  \t1 missionMemorySizeCall~.~MainMissionId \then \Skip \circseq\\
  \t1 missionMemorySizeRet~.~MainMissionId~!~131072 \then \Skip
\end{circusaction}

\begin{circusaction}
  Methods ~ \circdef ~ \circmu X \circspot (initializeMeth ~ \extchoice ~ cleanupMeth ~ \extchoice ~ missionMemorySizeMeth) \circseq X
\end{circusaction}

\begin{circusaction}
  \circspot (Methods ~ \circinterrupt ~ end\_mission\_app~.~MainMissionId \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
