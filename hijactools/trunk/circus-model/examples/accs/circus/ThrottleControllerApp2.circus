\begin{zsection}
  \SECTION ~ ThrottleControllerAlt1App ~ \parents ~ ThrottleControllerClass, ThrottleControllerMethChan,\\
  \t1 ThrottleControllerConst, HandlerIds, Events
\end{zsection}
\extracircusvspace
%
\begin{circus}
  \circprocess ~ ThrottleControllerApp ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{\circstateignore ThrottleControllerState}
  this : ThrottleControllerClass
\end{schema}
%
\begin{comment}
\begin{circusaction}
  \circstate ~ ThrottleControllerState
\end{circusaction}
\end{comment}
%
\begin{circusaction}
  Init ~ \circdef ~ ThrottleControllerInit~?~obj \then this \circrefassign obj
\end{circusaction}
%
\begin{circusaction*}
  increaseVoltageMeth ~ \circdef\\
  \t1 \circif this.voltage < 80 \circthen this.voltage := this.voltage + 1\\
  \t1 \circelse \lnot this.voltage < 80 \circthen \Skip \circfi \circseq\\
  \t1 \green{set\_voltage ~!~(this.voltage)} \then \Skip
\end{circusaction*}
%
\begin{circusaction*}
  decreaseVoltageMeth ~ \circdef\\
  \t1 \circif this.voltage > 0 \circthen this.voltage := this.voltage - 1\\
  \t1 \circelse \lnot this.voltage > 0 \circthen \Skip \circfi \circseq\\
  \t1 \green{set\_voltage ~!~(this.voltage)} \then \Skip
\end{circusaction*}
%
\begin{circusaction*}
  handleAsyncEventMeth ~ \circdef\\
  \t1 \circif this.schedule = jtrue \circthen\\
  \t2 \circif this.accelerating = jtrue \circthen increaseVoltageMeth\\
  \t2 \circelse ~ \lnot (this.accelerating = jtrue) \circthen\\
  \t3 \circif this.maintainSpeed = jtrue \circthen\\
  \t4 \circif this.cruiseSpeed - this.speed.getCurrentSpeed() > 2 \circthen increaseVoltageMeth\\
  \t4 \circelse ~ this.speed.getCurrentSpeed() - this.cruiseSpeed < 2 \circthen\\
  \t5 decreaseVoltageMeth\\
  \t4 \circelse ~ \lnot (this.cruiseSpeed - this.speed.getCurrentSpeed() > 2) \land\\
  \t4 ~ ~ ~ ~ \lnot (this.speed.getCurrentSpeed() - this.cruiseSpeed < 2) \circthen\\
  \t5 \circvar volts : VOLTAGE\_RANGE \circspot\\
  \t6 volts := 2 * (this.cruiseSpeed - this.speed.getCurrentSpeed()) + 2 \circseq\\
  \t6 \circif volts > this.voltage \circthen increaseVoltageMeth\\
  \t6 \circelse ~ \lnot (volts > this.voltage) \circthen decreaseVoltageMeth\\
  \t6 \circfi\\
  \t4 \circfi\\
  \t3 \circelse ~ (this.maintainSpeed = jtrue) \circthen \Skip\\
  \t3 \circfi\\
  \t2 \circfi\\
  \t1 \circelse ~ \lnot (this.schedule = jtrue) \circthen \Skip\\
  \t1 \circfi
\end{circusaction*}
%
\begin{comment}
\begin{circusaction}
  handleAsyncEventMeth ~ \circdef ~ \Skip
\end{circusaction}
\end{comment}
%
\begin{circusaction}
  Execute ~ \circdef ~ enter\_dispatch \then\\
  \t1 (Dispatch \lpar \{this\} | \lchanset release\_handler \rchanset | \emptyset \rpar Release) \circhide \lchanset release\_handler \rchanset
\end{circusaction}
%
\begin{circusaction}
  Dispatch ~ \circdef ~ \circmu X \circspot  (leave\_dispatch \then \Skip) ~ ~ \extchoice\\
  \t1 (release\_handler \then handleAsyncEventMeth \circseq \circwait 1..ThrottleControllerDeadline \circseq X)
\end{circusaction}
%
\begin{circusaction*}
  Release ~ \circdef ~ (\circmu X \circspot (release\_handler \then \Skip \circdeadline 0) \circseq \circwait this.period \circseq X)\\
  \t1 \circinterrupt ~ ~ leave\_dispatch \then \Skip
\end{circusaction*}
%
\begin{comment}
\begin{circusaction}
  Release ~ \circdef ~ (\circmu X \circspot (release\_handler \then \Skip \circdeadline 0) \circseq \circwait 0 \circseq X)\\
  \t1 \circinterrupt ~ ~ leave\_dispatch \then \Skip
\end{circusaction}
\end{comment}
%
\begin{circusaction}
  Terminate ~ \circdef ~ done\_handler~.~ThrottleControllerId \then \Skip
\end{circusaction}
%
\begin{circusaction}
  \circspot (\circmu X \circspot Init \circseq Execute \circseq Terminate \circseq X) \circinterrupt ~ end\_mission\_fw \then \Skip
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
