import javax.realtime.AbsoluteTime;
import javax.realtime.Clock;
import javax.realtime.ImmortalMemory;
import javax.realtime.PeriodicParameters;
import javax.realtime.PriorityParameters;
import javax.realtime.PriorityScheduler;
import javax.realtime.RelativeTime;

import javax.safetycritical.Mission;
import javax.safetycritical.PeriodicEventHandler;
import javax.safetycritical.StorageConfigurationParameters;

public class MainHandler extends PeriodicEventHandler {
   public AbsoluteTime[] releaseTimes;
   public int index = 0;

   public MainHandler(AbsoluteTime[] releaseTimes) {
      super(
         new PriorityParameters(
            PriorityScheduler.instance().getNormPriority()),
         new PeriodicParameters(null, new RelativeTime(100, 0)),
         new StorageConfigurationParameters(32768, 4096, 4096),
         65536, "MainHandler");
      this.releaseTimes = releaseTimes;
   }

   public class ImmortalEntry implements Runnable {
      /* The following code must be executed in immortal memory since getTime()
       * allocates memory for the AbsoluteTime object. Otherwise we would have
       * a downward reference as releaseTimes was created in immortal memory. */
      public void run() {
         /*Clock clock = new Clock();*/
         Clock clock = Clock.getRealtimeClock();
         releaseTimes[index++] = clock.getTime();
      }
   }

   public void handleEvent() {
      System.out.println("[MainHandler] handleEvent() called");
      if (index < releaseTimes.length) {
         ImmortalMemory.instance().executeInArea(new ImmortalEntry());
      }
      else {
         Mission.getCurrentMission().requestTermination();         
      }
   }
}
