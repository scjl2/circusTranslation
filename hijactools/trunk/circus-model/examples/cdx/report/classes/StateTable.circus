\begin{comment}
\begin{zsection}
  \SECTION ~ StateTable ~ \parents ~ cdx\_preliminaries, cdx\_mock\_objects
\end{zsection}
\end{comment}

\begin{comment}
\begin{zed}
  Vector3dArray ~ == ~ Array[Vector3d]\\
  [StateTable\_R]
\end{zed}
%
\begin{axdef}
  MAX\_AIRPLANES : int
\end{axdef}
\end{comment}

%%Zword \StateTableR StateTableRClass

\newcommand{\StateTableR}{StateTable\_R}

\subsubsection*{Abstract version}

The abstract $StateTable$ class is not concerned with memory allocation issues.
%
\begin{circusflow}
\begin{circus}
  \circclass ~ StateTableA ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{StateTableState}
  \circprivate posnMap : HashMap[CallSign, Vector3d]
\where
  posnMap \neq \circnull
\end{schema}
%
\begin{comment}
\begin{circusaction}
  \circstate ~ StateTableState
\end{circusaction}
\end{comment}
%
\begin{circusaction}
  \circinitial ~ Init ~ \circdef ~ posnMap := \circnewM HashMap
\end{circusaction}The abstract $StateTable$ class is not concerned with memory allocation issues.
%
\begin{circusmethod}
  \circpublic ~ put(callsign : CallSign, x : float, y : float, z : float) ~ \circdef\\
  \t1 posnMap~.~put(callsign, \circnew Vector3d(x, y, z))
\end{circusmethod}
%
\begin{circusmethod}
  \circpublic ~ get(callsign : CallSign) ~ \circdef ~ \circret := posnMap~.~get(callsign)
\end{circusmethod}
%
\begin{comment}
\begin{circusaction}
  \circspot \Skip
\end{circusaction}
\end{comment}
%
\begin{circus}
  \circend
\end{circus}
\end{circusflow}
%
The $posnMap$ member variable of type $HashMap$ is used to store $Vector3d$ objects under keys being $CallSign$ objects. The model for the $HashMap$ class is included in Appendix~\ref{app:HashMap}.

\subsubsection*{Concrete version}

The concrete $StateTable$ class in comparison considers memory areas.
%
\begin{circusflow}
\begin{circus}
  \circclass ~ StateTableC ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{\circstatics StateTableStatics}
  MAX\_AIRPLANES : int
\end{schema}
%
\begin{schema}{\circsinit StateTableSInit}
  StateTableStatics~'
\where
  MAX\_AIRPLANES' = 10000
\end{schema}
%
\begin{schema}{StateTableState}
  \circprivate posnMap : HashMap[CallSign,Vector3d]\\
  \circprivate allocatedVectors : Vector3dArray\\
  \circprivate usedVectors : int\\
  \circprivate r : StateTable\_R
\where
  posnMap \neq \circnull \land allocatedVectors \neq \circnull
  \\
  0 \leq usedVectors \leq allocatedVectors~.~length~\emptytuple
\end{schema}
%
\begin{circusmethod}
  \circinitialscj ~ Init ~ \circdef\\
  \t1
  \circblockopen
    r := \circnewM StateTable\_R(\circself) \circseq\\
    allocatedVectors := \circnewM Vector3dArray(MAX\_AIRPLANES) \circseq\\
    \circblockopen
      \circfor index = 0 \circto allocatedVectors~.~length() - 1 \circspot\\
      \t1 allocatedVectors~.~setA(index, \circnewM Vector3d()))
    \circblockclose
    \circseq \\
    usedVectors := 0
  \circblockclose
\end{circusmethod}
%
\begin{circusmethod}
  \circpublic ~ put(callsign : CallSign, x : float, y : float, z : float) ~ \circdef\\
  \t1
  \circblockopen
    r~.~callsign := callsign \circseq\\
    r~.~x := x \circseq\\
    r~.~y := y \circseq\\
    r~.~z := z \circseq\\
    \red{MemoryArea~.~getMemoryArea(\circself)~.~executeInArea(r)}
  \circblockclose
\end{circusmethod}
%
\begin{circusmethod}
  \circpublic ~ get(callsign : CallSign) ~ \circdef ~ \circret := posnMap~.~get(callsign)
\end{circusmethod}
%
\begin{comment}
\begin{circusaction}
  \circspot \Skip
\end{circusaction}
\end{comment}
%
\begin{circus}
  \circend
\end{circus}
\end{circusflow}
%
This class introduces mechanisms to solve memory allocation issues ensued by the dynamic allocation of data in mission memory. This is, in particular, the allocation of $Vector3d$ objects. It utilises an inner class $StateTable\_R$ to execute code in mission memory that updates the $HashMap$.

\subsubsection*{Inner class $R$ of $StateTable$}

The inner class below is used to ensure that put operations carried out on the $HashMap$ are executed in mission memory. This should, in principle, not be necessary, however, I suspect that adding elements to the $HashMap$ causes dynamic allocation of data, too, in the original program of the {\CDx}. This is fundamentally an issue with the memory behaviour of libraries and subject to future research.
%
\begin{circusflow}
\begin{circus}
  \circclass ~ \StateTableR ~ \circdef ~ \circbegin
\end{circus}
%
\begin{schema}{StateTable\_RState}
  \circprivate outer : StateTable\\
  \circpublic callsign : CallSign\\
  \circpublic x, y, z : float
\where
  outer \neq \circnull
\end{schema}
%
\begin{comment}
\begin{circusaction}
  \circstate ~ StateTable\_RState
\end{circusaction}
\end{comment}
%
\begin{circusmethod}
  \circinitialscj ~ Init(o : StateTable) ~ \circdef ~ outer := o
\end{circusmethod}
%
\begin{circusmethod}
  \circpublic ~ run ~ \circdef\\
  \t1
  \circblockopen
    \circvar v : Vector3d \circspot v := outer~.~posnMap~.~get(callsign) \circseq\\
    \circif v = \circnull \circthen\\
    \t1
    \circblockopen
      v := outer~.~allocatedVectors~.~get(usedVectors) \circseq\\
      usedVectors := usedVectors + 1 \circseq\\
      outer~.~posnMap~.~put(callsign, v) \circseq
    \circblockclose\\
    \circelse ~ \lnot v = \circnull \circthen ~ \Skip\\
    \circfi \circseq\\
    v~.~x := x \circseq\\
    v~.~y := y \circseq\\
    v~.~z := z
  \circblockclose
\end{circusmethod}
%
\begin{comment}
\begin{circusaction}
  \circspot \Skip
\end{circusaction}
\end{comment}
%
\begin{circus}
  \circend
\end{circus}
\end{circusflow}
%
Other than the potential problem of $HashMap$ internally allocating data, I do not see why the content of the $run()$ method cannot be executed in per-release memory. Are there downward references? Another issue is how we make explicit in {\SCJCircus} that a piece of code should run in a particular memory area. We might not want to do this via a class and data object as above. These are still open issues for the language.

\begin{note}
Maybe ask Kun to investigate the above in more detail and maybe revise the code.
\end{note}
