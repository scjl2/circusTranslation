\begin{comment}
\begin{zsection}
  \SECTION ~ cdx\_anchor\_o ~ \parents ~ cdx\_anchor\_o4
\end{zsection}
\end{comment}

\section{Anchor \name{O}}

In this section, we discuss the construction of the \name{O} anchor. This is done in three refinement phases as explained in~\cite{CWWWZ12}. They are namely \name{CS}~(concrete state), \name{SD}~(shared data) and \name{EL}~(elimination). We first examine the shared data in the {\CDx} program and then proceed with the refinement model(s) for each phase.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Shared Data}

To guide the data refinements in this step, Table \ref{tab:SharedData} summarises the relevant shared and local fields of the parallel {\CDx} SCJ program. All data resides in either mission or immortal memory except for \verb"voxel_map", which is local to \verb"ReducerHandler"; we have to consider \verb"voxel_map" in the \name{O} anchor data refinements though because other shared data depend on its presence in the model; this is in particular to formulate a suitable retrieve relation for \verb"work".

\medskip

{\renewcommand{\arraystretch}{1.2}\input{SharedData}}

\nid
Below we give a brief explanation of the purpose of each variable.
%
\begin{itemize}
  \item The \verb"simulator" and \verb"frameBuffer" objects are part of the simulation. The \verb"FrameBuffer" class provides the mechanism for reading the next radar frame from the hardware. In the original {\CDx}, \verb"frameBuffer" was located in a class \verb"ImmortalEntry" whose name we changed to \verb"Simulator". The \verb"frameBuffer" object is not directly represented as part of the model since we abstract from the details of the mechanism that interact with the hardware, as well as the storage to buffer device data for radar frames.

  \item The \verb"currentFrame" variable corresponds to the $posns$ component of the abstract model. Its type \verb"RawFrame" records this data by virtue of various arrays of primitive types:~\verb"int[]", \verb"byte[]" and \verb"float[]". These hold the call signs and positions of the aircrafts.

  \item The \verb"state" variable of type \verb"StateTable" holds the previous positions of aircrafts. It thus does not encode the $motions$ vectors directly, but we can construct them from the content of \verb"currentFrame" and \verb"state". Unlike \verb"RawFrame", \verb"StateTable" records the positions by way of a (customised) \verb"CHashMap". It also manages the allocation of \verb"Vector3d" objects for positions as to avoid memory leaks.

  \item The \verb"voxel_map" field is local to \verb"ReducerHandler" and thus not shared. It records the result of the voxel hashing operation and is needed to specify essential properties of the algorithm as well as the retrieve relation for \verb"work"~(which is shared). It thus becomes relevant to the \name{O} anchor.

  \item The \verb"work" variable of type \verb"Partition" is used to divide and record the computational work assigned to each detection handler. The \verb"Partition" class provides some methods that facilitate this. This object is shared between the \verb"DetectorHandler" classes as well as \verb"ReducerHandler" who initialises it.

  \item The \verb"collisions" variable accumulates the number of collisions detected by the parallel detection handlers. It is concurrently accessed by them via synchronised methods to avoid data races.

  \item The \verb"control" variable holds an object of type \verb"DetectorControl" which is used to orchestrate the execution of the detector handlers and the output handler.

  \item The \verb"factories" variable resides in mission memory despite being local. It is an artifacts of our program design to pre-allocate shared objects. This is important to avoid dynamic allocations in mission memory while the mission executes. We ignore it in the \name{O} anchor as it is introduced during algorithmic refinement.
\end{itemize}
%
The above analysis yields the following correspondence between abstract model variables and concrete program variables. The $posns$ and $motions$ state components of $ABReqsCDx$ are exactly represented by the \verb"currentFrame" and \verb"state" variables in the program~(\name{CS} phase). The other variables refer to shared and local data that has to be introduced as part of the \name{SD} phase of the \name{O} anchor, apart from the simulation-related classes and \verb"factories". The \verb"control" object is also not considered in the \name{O} anchor as it will be introduced later on in the design, namely in the \name{E} anchor when refining the control behaviour.

We have omitted the shared objects for SCJ events in Table~\ref{tab:SharedData}; this is because they are not considered as data objects. We next examine the refinements that introduce the aforementioned class objects for shared data into the model. For the \name{CS} and \name{EL} phases, we have a single (data) refinement, whereas for the \name{SD} phase we carry out the refinement in two incremental steps. Apart from the finalising \name{EL} model, none of the models discard existing state components but merely extend the state of the previous process. To disambiguate the names of state components inside the retrieve relations, we use subscripts.

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\input{cdx_anchor_o1.circus}

%\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\subsection{Phase \name{SD}}

This phase is divided into two incremental refinements to leverage the proof effort.
%
\begin{itemize}
  \item The first refinement introduces the shared variable $collisions$ whose purpose is to hold the detected number of collisions after each detection cycle.

  \item The second refinement introduces the shared variable $work$, concurrently with the local variable $voxel\_map$. Whereas the $work$ component divides the computational work, $voxel\_map$ determines the result of the voxel hashing operation and is required to specify the retrieve relation for $work$.
\end{itemize}
%
We present the process model for each refinement step.

%\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\input{cdx_anchor_o2.circus}

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\input{cdx_anchor_o3.circus}

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\input{cdx_anchor_o4.circus}

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
