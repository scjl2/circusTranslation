\begin{zsection}
  \SECTION ~ PeriodicEventHandlerFW ~ \parents ~ MissionChan, HandlerChan, Dummies, scj\_prelude
\end{zsection}
\extracircusvspace
%
\begin{circus}
  \circprocess PeriodicEventHandlerFW ~ \circdef ~ handler : HandlerId \circspot
  \also
  \circbegin
\end{circus}
%
\begin{schema}{PeriodicEventHandlerFWState}
  active : BOOL
\end{schema}
%
\begin{circusaction}
  \circstate ~ PeriodicEventHandlerFWState
\end{circusaction}
%
\begin{schema}{PeriodicEventHandlerFWInit}
  PeriodicEventHandlerFWState~'
\where
  active' = FALSE
\end{schema}
%
\begin{circusaction}
  StartHandler ~ \circdef ~ start\_handler~.~handler \then active := TRUE
\end{circusaction}
%
\begin{circusaction}
  ActivateHandlers ~ \circdef ~ activate\_handlers \then \Skip
\end{circusaction}
%
\begin{circusaction}
  DispatchHandler ~ \circdef ~ enter\_dispatch \then stop\_handler~.~handler \then leave\_dispatch \then \Skip
\end{circusaction}
%
\begin{circusaction}
  \circspot (\circmu X \circspot \lschexpract PeriodicEventHandlerFWInit \rschexpract \circseq\\
  \t1 ((StartHandler  \circseq ActivateHandlers) ~ \extchoice ~ ActivateHandlers) \circseq\\
  \t1 \circif ~ active = TRUE \circthen DispatchHandler\\
  \t1 \circelse ~ active = FALSE \circthen \Skip \circfi \circseq X) ~ \circinterrupt ~ end\_mission\_fw \then \Skip
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}

%\begin{circusaction}
%  ReleaseHandler ~ \circdef\\
%  \t1 \circmu X \circspot (release\_handler~.~SomeHandlerId \then \Skip \circdeadline 0) \circseq \circwait SomePeriod \circseq X
%\end{circusaction}

%\begin{circusaction}
%  DispatchHandler ~ \circdef\\
%  \t1 \circmu X \circspot release\_handler~.~SomeHandlerId \then\\
%  \t2 (handleAsyncEventCall~.~SomeHandlerId \then \Skip \circdeadline SomeReleaseJitter) ~ \circseq\\
%  \t2 (handleAsyncEventRet~.~SomeHandlerId \then \Skip \circdeadline SomeDeadline) \circseq X
%\end{circusaction}
