\begin{zsection}
  \SECTION ~ HandlerFWChan ~ \parents ~ HandlerId, scj\_prelude
\end{zsection}
%
The $start\_handler$, $stop\_handler$ and $done\_handler$ channels are used by the mission to control handler execution. They are all parametrised in terms of a handler id. We thus require particular handler to synchronise on instance of those events for their underlying id, so that handlers can be independently controlled.
%
\begin{circus}
  \circchannel ~ start\_handler : HandlerId
  \also
  \circchannel ~ stop\_handler : HandlerId
  \also
  \circchannel ~ done\_handler : HandlerId
\end{circus}
%
At first, $start\_handler$ communicates to a handler that it should be started as part of the current mission. Note that the handler does not immediately start execution after synchronising on $start\_handler$ but waits for the $activate\_handlers$ broadcasting event. Secondly, $stop\_handler$ communicates that a handler should terminate as soon as possible. The $done\_handler$ event is subsequently raised by the handler to acknowledge to the mission that the handler has terminated.

The $enter\_dispatch$ and $leave\_dispatch$ events are used by the handler framework process to control the respective application process. They determine when a handler enters and leave its dispatch loop.
%
\begin{circus}
  \circchannel ~ enter\_dispatch
  \also
  \circchannel ~ leave\_dispatch
\end{circus}
%
The $release\_handler$ event is generated internally for periodic event handlers to cause a release.
%
\begin{circus}
  \circchannel ~ release\_handler
\end{circus}
