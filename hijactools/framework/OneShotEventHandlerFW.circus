\begin{zsection}
  \SECTION ~ OneShotEventHandlerFW ~ \parents ~ MissionChan, SchedulableChan, SchedulableId,\\
   \t1 MissionId, MissionIds,TopLevelMissionSequencerChan, OneShotEventHandlerChan,\\
   \t1 SafeletMethChan, FrameworkChan, AperiodicParameters
\end{zsection}
%
\begin{circus}
  \circprocess OneShotEventHandlerFW ~ \circdef ~ schedulable : SchedulableID; startTime: JTime ; aperiodicParameters : AperiodicParameters \circspot ~\circbegin
\end{circus}
%
\begin{schema}{\circstateignore OSEH\_State}
  controllingMission : MissionID\\
  applicationTerminating : \boolean \\
  deadline : JTime \\
  deadlineMissHandler : SchedulableID \\
\end{schema}
%
\begin{parser}
\begin{circusaction}
\circstate OSEH\_State
\end{circusaction}
\end{parser}
%
\begin{schema}{OSEH\_Init}
 OSEH\_State~'\\
 \where
  controllingMission' = nullMissionId\\
  applicationTerminating' = \false \\
  deadline' = deadlineOfAperiodic(aperiodicParameters) \\
  deadlineMissHandler' = missHandlerOfAperiodic(aperiodicParameters) \\
\end{schema}
%
\begin{circusaction}
Start \circdef\\
\t1  \circblockopen
  	Register \circseq \\
  	Activate
     \circblockclose   \\
\t1  \extchoice\\
\t1  \circblockopen
  	activate\_schedulables?someMissionID \then \\
  	Start
  \circblockclose  \\
\t1  \extchoice \\
\t1 \circblockopen
	done\_toplevel\_sequencer \then \\
	applicationTerminating := \true  \\
    \circblockclose
\end{circusaction}
%
\begin{circusaction}
Register \circdef \\
\t1    register~.~schedulable~?~mID \then \\
\t1    controllingMission := mID
\end{circusaction}
%
\begin{circusaction}
Activate ~ \circdef ~ \\
\t1    activate\_schedulables~.~controllingMission \then \\
\t1    \Skip
\end{circusaction}
%
\begin{circusaction}
Execute \circdef  \\
\t1 \circblockopen
		\circblockopen
			\circblockopen
				Run
					\t1   \lpar \emptyset | MethodsSync | \emptyset \rpar\\
				Methods\\
			\circblockclose
			\lpar \emptyset | \lchanset end\_releases \rchanset | \emptyset \rpar\\
		SignalTermination
	  \circblockclose  \\
	  	\t1   \lpar \emptyset| STCSync | \{startTime\} \rpar\\
		StartTimeController
	\circblockclose
\end{circusaction}
%
\begin{circusaction}
Run \circdef \\
\t1	\circif deadlineMissHandler = nullSchedulableId \circthen \\
\t2 	\circblockopen
					ScheduleOrWait \\
						\lpar \emptyset | ReleaseSync | \emptyset \rpar \\
					Release
	\circblockclose  \\
\t1 \circelse deadlineMissHandler \neq nullSchedulableId \circthen \\
\t2 \circblockopen
		\circblockopen
			ScheduleOrWait \\
				\lpar \emptyset | ReleaseSync | \emptyset \rpar \\
			Release
		\circblockclose
			\lpar \emptyset | DeadlineSync | \emptyset \rpar \\
			DeadlineClock
	\circblockclose
\t1 \circfi
\end{circusaction}
%
\begin{circusaction}
ScheduleOrWait \circdef\\
\t1 get\_startTime~.~schedulable~?~startTime \then \\
\t1 \circif startTime != NULL \circthen \\
\t2        Scheduled \\
\t1  \circelse startTime = NULL \circthen\\
\t2      NotScheduled \\
\t1 \circfi
\end{circusaction}
%
\begin{circusaction}
Release \circdef \\
\t1 \circblockopen
    		handleAsyncEventCall~.~schedulable \then \\
    		handleAsyncEventRet~.~schedulable \then  \\
	    	release\_complete~.~schedulable \then \\
    		Release
\t1  \circblockclose  \\
\t1 \extchoice\\
\t1 \circblockopen
		reschedule\_handler~.~schedulable~?~newStartTime \then \\
		set\_startTime~.~schedulable~!~newStartTime \then \\
		Release
    \circblockclose \\
\t1 \extchoice\\
\t1 \circblockopen
		end\_releases~.~schedulable \then \\
    stop\_release~.~schedulable \then \\
		\Skip
     \circblockclose
\end{circusaction}
%
\begin{circusaction}
DeadlineClock \circdef \\
\t1 release~.~schedulable \then \\
\t1	\circblockopen
		\circblockopen
			\circblockopen
			%%%%PARSING%%%%\circwait valueOf(deadline) \circseq \\
				release~.~deadlineMissHandler \then \\
				DeadlineClock
			\circblockclose  \\
			\extchoice \\
			\circblockopen
	 			release\_complete~.~schedulable \then \\
				DeadlineClock
			\circblockclose
			\extchoice \\
			\circblockopen
	 			deschedule\_handler~.~schedulable \then \\
				DeadlineClock
			\circblockclose
		\circblockclose
	\circblockclose
	\circseq %%%%PARSING%%%%  \circinterrupt
    \circblockopen
    		end\_releases~.~schedulable \then \\
	    	\Skip
    \circblockclose
\end{circusaction}
%
\begin{circusaction}
Scheduled \circdef \\
\t1 get\_startTime~.~schedulable~?~startTime \then \\
\t1 \circblockopen
  \circblockopen
  %%%%%PARSING%%%%%\circwait valueOf(startTime) \\
    release~.~schedulable \then \\
		handleAsyncEventCall~.~schedulable \then \\
	 	NotScheduled
     \circblockclose \\
     \circseq  %%%%%PARSING%%%% \circinterrupt \\
  \circblockopen
     	\circblockopen
      		deschedule\_handler~.~schedulable \then \\
      		NotScheduled\\
      	\circblockclose \\
     	\extchoice \\
     	\circblockopen
     		reschedule\_handler~.~schedulable~?~newStartTime \then \\
     		set\_startTime~.~schedulable~!~newStartTime \then \\
     		Scheduled\\
     	\circblockclose  \\
   \circblockclose    \\
 \circblockclose
\end{circusaction}
%
\begin{circusaction}
NotScheduled \circdef\\
\t1    \circblockopen
        	deschedule\_handler~.~schedulable \then \\
        	NotScheduled\\
       \circblockclose \\
\t1    \extchoice\\
\t1    \circblockopen
       		reschedule\_handler~.~schedulable~?~newStartTime \then \\
       		set\_startTime~.~schedulable~!~newStartTime \then \\
       		Scheduled \\
        \circblockclose      \\
\t1    \extchoice\\
\t1    \circblockopen
		end\_releases~.~schedulable \then \\
		\Skip
	\circblockclose \\
\end{circusaction}
%
\begin{circusaction}
Methods \circdef \\
\t1 \circblockopen
	Deschedule \circseq \\
	Methods
    \circblockclose  \\
\t1 \extchoice \\
\t1 \circblockopen
	GetNextReleaseTime \circseq \\
	Methods
    \circblockclose  \\
\t1 \extchoice \\
\t1 \circblockopen
	ScheduleNextRelease\circseq \\
	Methods
    \circblockclose  \\
\t1 \extchoice\\
\t1 \circblockopen
	end\_releases~.~schedulable \then \\
	\Skip
     \circblockclose
\end{circusaction}
%
\begin{circusaction}
Deschedule \circdef \\
\t1  \circvar wasScheduled : \boolean \circspot\\
\t1  descheduleCall~.~schedulable \then\\
\t1  deschedule\_handler.schedulable \then\\
\t1  get\_startTime~.~schedulable~?~startTime \then \\
\t1 \circblockopen
 \circif startTime = NULL \circthen\\
\t2 	wasScheduled := \false \\
 \circelse startTime \neq NULL \circthen\\
\t2	wasScheduled := \true \\
 \circfi \circseq\\
  set\_startTime~.~schedulable~!~NULL \then \\
  descheduleRet~.~schedulable~!~wasScheduled \then \\
  \Skip
 \circblockclose
\end{circusaction}
%
\begin{circusaction}
GetNextReleaseTime \circdef \\
\t1 getNextReleaseTimeCall~.~schedulable \then \\
\t1 get\_startTime~.~schedulable~?~startTime \then \\
\t1 getNextReleaseTimeRet~.~schedulable~!~startTime \then \\
\t1 \Skip
\end{circusaction}
%
%Since jInt is defiend to only allow natural numbers, a negative cannot be supplied here
\begin{circusaction}
ScheduleNextRelease \circdef \\
\t1 scheduleNextRelease~.~schedulable~?~newStartTime \then \\
\t1 set\_startTime~.~schedulable~!~newStartTime \then \\
\t1 \circif newStartTime = NULL \circthen \\
\t2 	\circblockopen
		deschedule\_handler.schedulable \then \\
		\Skip\\
	\circblockclose
\t1 \circelse newStartTime \neq NULL \circthen \\
\t2	\circblockopen
 		reschedule\_handler~!~schedulable~!~newStartTime \then \\
 		\Skip \\
 	\circblockclose
\t1 \circfi
\end{circusaction}
%
\begin{circusaction}
SignalTermination \circdef\\
\t1 signalTerminationCall~.~schedulable \then\\
\t1 end\_releases~.~schedulable \then\\
\t1 signalTerminationRet~.~schedulable \then\\
\t1 done\_schedulable~.~schedulable \then\\
\t1 \Skip
\end{circusaction}
%
\begin{circusaction}
StartTimeController \circdef \\
\t1 \circblockopen
	get\_startTime~.~schedulable~!~startTime \then \\
	StartTimeController
    \circblockclose \\
\t1 \extchoice \\
\t1 \circblockopen
	set\_startTime~.~schedulable~?~newStartTime \then \\
	StartTimeController
    \circblockclose
\end{circusaction}
%
\begin{circusaction}
Cleanup \circdef \\
\t1	cleanupSchedulableCall~.~schedulable \then\\
\t1	cleanupSchedulableRet~.~schedulable \then \Skip
\end{circusaction}
%
\begin{circusaction}
	\circspot \circblockopen  \circmu X \circspot \circblockopen   \lschexpract OSEH\_Init \rschexpract \circseq Start \circseq\\
\circblockopen  \circif applicationTerminating = \false \circthen \\
		\t1 \circblockopen Execute \circseq Cleanup \circseq X\circblockclose \\
	\circelse applicationTerminating = \true \circthen \\
		\t1 \circblockopen
			end\_oneShot\_app~.~schedulable \then \\
			\Skip
		\circblockclose
\circfi \circblockclose  \circblockclose  \circblockclose
\end{circusaction}
%
\begin{circus}
  \circend
\end{circus}
