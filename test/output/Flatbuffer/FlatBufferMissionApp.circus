\begin{zsection}
  \SECTION ~ FlatBufferMissionApp ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan , FlatBufferMissionClass

\end{zsection}
%\begin{circus}
%\circchannelset FlatBufferMissionAppSync == \\
%	\lchanset initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet  \rchanset
%\end{circus}

%\begin{circus}
%\circchannelset FlatBufferMissionAppChanSet == \\
% \lchanset initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,

%    register~.~Reader~.~FlatBufferMission 
%    register~.~Writer~.~FlatBufferMission 
%\rchanset
%\end{circus}

\begin{circus}
\circprocess FlatBufferMissionApp \circdef  \circbegin
\end{circus}

\begin{schema}{State}
  this : \circreftype FlatBufferMissionClass\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
\where
  this' = \circnew FlatBufferMissionClass()\\ 
\end{schema}

\begin{circusaction}
InitializePhase \circdef \\
\circblockopen
  initializeCall~.~FlatBufferMission \then \\
  
	register~!~Reader~!~FlatBufferMission \then   \\
	register~!~Writer~!~FlatBufferMission \then   \\


  initializeRet~.~FlatBufferMission \then \\
  \Skip
\circblockclose 
\end{circusaction}
 
\begin{circusaction}
CleanupPhase \circdef  \\
\circblockopen
 cleanupMissionCall~.~FlatBufferMission \then \\

 cleanupMissionRet~.~FlatBufferMission~!~\false \then \\
 \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
Meth \circdef 
\\
\circblockopen
Call~.~FlatBufferMission 
~?~name
\then \\
ret := this~.~bufferEmpty(name)  \circseq  \\

\Skip
\circblockclose
\end{circusaction}	
%
\begin{circusaction}
SyncMeth \circdef 
\\
\circblockopen
Call~.~FlatBufferMission~?~thread 
~?~update
\then \\
startSyncMeth~.~FlatBufferMission~.~thread \then \\
lockAcquired~.~FlatBufferMission~.~thread \then \\
  \circblockopen


  buffer := update ~


  \circseq \\
notify~.~FlatBufferMissionObject~!~thread \then  \\ \Skip

  \circblockclose
 \circseq  \\
endSyncMeth~.~FlatBufferMission~.~thread \then  \\
\Skip
\circblockclose
\end{circusaction}	
\begin{circusaction}
SyncMeth \circdef 
\\
\circblockopen
Call~.~FlatBufferMission~?~thread 
\then \\
startSyncMeth~.~FlatBufferMission~.~thread \then \\
lockAcquired~.~FlatBufferMission~.~thread \then \\
  \circblockopen
  \circvar out : int \circspot out := buffer ~

  \circseq \\


  buffer := 0 ~


  \circseq \\
notify~.~FlatBufferMissionObject~!~thread \then  \\ \Skip

  \circseq \\
  ret := out

  \circblockclose
 \circseq  \\
endSyncMeth~.~FlatBufferMission~.~thread \then  \\
\Skip
\circblockclose
\end{circusaction}	
\begin{circusaction}
SyncMeth \circdef 
\\
\circblockopen
Call~.~FlatBufferMission~?~thread 
~?~name
\then \\
startSyncMeth~.~FlatBufferMission~.~thread \then \\
lockAcquired~.~FlatBufferMission~.~thread \then \\
  \circblockopen


waitCall~.~FlatBufferMissionObject~!~thread \then \\ waitRet~.~FlatBufferMissionObject~!~thread \then \\ \Skip

  \circblockclose
 \circseq  \\
endSyncMeth~.~FlatBufferMission~.~thread \then  \\
\Skip
\circblockclose
\end{circusaction}	
%

\begin{circusaction}
Methods \circdef 
\circblockopen
	InitializePhase \\
	\extchoice \\
	CleanupPhase \\
%
\extchoice \\
	Meth \\ 
%
	\extchoice \\
	SyncMeth \\	
	\extchoice \\
	SyncMeth \\	
	\extchoice \\
	SyncMeth \\	
%
\circblockclose 
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
 \circinterrupt (end\_mission\_app~.~FlatBufferMission \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
