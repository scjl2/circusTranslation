\begin{zsection}
  \SECTION ~ FlatBufferMissionApp ~ \parents ~ scj\_prelude, MissionId, MissionIds, \\
  \t1 SchedulableId, SchedulableIds, MissionChan, SchedulableMethChan , FlatBufferMissionClass

  \t1 , \\
ObjectChan
, 
ObjectIds
, 
ThreadIds

, FlatBufferMissionMethChan
\end{zsection}
%\begin{circus}
%\circchannelset FlatBufferMissionAppSync == \\
%	\lchanset initializeCall,register, initializeRet,cleanupMissionCall, cleanupMissionRet  \rchanset
%\end{circus}

%\begin{circus}
%\circchannelset FlatBufferMissionAppChanSet == \\
% \lchanset initializeCall, initializeRet, cleanupMissionCall, cleanupMissionRet,

%    register~.~Reader~.~FlatBufferMission 
%    register~.~Writer~.~FlatBufferMission 
%\rchanset
%\end{circus}

\begin{circus}
\circprocess FlatBufferMissionApp \circdef  \circbegin
\end{circus}

\begin{schema}{State}
  this : \circreftype FlatBufferMissionClass\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
\where
  this' = \circnew FlatBufferMissionClass()\\ 
\end{schema}

\begin{circusaction}
InitializePhase \circdef \\
\circblockopen
  initializeCall~.~FlatBufferMission \then \\
  
	register~!~Reader~!~FlatBufferMission \then   \\
	register~!~Writer~!~FlatBufferMission \then   \\


  initializeRet~.~FlatBufferMission \then \\
  \Skip
\circblockclose 
\end{circusaction}
 
\begin{circusaction}
CleanupPhase \circdef  \\
\circblockopen
 cleanupMissionCall~.~FlatBufferMission \then \\

 cleanupMissionRet~.~FlatBufferMission~!~\false \then \\
 \Skip
\circblockclose
\end{circusaction}

\begin{circusaction}
bufferEmptyMeth \circdef 
\circvar ret : \boolean \circspot
\\
\circblockopen
bufferEmptyCall~.~FlatBufferMission 
\then \\
ret := this~.~bufferEmpty()  \circseq  \\

bufferEmptyRet~.~FlatBufferMission~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}	
\begin{circusaction}
cleanUpMeth \circdef 
\circvar ret : \boolean \circspot
\\
\circblockopen
cleanUpCall~.~FlatBufferMission 
\then \\
ret := this~.~cleanUp()  \circseq  \\

cleanUpRet~.~FlatBufferMission~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}	
%
\begin{circusaction}
writeSyncMeth \circdef 
\\
\circblockopen
writeCall~.~FlatBufferMission~?~thread 
~?~update
 \then \\
\circblockopen
startSyncMeth~.~FlatBufferMissionObject~.~thread \then \\
lockAcquired~.~FlatBufferMissionObject~.~thread \then \\

  \circblockopen


  \circvar bufferEmpty : \boolean \circspot bufferEmpty := bufferEmpty() ~
 

   \circseq \\ 


\circblockopen \circmu X \circspot \\ \circblockopen \circif ~ (\lnot bufferEmpty = \true) ~ \circthen ~ \\ \t1 \circblockopen waitCall~.~FlatBufferMissionObject~!~thread \then \\ waitRet~.~FlatBufferMissionObject~!~thread \then \\ \Skip \circseq \\ bufferEmpty() \circblockclose \circseq X \\ \circelse ~ ~ \lnot (\lnot bufferEmpty = \true) \circthen \Skip \\ \circfi \circblockclose \circblockclose \\ 

   \circseq \\ 





this~.~buffer :=update
 

   \circseq \\ 


notify~.~FlatBufferMissionObject~!~thread \then  \\ \Skip
 

  \circblockclose

 \circseq  \\
endSyncMeth~.~FlatBufferMissionObject~.~thread \then  \\

writeRet~.~FlatBufferMission~.~thread \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}	
\begin{circusaction}
readSyncMeth \circdef 
\circvar ret : \num \circspot
\\
\circblockopen
readCall~.~FlatBufferMission~?~thread 
 \then \\
\circblockopen
startSyncMeth~.~FlatBufferMissionObject~.~thread \then \\
lockAcquired~.~FlatBufferMissionObject~.~thread \then \\

  \circblockopen


  \circvar bufferEmpty : \boolean \circspot bufferEmpty := bufferEmpty() ~
 

   \circseq \\ 


\circblockopen \circmu X \circspot \\ \circblockopen \circif ~ bufferEmpty = \true ~ \circthen ~ \\ \t1 \circblockopen waitCall~.~FlatBufferMissionObject~!~thread \then \\ waitRet~.~FlatBufferMissionObject~!~thread \then \\ \Skip \circseq \\ bufferEmpty() \circblockclose \circseq X \\ \circelse ~ ~ \lnot bufferEmpty = \true \circthen \Skip \\ \circfi \circblockclose \circblockclose \\ 

   \circseq \\ 


  \circvar out : \num \circspot out := buffer ~
 

   \circseq \\ 





this~.~buffer :=0
 

   \circseq \\ 


notify~.~FlatBufferMissionObject~!~thread \then  \\ \Skip
 

   \circseq \\ 


  ret := out
 

  \circblockclose

 \circseq  \\
endSyncMeth~.~FlatBufferMissionObject~.~thread \then  \\

readRet~.~FlatBufferMission~!~thread~!~ret \then \\
\Skip
\circblockclose
\circblockclose
\end{circusaction}	
%

\begin{circusaction}
Methods \circdef 
\circblockopen
	InitializePhase \\
	\extchoice \\
	CleanupPhase \\
%
\extchoice \\
	bufferEmptyMeth \\ 
\extchoice \\
	cleanUpMeth \\ 
%
	\extchoice \\
	writeSyncMeth \\	
	\extchoice \\
	readSyncMeth \\	
%
\circblockclose 
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
 \circinterrupt (end\_mission\_app~.~FlatBufferMission \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
