\begin{zsection}
  \SECTION ~ WriterApp ~ \parents ~ ManagedThreadChan, SchedulableId, SchedulableIds  

  \t1 , \\
MissionMethChan
, 
FlatBufferMissionMethChan
, 
ObjectIds
, 
ThreadIds


\end{zsection}
%
\begin{circus}
\circprocess WriterApp \circdef   fbMission : MissionID
\circspot 
 \circbegin
\end{circus}

\begin{schema}{State}
  i : \num\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~' \\
\where
  i' = 1\\ 
\end{schema}

\begin{circusaction}
Run \circdef \\
\circblockopen
	runCall~.~Writer \then \\
	
  \circblockopen




	terminationPendingCall~.~fbMission\then \\terminationPendingRet~.~fbMission~?~terminationPending\then \\


	\circblockopen \circmu X \circspot \\ \circblockopen \circif ~ (\lnot terminationPending = \true) ~ \circthen ~ \\ \t1 \circblockopen \circblockopen writeCall~.~fbMission~.~WriterThread~!~i\then \\writeRet~.~fbMission~.~WriterThread\then \\\Skip \circblockclose \circseq \\ i := i + 1 \circseq \\ \circvar keepWriting : \boolean \circspot keepWriting := (i \geq 5) ~ \circseq \\ \circif ~ (\lnot keepWriting = \true) ~ \circthen ~ \\ \t1 \circblockopen requestTerminationCall~.~fbMission\then \\requestTerminationRet~.~fbMission~?~null\then \\ \Skip \circblockclose \\ \circelse ~ \lnot (\lnot keepWriting = \true) \circthen \Skip \\ \circfi terminationPendingCall~.~fbMission\then \\terminationPendingRet~.~fbMission~?~terminationPending\then \\ \Skip \circblockclose \circseq X \\ \circelse ~ ~ \lnot (\lnot terminationPending = \true) \circthen \Skip \\ \circfi \circblockclose \circblockclose \\
\Skip
  \circblockclose

 \circseq \\
	runRet~.~Writer \then \\
	\Skip
\circblockclose
\end{circusaction}	

%
%

\begin{circusaction}
Methods \circdef \\
\circblockopen
	Run \\
%
%
%
\circblockclose 
	 \circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( \lschexpract Init \rschexpract \circseq Methods) 
  \circinterrupt (end\_managedThread\_app~.~Writer \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}