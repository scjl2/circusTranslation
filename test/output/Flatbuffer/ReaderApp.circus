\begin{zsection}
  \SECTION ~ ReaderApp ~ \parents ~ ManagedThreadChan, SchedulableId, SchedulableIds
\end{zsection}
%
\begin{circus}
\circprocess ReaderApp \circdef \circbegin
\end{circus}

\begin{schema}{State}
  fbMission : FlatBufferMission\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~'
\where
  fbMission' = fbMission\\ 
\end{schema}

\begin{circusaction}
Run \circdef \\
\circblockopen
	runCall~.~Reader \then \\
		
	runRet~.~Reader \then \\
	\Skip
\circblockclose
\end{circusaction}	

\begin{circusaction}
Methods \circdef \\
\circblockopen
	Run \\
%
\extchoice \\
	runMeth \\ 
%
%
\circblockclose 
	 \circseq Methods
\end{circusaction}

\begin{circusaction}
runMeth \circdef 
\circvar ret : null \circspot
\\
\circblockopen
runCall~.~Reader 
\then \\
  \circblockopen


  \circvar terminationPending : boolean \circspot terminationPending := fbMission.terminationPending() ~

  \circseq \\
\circblockopen \circmu X \circspot \\ \circblockopen \circif ~ (\lnot terminationPending = \true) ~ \circthen ~ \\ \t1 \circblockopen \circblockopen \circblockopen \circvar bufferEmpty : boolean \circspot bufferEmpty := fbMission.bufferEmpty() ~ \circseq \\ \circblockopen \circmu X \circspot \\ \circblockopen \circif ~ bufferEmpty = \true ~ \circthen ~ \\ \t1 \circblockopen \circblockopen fbMission.waitOnMission() \circblockclose \circblockclose \circseq X \\ \circelse ~ ~ \lnot bufferEmpty = \true \circthen \Skip \\ \circfi \circblockclose \circblockclose \circseq \\ \circvar value : int \circspot value := fbMission.read() ~ \circseq \\ \circblockclose \circblockclose \circblockclose \circseq X \\ \circelse ~ ~ \lnot (\lnot terminationPending = \true) \circthen \Skip \\ \circfi \circblockclose \circblockclose
  \circblockclose
 \circseq  \\

runRet~.~Reader~!~ret \then \\
\Skip
\circblockclose
\end{circusaction}	
%
%

\begin{circusaction}
\circspot (Methods) \circinterrupt (end\_managedThread\_app~.~Reader \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
