\begin{zsection}
  \SECTION ~ FlatBufferMissionSequencerApp ~ \parents ~ TopLevelMissionSequencerChan,\\
  \t1 MissionId, MissionIds, SchedulableId 
\end{zsection}
%\begin{circus}
%\circchannelset FlatBufferMissionSequencerAppSync == \\ \lchanset getNextMissionCall, getNextMissionRet,end\_sequencer\_app \rchanset
%\end{circus}

%\begin{circus}
%\circchannelset FlatBufferMissionSequencerAppChanSet == FlatBufferMissionSequencerAppSync
%\end{circus}

\begin{circus}
\circprocess FlatBufferMissionSequencerApp \circdef \circbegin\\ 
\end{circus}
   
\begin{schema}{State}
  returnedMission : boolean\\ 
\end{schema}
% 
\begin{circusaction}
\circstate State
\end{circusaction}
%
\begin{schema}{Init}
  State~'
\where
  returnedMission' := false\\ 
\end{schema}

\begin{circusaction}
GetNextMission \circdef \\
\circblockopen
    getNextMissionCall~.~FlatBufferMissionSequencer \then \\
	
	getNextMissionRet~.~FlatBufferMissionSequencer~!~FlatBufferMission  \then \\
	\Skip
\circblockclose	
\end{circusaction}

\begin{circusaction}
testMeth \circdef \\
\circblockopen
testCall~.~FlatBufferMissionSequencer 
\then \\
~\\
testRet~.~FlatBufferMissionSequencer \then \\
\Skip
\circblockclose
\end{circusaction}	
%
%

\begin{circusaction}
Methods \circdef  \\
\circblockopen
	GetNextMission \\
%
\extchoice \\
	testMeth \\ 
%
%
\circblockclose 
\circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot (Methods) %\circhide MissionSequencerAppStateSync
\circinterrupt (end\_sequencer\_app~.~FlatBufferMissionSequencer \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
