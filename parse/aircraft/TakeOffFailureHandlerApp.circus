\begin{zsection}
  \SECTION ~ TakeOffFailureHandlerApp ~ \parents ~ AperiodicEventHandlerChan, SchedulableId, SchedulableIds , MethodCallBindingChannels
 \\
 \t1  ,
MainMissionMethChan, MissionMethChan





\end{zsection}

\begin{circus}
\circprocess TakeOffFailureHandlerApp \circdef \\ \t1
  mainMission : MissionID ; \\
  takeoffMission : MissionID ; \\
  threshold : \real

\circspot
  \circbegin
\end{circus}


\begin{circusaction}
handleAsyncEvent \circdef \\
\circblockopen
	handleAsyncEventCall~.~TakeOffFailureHandlerSID \then \\

      \circblockopen
            binder\_getAirSpeedCall~.~mainMission~.~TakeOffFailureHandlerSID\then \\
            binder\_getAirSpeedRet~.~mainMission~.~TakeOffFailureHandlerSID~?~getAirSpeed\then \\
            \circvar currentSpeed : \real \circspot currentSpeed :=~getAirSpeed \circseq \\
          \circif ~ (currentSpeed < threshold) ~ \circthen ~  \\
          \t1 \circblockopen
            binder\_takeOffAbortCall~.~takeoffMission~.~TakeOffFailureHandlerSID \then \\
            binder\_takeOffAbortRet~.~takeoffMission~.~TakeOffFailureHandlerSID\then \\

            requestTerminationCall~.~takeoffMission~.~TakeOffFailureHandlerSID \then \\
            requestTerminationRet~.~takeoffMission~.~TakeOffFailureHandlerSID~?~requestTermination\then \\
            \Skip
      \circblockclose  \\
  \circelse ~ \lnot (currentSpeed < threshold) ~ \circthen ~   \\
\t1  \Skip   \\
  \circfi
        \circblockclose

 \circseq \\
    handleAsyncEventRet~.~TakeOffFailureHandlerSID \then \\
    \Skip
\circblockclose
\end{circusaction}

%
%

\begin{circusaction}
Methods \circdef \\
\circblockopen
	handleAsyncEvent \\
%
%
%
\circblockclose
	 \circseq Methods
\end{circusaction}

\begin{circusaction}
\circspot ( Methods)
  %\circinterrupt (end\_aperiodic\_app~.~TakeOffFailureHandlerSID \then \Skip)
\end{circusaction}

\begin{circus}
  \circend
\end{circus}
